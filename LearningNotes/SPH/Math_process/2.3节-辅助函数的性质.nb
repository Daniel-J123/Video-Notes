(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 14.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    481810,       9127]
NotebookOptionsPosition[    474365,       9001]
NotebookOutlinePosition[    474888,       9021]
CellTagsIndexPosition[    474845,       9018]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[BoxData[
 RowBox[{"NIntegrate", "[", 
  RowBox[{
   RowBox[{"Abs", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Sin", "[", 
       RowBox[{"x", "/", "0.01"}], "]"}], "/", "Pi"}], " ", "x"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "1", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellFrame->{{0, 0}, {0, 0}},
 CellChangeTimes->{{3.926215744930977*^9, 3.926215748883932*^9}, {
  3.926215833326439*^9, 3.9262158999672184`*^9}, {3.926215938265606*^9, 
  3.9262159388013535`*^9}, {3.926215995052759*^9, 3.9262160488108234`*^9}, {
  3.9262161055218983`*^9, 3.926216232644474*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"a517237c-e40b-fd4c-b82e-88496e8478fd"],

Cell[BoxData["0.8098598517058497`"], "Output",
 CellChangeTimes->{{3.9262162283240795`*^9, 3.9262162358555737`*^9}},
 CellLabel->"Out[4]=",ExpressionUUID->"d5a75cf1-8898-c54c-b6c6-5678bc05b1e1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"integrate", " ", 
  RowBox[{"1", "/", 
   RowBox[{"(", 
    RowBox[{"1", "-", 
     RowBox[{"x", "^", "3"}]}], ")"}]}]}]], "Input",
 CellChangeTimes->{{3.92621632953792*^9, 3.926216363616659*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"2e0b4671-4c7a-774b-a1d1-683e5a81c411"],

Cell[BoxData[
 FractionBox["integrate", 
  RowBox[{"1", "-", 
   SuperscriptBox["x", "3"]}]]], "Output",
 CellChangeTimes->{3.926216365735033*^9},
 CellLabel->"Out[5]=",ExpressionUUID->"a2d811eb-0168-4a4a-bce0-3aab3f82c4d3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = <|
  "query" -> "integrate 1/(1-x^3)", "assumptions" -> {}, "parse" -> Defer[
     Integrate[1/(1 - $CellContext`x^3), $CellContext`x]], 
   "inputpredictions" -> {{
     "InputMathOperation$PlotFunctionWithIntegralIndefinite", 
      Predictions`Prediction[
      0.99, "\:7ed8\:5236", "\:7ed8\:56fe\:51fd\:6570\:548c\:79ef\:5206", 
       HoldComplete[
        Plot[{(1 - $CellContext`x^3)^(-1), 
          3^Rational[-1, 2] ArcTan[3^Rational[-1, 2] (1 + 2 $CellContext`x)] + 
          Rational[-1, 3] Log[1 - $CellContext`x] + 
          Rational[1, 6] 
           Log[1 + $CellContext`x + $CellContext`x^2]}, {$CellContext`x, \
-8.`3., 8.`3.}, PlotLegends -> {"f", "\[Integral]f"}]]& ], 
      Predictions`InInput}, {"InputMathOperation$IntegralToInfinity", 
      Predictions`Prediction[
      0.97, "\:79ef\:5206", 
       "", {{"\:4ece 0 \:5230 \[Infinity] \:79ef\:5206", HoldComplete[
          Integrate[1/(1 - $CellContext`x^3), {$CellContext`x, 0, 
            DirectedInfinity[1]}]]& }, {
        "\:4ece -\[Infinity] \:5230 0 \:79ef\:5206", HoldComplete[
          Integrate[1/(1 - $CellContext`x^3), {$CellContext`x, 
            DirectedInfinity[-1], 0}]]& }}], Predictions`InInput}, {
     "InputMathOperation$Derivatives", 
      Predictions`Prediction[0.96, "\:5bfc\:6570", 
       Row[{"\:5173\:4e8e ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline], " \:7684\:5bfc\:6570"}], HoldComplete[
        D[1/(1 - $CellContext`x^3), $CellContext`x]]& ], 
      Predictions`InInput}, {"InputMathOperation$ExtractFunction", 
      Predictions`Prediction[
      0.95, "\:7ed3\:6784\:5316\:64cd\:4f5c", "\:63d0\:53d6\:51fd\:6570", 
       Apply[HoldComplete, 
        Hold[1/(1 - $CellContext`x^3)]]& ], Predictions`InInput}, {
     "InputMathOperation$FunctionDomainAndRange", 
      Predictions`Prediction[
      0.94, "\:5c5e\:6027", 
       "", {{"\:51fd\:6570\:7684\:5b9a\:4e49\:57df", HoldComplete[
          FunctionDomain[1/(1 - $CellContext`x^3), {$CellContext`x}]]& }, {
        "\:51fd\:6570\:7684\:503c\:57df", HoldComplete[
          FunctionRange[
          1/(1 - $CellContext`x^3), {$CellContext`x}, {$CellContext`y}]]& }}],
       Predictions`InInput}, {"InputMathOperation$InflectionPoints", 
      Predictions`Prediction[
      0.5, "\:5206\:6790", "\:62d0\:70b9", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["InflectionPoints"][1/(1 - $CellContext`x^3), 
          Hold[$CellContext`x]]]]& ], Predictions`InInput}, {
     "InputMathOperation$StationaryPoints", 
      Predictions`Prediction[
      0.5, "\:5206\:6790", "\:9a7b\:70b9", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["StationaryPoints"][1/(1 - $CellContext`x^3), 
          Hold[$CellContext`x]]]]& ], Predictions`InInput}, {
     "InputMathOperation$CriticalPoints", 
      Predictions`Prediction[
      0.5, "\:5206\:6790", "\:4e34\:754c\:70b9", 
       Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["CriticalPoints"][1/(1 - $CellContext`x^3), 
          Hold[$CellContext`x]]]]& ], Predictions`InInput}, {
     "InputMathOperation$Zeros", 
      Predictions`Prediction[
      0.5, "\:5206\:6790", "\:5b9e\:6570\:96f6", 
       Predictions`Private`ReleaseHolds[
        HoldComplete[
         Solve[1/(1 - $CellContext`x^3) == 0, {
           Hold[$CellContext`x]}, Reals]]]& ], Predictions`InInput}, {
     "InputMathOperation$Asymptotes", 
      Predictions`Prediction[
      0.5, "\:5206\:6790", "\:6e10\:8fd1\:7ebf", 
       Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["Asymptotes"][1/(1 - $CellContext`x^3), 
          Hold[$CellContext`x], $CellContext`y]]]& ], Predictions`InInput}, {
     "InputMathOperation$InvertFunction", 
      Predictions`Prediction[
      0.5, "\:6c42\:89e3", "\:9006\:51fd\:6570", HoldComplete[
        Reduce[$CellContext`y == 
         1/(1 - $CellContext`x^3), $CellContext`x]]& ], 
      Predictions`InInput}, {"InputMathOperation$PlotFunction", 
      Predictions`Prediction[
      0.5, "\:7ed8\:5236", "\:7ed8\:56fe\:51fd\:6570", HoldComplete[
        Plot[(1 - $CellContext`x^3)^(-1), {$CellContext`x, -8.`3., 
          8.`3.}]]& ], Predictions`InInput}, {
     "InputMathOperation$FunctionParity", 
      Predictions`Prediction[
      0.5, "\:5c5e\:6027", 
       "", {{"\:51fd\:6570\:7684\:5947\:5076\:6027", HoldComplete[
          ResourceFunction["FunctionParity"][
          1/(1 - $CellContext`x^3), $CellContext`x]]& }, {
        "\:5076\:51fd\:6570\:ff1f", HoldComplete[
          ResourceFunction["EvenFunctionQ"][
          1/(1 - $CellContext`x^3), $CellContext`x]]& }, {
        "\:5947\:51fd \:6570\:ff1f", HoldComplete[
          ResourceFunction["OddFunctionQ"][
          1/(1 - $CellContext`x^3), $CellContext`x]]& }}], 
      Predictions`InInput}, {"InputMathOperation$Series", 
      Predictions`Prediction[0.5, "\:5c42", 
       Row[{"\:5728 ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline], " = ", 
         Pane[
          Style[
           HoldForm[0], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline], 
         " \:5904\:7684\:7ea7\:6570\:5c55\:5f00"}], HoldComplete[
        Series[1/(1 - $CellContext`x^3), {$CellContext`x, 0, 5}]]& ], 
      Predictions`InInput}, {"InputMathOperation$Limits", 
      Predictions`Prediction[0.5, "\:6781\:9650", "", {{
         Row[{"\:5f53 ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[0], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " \:65f6\:7684\:6781\:9650"}], 
         HoldComplete[
          Limit[1/(1 - $CellContext`x^3), $CellContext`x -> 0]]& }, {
         Row[{"\:5f53 ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[
              DirectedInfinity[-1]], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline], 
           " \:65f6\:7684\:6781\:9650"}], HoldComplete[
          Limit[
          1/(1 - $CellContext`x^3), $CellContext`x -> 
           DirectedInfinity[-1]]]& }, {
         Row[{"\:5f53 ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[
              DirectedInfinity[1]], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline], 
           " \:65f6\:7684\:6781\:9650"}], HoldComplete[
          Limit[
          1/(1 - $CellContext`x^3), $CellContext`x -> 
           DirectedInfinity[1]]]& }}], Predictions`InInput}}, 
   "otherpredictions" -> {"StepByStep", "FullResults"}, 
   "allassumptions" -> {}, "summarizeassumptions" -> 
   FrontEnd`SuppressEvaluationHash[True], "summarizepredictions" -> 
   FrontEnd`SuppressEvaluationHash[True]|>, Typeset`update$$ = 
  FrontEnd`SuppressEvaluationHash[3]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    1, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{1033.9, {48.1, 22.6}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{
 "CellSettings"-><|"HideDetails" -> FrontEnd`SuppressEvaluationHash[False]|>},
 CellLabel->"In[6]:=",ExpressionUUID->"b2795fc7-fbb3-0c43-98b3-0f7fe6d92aba"],

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"1", "/", 
    RowBox[{"(", 
     RowBox[{"1", " ", "-", " ", 
      RowBox[{"x", "^", "3"}]}], ")"}]}], ",", " ", "x"}], 
  "]"}]], "DeployedWLInput",
 PrivateCellOptions->{"CellSettings"->{"UsageTags" -> {{"Integrate", 3}}}},
 CellChangeTimes->{3.9262164252674503`*^9},
 CellLabel->"In[6]:=",ExpressionUUID->"8b9e0b18-3ccb-624f-b652-2b28de4a1dc0"],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"ArcTan", "[", 
    FractionBox[
     RowBox[{"1", "+", 
      RowBox[{"2", " ", "x"}]}], 
     SqrtBox["3"]], "]"}], 
   SqrtBox["3"]], "+", 
  TemplateBox[{"1"},
   "C"], "-", 
  RowBox[{
   FractionBox["1", "3"], " ", 
   RowBox[{"Log", "[", 
    RowBox[{"1", "-", "x"}], "]"}]}], "+", 
  RowBox[{
   FractionBox["1", "6"], " ", 
   RowBox[{"Log", "[", 
    RowBox[{"1", "+", "x", "+", 
     SuperscriptBox["x", "2"]}], "]"}]}]}]], "Output",
 CellChangeTimes->{3.92621642538163*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"754a00fd-d8d3-e349-844c-1b5071367396"]
}, Open  ]],

Cell[CellGroupData[{

Cell["integrate 1/(1-x^3)", "WolframAlphaLong",
 CellChangeTimes->{3.9262164367485943`*^9},
 CellLabel->"In[7]:=",ExpressionUUID->"296aa554-1c31-9544-9bdf-0bb526c7d76a"],

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "integrate 1/(1-x^3)", Typeset`opts$$ = {
   AppearanceElements -> {
     "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
      "Sources"}, Asynchronous -> All, 
    TimeConstraint -> {20, Automatic, Automatic, Automatic}, 
    Method -> {
     "Formats" -> {"cell", "minput", "msound", "dataformats"}, "Server" -> 
      "https://api.wolframalpha.com/v1/"}}, Typeset`elements$$ = {
   "Warnings", "Assumptions", "Brand", "Pods", "PodMenus", "Unsuccessful", 
    "Sources"}, Typeset`pod1$$ = XMLElement[
   "pod", {"title" -> "Indefinite integral", "scanner" -> "Integral", "id" -> 
     "IndefiniteIntegral", "position" -> "100", "error" -> "false", 
     "numsubpods" -> "1", "primary" -> "true"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["minput", {}, {"Integrate[1/(1 - x^3), x]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                RowBox[{
                  TagBox[
                   RowBox[{"\[Integral]", 
                    RowBox[{
                    TagBox[
                    TagBox[
                    FractionBox["1", 
                    RowBox[{"1", "-", 
                    SuperscriptBox["x", "3"]}]], Identity], 
                    PrecedenceForm[#, 400.]& ], 
                    RowBox[{"\[DifferentialD]", "x"}]}]}], HoldForm], 
                  "\[LongEqual]", 
                  TagBox[
                   StyleBox[
                    RowBox[{
                    StyleBox[
                    RowBox[{
                    FractionBox["1", "6"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}], ")"}], 
                    "-", 
                    RowBox[{"2", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "x"}], ")"}]}], "+", 
                    RowBox[{"2", " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{
                    SuperscriptBox["tan", 
                    RowBox[{"-", "1"}]], "(", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "1"}], 
                    SqrtBox["3"]], ")"}]}]}], ")"}]}], {
                    GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                     LineIndent -> 0}], "+", 
                    StyleBox[
                    "\"constant\"", {
                    Magnification -> 0.9 Inherited, FontSize -> Inherited, 
                    FontFamily -> "Roboto", 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}], {
                    GrayLevel[0.6], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}], Identity]}]}, {
                PaneBox[
                 TagBox[
                  Cell[
                   TextData[{
                    StyleBox[
                    Cell[
                    BoxData[
                    FormBox[
                    
                    RowBox[{
                    "\"(\"", "\[NoBreak]", 
                    "\"assuming a complex\[Hyphen]valued logarithm\"", 
                    "\[NoBreak]", "\")\""}], TraditionalForm]]], {
                    FontSize -> 10, FontFamily -> "Roboto", 
                    GrayLevel[0.5], 
                    LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                    0}]}]], 
                  $CellContext`TagBoxWrapper["Label"]], 
                 BaseStyle -> {LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "2"}, {
       XMLElement[
       "state", {
        "name" -> "Approximate form", "input" -> 
         "IndefiniteIntegral__Approximate form"}, {}], 
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "IndefiniteIntegral__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}], 
     XMLElement["infos", {"count" -> "2"}, {
       XMLElement[
       "info", {"text" -> "tan^(-1)(x) is the inverse tangent function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/ArcTan.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/ArcTan", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/InverseTangent.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "log(x) is the natural logarithm"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Log.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ElementaryFunctions/Log", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/NaturalLogarithm.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}]}]}], 
   Typeset`pod2$$ = XMLElement[
   "pod", {"title" -> "Plots of the integral", "scanner" -> "Integral", "id" -> 
     "Plot", "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + Log[1 + x \
+ x^2])/6, {x, -2.1, 2.1}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max3259$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min3258$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3258$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3259$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$4261052$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min3258$\
4261053$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max3259$4261054$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max3259$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min3258$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$4261052$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3258$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3258$\
4261053$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3259$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max3259$\
4261054$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$4261029[
                    Plot[{
                    Re[
                    Rational[1, 6] (
                    2 3^Rational[1, 2] 
                    ArcTan[3^Rational[-1, 2] (1 + 2 $CellContext`x)] - 2 
                    Log[1 - $CellContext`x] + 
                    Log[1 + $CellContext`x + $CellContext`x^2])], 
                    Im[
                    Rational[1, 6] (
                    2 3^Rational[1, 2] 
                    ArcTan[3^Rational[-1, 2] (1 + 2 $CellContext`x)] - 2 
                    Log[1 - $CellContext`x] + 
                    Log[1 + $CellContext`x + $CellContext`x^2])]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.5]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.5]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.5]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][
                    Rational[1, 6] (
                    2 3^Rational[1, 2] 
                    ArcTan[3^Rational[-1, 2] (1 + 2 $CellContext`x)] - 2 
                    Log[1 - $CellContext`x] + 
                    Log[1 + $CellContext`x + $CellContext`x^2]), \
{$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3258$$], 
                    (
                    Piecewise[{{
                    0. + 2.2207808513229135` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    2.2207808513229135` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min3258$$], \
-2.0773502691896257`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3258$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max3259$$]], 
                    (
                    Piecewise[{{
                    0. + 2.2207808513229135` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    2.2207808513229135` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min3258$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max3259$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3258$$ + 
                    0.004154700538379252, 
                    CalculateUtilities`GraphicsUtilities`Private`max3259$$]], 
                    2.0773502691896257`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min3258$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max3259$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$4261029]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$4261029[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$4261029[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+ARKfEdsqviHBOjYmDShJ+\
V4vuSQWrh1sZxv8efDZTdKsXaWYDtCUfjjVl+bx3XPPXe/5iQiSfq/XUzeN+\
SBYnGzh6ZkxIzHLRcHj9+\
e5BKWo4MkNfHbPmBD0PjDyA2Lnu23MgZAzot35Db5PWFQwouGrpoxqCmp6KEme0UjVnrGkp+\
YnUyYiwuhPeDHceb39arjrYDCWMdEaJFe7bSHzTBIFSQ+Bbhmzxwj/5o5Py+\
OngrEQvhfAI1CPjXciSWxgBCcM8/G+\
9Xoz9QAT04THRMZXTpOV56jtBUpLytMJzHJ843KyttsCE5kqx83Dkpt1CnLh38EHIrQxOY9N2p4tgX\
5hXDP6Lsrqn3M3wPPbtvBSnK0mDvN7x5A3oukpqGU6X7auk2Ok6lob/Zyrq5ovGw3y8ilT/\
y8dU6WXw9hpGwbMTkyNV2tvGX7YFl7k2PVzcT8y5rNzlICrhkMluI8iLtg8imbKAyfR9umq3Dgcxv2\
K7xCdPhWscAITZ9kvtj+eVOD1phBi7aYbkA6vZ0AAORhXbLndpynVo4xIEhng+\
XX9sskmog7F4872tac8pmaAOULWLU9ojpKFuhMdZV/+qLiVXC40GfJ+xDWkINeK/\
i7WRxpyeTwRnpGEeEFTr94cVkmNifSW/aAECXPCKULSX+Zjv7mHi5VAqg4lqks6Fge2NOf+\
SfTLAh8DT3XW3LE9R5d322I2gTirVRfQJFmcNptjut9kunFDc6D7kuBbEv+\
B3m0K3abwVzeFpT24WxO6NaFbE7o1oVsT/t81wUaM/0q/AY/EuD4="]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Plot[(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + Log[1 + x \
+ x^2])/6, {x, -12., 12.}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max3261$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min3260$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3260$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3261$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$4261148$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min3260$\
4261149$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max3261$4261150$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max3261$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min3260$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$4261148$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3260$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3260$\
4261149$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3261$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max3261$\
4261150$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    Labeled[
                    CalculateUtilities`GraphicsUtilities`Private`post$4261125[
                    Plot[{
                    Re[
                    Rational[1, 6] (
                    2 3^Rational[1, 2] 
                    ArcTan[3^Rational[-1, 2] (1 + 2 $CellContext`x)] - 2 
                    Log[1 - $CellContext`x] + 
                    Log[1 + $CellContext`x + $CellContext`x^2])], 
                    Im[
                    Rational[1, 6] (
                    2 3^Rational[1, 2] 
                    ArcTan[3^Rational[-1, 2] (1 + 2 $CellContext`x)] - 2 
                    Log[1 - $CellContext`x] + 
                    Log[1 + $CellContext`x + $CellContext`x^2])]}, 
                    SlotSequence[2], PlotStyle -> {{
                    Directive[
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.5]]}, 
                    Directive[
                    RGBColor[1, 0.3, 0], 
                    AbsoluteThickness[1]]}]], 
                    Column[{
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.5]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" real part", Smaller, 
                    GrayLevel[0.3]]}], 
                    Row[{
                    Graphics[{
                    Directive[
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.5]], 
                    AbsoluteThickness[1], 
                    Line[{{0, 0}, {10, 0}}]}, ImageSize -> {20, 4}, 
                    BaselinePosition -> (Center -> Center)], 
                    Style[" imaginary part", Smaller, 
                    GrayLevel[0.3]]}]}, Spacings -> 0], {{Right, Bottom}}], 
                    HoldAll][
                    Rational[1, 6] (
                    2 3^Rational[1, 2] 
                    ArcTan[3^Rational[-1, 2] (1 + 2 $CellContext`x)] - 2 
                    Log[1 - $CellContext`x] + 
                    Log[1 + $CellContext`x + $CellContext`x^2]), \
{$CellContext`x, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3260$$], 
                    (
                    Piecewise[{{
                    0. + 13.324685107937482` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    13.324685107937482` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min3260$$], \
-12.464101615137755`], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3260$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max3261$$]], 
                    (
                    Piecewise[{{
                    0. + 13.324685107937482` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    13.324685107937482` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min3260$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max3261$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3260$$ + 
                    0.02492820323027551, 
                    CalculateUtilities`GraphicsUtilities`Private`max3261$$]], 
                    12.464101615137755`]}, 
                    LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, 
                    PlotRange -> {Full, Automatic}, LabelStyle -> {}, Ticks -> 
                    Automatic, ImageSize -> Scaled[0.4], AxesLabel -> {
                    RawBoxes[
                    FormBox["x", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min3260$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max3261$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[
                    Style, $CellContext`UnitNumberForm, NumberForm] -> (#& )],
                     Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[$CellContext`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    
                    Map[$CellContext`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = $CellContext`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    $CellContext`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    $CellContext`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$4261125]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$4261125[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$4261125[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "6:eJztVm1v0zAQbikw3t/+\
ARKfkbpNSHxAgnVsTBpQkvK9t8RJLFw72M42+PPgs5ukWbtKMR2gKf1wqi/\
N47vnnrve8xMRJP1er6duGvNBsDjZwtMzY0ZilouCx+/Pc0mUooInN/\
DZPWNCovcJgx8kdr7bxhwIOQPtzm/wfWBRwUCTr5oyqilR00MJeUYjVXvGkp6an0yZiIDRn+\
TF7var4XDntYPBWMagNZFc7bSFzDMJiiQ9BLplzB4D/\
s0dn5bHTwVjIfleEB4R9dh4JxJiAyM4MMzH+9brzdQDTEwDj0HGV06Tleeo7QVKS8rTCZnl+\
MblZA3bAoNMlePmYcnNOgW58O/gAxHamJzHJm3PlkC/MK4ZfRdl9c+5G+\
D5bVt4Kc5WE4f5vWPIG2h6StQynS9b18kxUnWtjX7O1VXNl40GefmUqf+\
XjqnSy2Fstw2DzE5MjVdrbxl+ty28yLHr5+J+\
ZMxn5ygBVw2HSnAfRVyweRTNlAdOou3TVblxOIz7Fd8hOn0qWOEEJs6yX2x/\
PKnA600hxNpNNyAdXs+AgOTEuGLL7T5NqR5lICEywPPr+\
mWTTUQdised7WtPeUzNAHOErFue0BwlC3UHHWVf/qi4lVwuNBnyfsQ1SYlcK/\
q7WB9pyOXxRHhGEuIFTb16c1glNQbpLftBCRLmwClC0l/mY7+5h4uVQKoOJapLOhYHtjTn/\
kn0ywIfE57qrLlje44u77bFbAJxVqsuoEmyOG02x3S/yXTjhuZA9yXBtyT+\
A73bFLpN4a9uCkt7cLcmdGtCtyZ0a0K3Jvy/a4KNGP+VfgNqi7hu"]]}; 
                 Typeset`initDone$$ = True), DynamicModuleValues :> {}, 
                Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}, 
                UndoTrackedVariables :> {
                 Typeset`show$$, Typeset`bookmarkMode$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "statelist", {
        "count" -> "2", "value" -> "Complex-valued plots", "delimiters" -> 
         ""}, {
         XMLElement[
         "state", {
          "name" -> "Complex-valued plots", "input" -> 
           "Plot__Complex-valued plots"}, {}], 
         XMLElement[
         "state", {
          "name" -> "Real-valued plots", "input" -> 
           "Plot__Real-valued plots"}, {}]}]}]}], Typeset`pod3$$ = XMLElement[
   "pod", {
    "title" -> "Expanded form of the integral", "scanner" -> "Integral", "id" -> 
     "ExpandedFormOfTheIntegral", "position" -> "300", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Expand[(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + Log[1 + \
x + x^2])/6]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   RowBox[{
                    FractionBox["1", "6"], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}], ")"}]}], 
                   "-", 
                   RowBox[{
                    FractionBox["1", "3"], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "x"}], ")"}]}], "+", 
                   FractionBox[
                    RowBox[{
                    SuperscriptBox["tan", 
                    RowBox[{"-", "1"}]], "(", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "1"}], 
                    SqrtBox["3"]], ")"}], 
                    SqrtBox["3"]]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontSize -> Inherited, 
                  FontFamily -> "Roboto", 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "ExpandedFormOfTheIntegral__Step-by-step solution", "stepbystep" -> 
         "true", "buttonstyle" -> "StepByStepSolution"}, {}]}]}], 
   Typeset`pod4$$ = XMLElement[
   "pod", {"title" -> "Alternate forms of the integral", "scanner" -> 
     "Integral", "id" -> "AlternateFormOfTheIntegral", "position" -> "400", 
     "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Apart[(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + Log[1 + \
x + x^2])/6]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   RowBox[{
                    FractionBox["1", "6"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"log", "(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}], ")"}], 
                    "-", 
                    RowBox[{"2", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "x"}], ")"}]}]}], ")"}]}], "+", 
                   FractionBox[
                    RowBox[{
                    SuperscriptBox["tan", 
                    RowBox[{"-", "1"}]], "(", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "1"}], 
                    SqrtBox["3"]], ")"}], 
                    SqrtBox["3"]]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontSize -> Inherited, 
                  FontFamily -> "Roboto", 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "TrigToExp[(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + \
Log[1 + x + x^2])/6]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 RowBox[{
                   RowBox[{
                    FractionBox["1", "6"], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{
                    SuperscriptBox["x", "2"], "+", "x", "+", "1"}], ")"}]}], 
                   "-", 
                   RowBox[{
                    RowBox[{
                    FractionBox["1", "3"]}], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "x"}], ")"}]}], "+", 
                   FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "1"}], ")"}]}], 
                    SqrtBox["3"]]}], ")"}]}], 
                    RowBox[{"2", " ", 
                    SqrtBox["3"]}]], "-", 
                   FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "+", 
                    FractionBox[
                    RowBox[{"\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", "1"}], ")"}]}], 
                    SqrtBox["3"]]}], ")"}]}], 
                    RowBox[{"2", " ", 
                    SqrtBox["3"]}]]}], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontSize -> Inherited, 
                  FontFamily -> "Roboto", 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "2"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}]}], 
   Typeset`pod5$$ = XMLElement[
   "pod", {"title" -> "Expanded logarithmic form", "scanner" -> "Integral", 
     "id" -> "LogExpand", "position" -> "500", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "FunctionExpand[(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + \
Log[1 + x + x^2])/6, Positive[x]]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 TagBox[
                  RowBox[{
                    RowBox[{
                    FractionBox["1", "3"], " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{
                    SuperscriptBox["tan", 
                    RowBox[{"-", "1"}]], "(", 
                    RowBox[{
                    SuperscriptBox["3", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], "+", 
                    RowBox[{"2", " ", 
                    SuperscriptBox["3", 
                    RowBox[{"-", 
                    RowBox[{"1", "/", "2"}]}]], " ", "x"}]}], ")"}]}], "-", 
                    RowBox[{
                    FractionBox["1", "3"], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "x"}], ")"}]}], "+", 
                    RowBox[{
                    FractionBox["1", "6"], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "+", "x", "+", 
                    SuperscriptBox["x", "2"]}], ")"}]}]}], HoldForm], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontSize -> Inherited, 
                  FontFamily -> "Roboto", 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "LogExpand__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`pod6$$ = 
   XMLElement[
   "pod", {"title" -> "Reduced logarithmic form", "scanner" -> "Integral", 
     "id" -> "LogReduce", "position" -> "600", "error" -> "false", 
     "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Simplify[(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + Log[1 \
+ x + x^2])/6, x < 1]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             StyleBox[
              RowBox[{
                StyleBox[
                 TagBox[
                  RowBox[{
                    FractionBox["1", "6"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{
                    SuperscriptBox["tan", 
                    RowBox[{"-", "1"}]], "(", 
                    FractionBox[
                    RowBox[{"1", "+", 
                    RowBox[{"2", " ", "x"}]}], 
                    SqrtBox["3"]], ")"}]}], "+", 
                    RowBox[{"log", "(", 
                    FractionBox["1", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "-", "x"}], ")"}], "2"]], ")"}], "+", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "+", "x", "+", 
                    SuperscriptBox["x", "2"]}], ")"}]}], ")"}]}], HoldForm], {
                  GrayLevel[0], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
                  LineIndent -> 0}], "+", 
                StyleBox[
                "\"constant\"", {
                 Magnification -> 0.9 Inherited, FontSize -> Inherited, 
                  FontFamily -> "Roboto", 
                  LinebreakAdjustments -> {1, 100, 1, 0, 100}, LineIndent -> 
                  0}]}], {
               GrayLevel[0.6], LinebreakAdjustments -> {1, 100, 1, 0, 100}, 
               LineIndent -> 0}], Identity], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["states", {"count" -> "1"}, {
       XMLElement[
       "state", {
        "name" -> "Step-by-step solution", "input" -> 
         "LogReduce__Step-by-step solution", "stepbystep" -> "true", 
         "buttonstyle" -> "StepByStepSolution"}, {}]}]}], Typeset`pod7$$ = 
   XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x = 0", "scanner" -> 
     "Series", "id" -> "SeriesExpansionOfTheIntegralAtx=0", "position" -> 
     "700", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + Log[1 + \
x + x^2])/6, {x, 0, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    FractionBox["\[Pi]", 
                    RowBox[{"6", " ", 
                    SqrtBox["3"]}]], "+", "x", "+", 
                    FractionBox[
                    SuperscriptBox["x", "4"], "4"], "+", 
                    FractionBox[
                    SuperscriptBox["x", "7"], "7"], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox["x", "9"], ")"}], 
                    SeriesData[$CellContext`x, 0, {}, 0, 9, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "0", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["\[Pi]", 
                    RowBox[{"6", " ", 
                    SqrtBox["3"]}]], ",", "1", ",", "0", ",", "0", ",", 
                    FractionBox["1", "4"], ",", "0", ",", "0", ",", 
                    FractionBox["1", "7"]}], "}"}], ",", "0", ",", "9", ",", 
                    "1"}], "]"}]}, "SeriesData", DisplayFunction -> (#& ), 
                 InterpretationFunction -> (#2& ), SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"Taylor series\"", "\[NoBreak]", 
                   "\")\""}], {FontSize -> 10, FontFamily -> "Roboto", 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod8$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x = 1", "scanner" -> 
     "Series", "id" -> "SeriesExpansionOfTheIntegralAtx=1", "position" -> 
     "800", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + Log[1 + \
x + x^2])/6, {x, 1, 4}]"}], 
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  RowBox[{
                    RowBox[{
                    FractionBox["1", "18"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{
                    RowBox[{"6"}], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"1", "-", "x"}], ")"}]}]}], "+", 
                    RowBox[{"2", " ", 
                    SqrtBox["3"], " ", "\[Pi]"}], "+", 
                    RowBox[{"log", "(", "27", ")"}]}], ")"}]}], "+", 
                    FractionBox[
                    RowBox[{"x", "-", "1"}], "3"], "-", 
                    RowBox[{
                    FractionBox["1", "9"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", "1"}], ")"}], "2"]}], "+", 
                    RowBox[{
                    FractionBox["1", "27"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", "1"}], ")"}], "3"]}], "-", 
                    RowBox[{
                    FractionBox["1", "108"], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", "1"}], ")"}], "4"]}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", "1"}], ")"}], "5"], ")"}], 
                    SeriesData[$CellContext`x, 1, {}, 0, 5, 1], Editable -> 
                    False]}], 
                  RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", "1", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "18"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", 
                    SqrtBox["3"], " ", "\[Pi]"}], "+", 
                    RowBox[{"Log", "[", "27", "]"}], "-", 
                    RowBox[{"6", " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{"1", "-", "x"}], "]"}]}]}], ")"}]}], ",", 
                    FractionBox["1", "3"], ",", 
                    RowBox[{"-", 
                    FractionBox["1", "9"]}], ",", 
                    FractionBox["1", "27"], ",", 
                    RowBox[{"-", 
                    FractionBox["1", "108"]}]}], "}"}], ",", "0", ",", "5", 
                    ",", "1"}], "]"}]}, "SeriesData", 
                 DisplayFunction -> (#& ), InterpretationFunction -> (#2& ), 
                 SyntaxForm -> Plus]}, {
                StyleBox[
                 
                 RowBox[{
                  "\"(\"", "\[NoBreak]", "\"generalized Puiseux series\"", 
                   "\[NoBreak]", "\")\""}], {
                 FontSize -> 10, FontFamily -> "Roboto", 
                  GrayLevel[0.5], LinebreakAdjustments -> {1, 100, 1, 0, 100},
                   LineIndent -> 0}]}}, 
              GridBoxAlignment -> {"Columns" -> {{Left}}}, 
              AllowScriptLevelChange -> False, DefaultBaseStyle -> "Column", 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
             "Column"], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement[
       "dataformats", {}, {
        "plaintext,minput,moutput,computabledata,formatteddata,formuladata"}]}\
], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod9$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x = -(-1)^(1/3)", 
     "scanner" -> "Series", "id" -> 
     "SeriesExpansionOfTheIntegralAtx=-(-1)^(1/3)", "position" -> "900", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + Log[1 + \
x + x^2])/6, {x, -(-1)^(1/3), 4}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              FractionBox["1", "3"], " ", 
              RowBox[{"(", 
                RowBox[{
                  RowBox[{"-", 
                    RowBox[{
                    SqrtBox["3"], " ", "\[Pi]", " ", 
                    TemplateBox[{
                    RowBox[{
                    FractionBox["3", "4"], "-", 
                    FractionBox[
                    RowBox[{"arg", "(", 
                    RowBox[{"x", "+", 
                    RadicalBox[
                    RowBox[{"-", "1"}], "3"]}], ")"}], 
                    RowBox[{"2", " ", "\[Pi]"}]]}]}, "Floor"]}]}], "+", 
                  RowBox[{"(", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"x", "+", 
                    RadicalBox[
                    RowBox[{"-", "1"}], "3"]}], ")"}]}], "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{"(", 
                    RowBox[{"x", "+", 
                    RadicalBox[
                    RowBox[{"-", "1"}], "3"]}], ")"}]}], ")"}]}], "-", 
                    RowBox[{"4", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"3", "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"]}]}], ")"}]}], "+", 
                    RowBox[{"log", "(", "16", ")"}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{"log", "(", "3", ")"}]}], "+", 
                    RowBox[{
                    SqrtBox["3"], " ", "\[Pi]"}]}], ")"}]}], "+", 
                    RowBox[{"(", 
                    RowBox[{"x", "+", 
                    RadicalBox[
                    RowBox[{"-", "1"}], "3"]}], ")"}], "-", 
                    FractionBox[
                    RowBox[{"4", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", 
                    RadicalBox[
                    RowBox[{"-", "1"}], "3"]}], ")"}], "2"]}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "3"}], " ", "\[ImaginaryI]"}], HoldForm], 
                    "+", 
                    SqrtBox["3"]}], ")"}], "2"]], "-", 
                    RowBox[{
                    FractionBox["1", "18"], " ", "\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    TagBox[
                    RowBox[{"-", "\[ImaginaryI]"}], HoldForm], "+", 
                    SqrtBox["3"]}], ")"}], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", 
                    RadicalBox[
                    RowBox[{"-", "1"}], "3"]}], ")"}], "3"]}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "+", 
                    RadicalBox[
                    RowBox[{"-", "1"}], "3"]}], ")"}], "4"], ")"}], 
                    
                    SeriesData[$CellContext`x, -(-1)^Rational[1, 3], {}, 0, 4,
                     1], Editable -> False]}], 
                    RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", 
                    RowBox[{"-", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], 
                    RowBox[{"1", "/", "3"}]]}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    SqrtBox["3"], " ", "\[Pi]"}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{"Log", "[", "3", "]"}]}], "+", 
                    RowBox[{"Log", "[", "16", "]"}], "-", 
                    RowBox[{"4", " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{"3", "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"]}]}], "]"}]}], "+", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], 
                    RowBox[{"1", "/", "3"}]], "+", "x"}], "]"}]}], "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], 
                    RowBox[{"1", "/", "3"}]], "+", "x"}], ")"}]}], "]"}]}]}], 
                    ")"}]}], ",", "1", ",", 
                    RowBox[{"-", 
                    FractionBox["4", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "3"}], " ", "\[ImaginaryI]"}], "+", 
                    SqrtBox["3"]}], ")"}], "2"]]}], ",", 
                    RowBox[{
                    RowBox[{"-", 
                    FractionBox["1", "18"]}], " ", "\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], "+", 
                    SqrtBox["3"]}], ")"}]}]}], "}"}], ",", "0", ",", "4", ",",
                     "1"}], "]"}]}, "SeriesData", DisplayFunction -> (#& ), 
                    InterpretationFunction -> (#2& ), SyntaxForm -> Plus], 
                    ")"}]}], ")"}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "3"}, {
       XMLElement["info", {"text" -> "arg(z) is the complex argument"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Arg.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/ComplexComponents/Arg", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/ComplexArgument.html", 
           "text" -> "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {"text" -> "floor(x) is the floor function"}, {
         XMLElement[
         "link", {
          "url" -> "http://reference.wolfram.com/language/ref/Floor.html", 
           "text" -> "Documentation", "title" -> "Mathematica"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://functions.wolfram.com/IntegerFunctions/Floor", 
           "text" -> "Properties", "title" -> "Wolfram Functions Site"}, {}], 
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/FloorFunction.html", "text" -> 
           "Definition", "title" -> "MathWorld"}, {}]}], 
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod10$$ = XMLElement[
   "pod", {"title" -> "Series expansion of the integral at x = (-1)^(2/3)", 
     "scanner" -> "Series", "id" -> 
     "SeriesExpansionOfTheIntegralAtx=(-1)^(2/3)", "position" -> "1000", 
     "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + Log[1 + \
x + x^2])/6, {x, (-1)^(2/3), 4}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              FractionBox["1", "3"], " ", 
              RowBox[{"(", 
                RowBox[{
                  RowBox[{
                    SqrtBox["3"], " ", "\[Pi]", " ", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{"\[Pi]", "-", 
                    RowBox[{"2", " ", 
                    RowBox[{"arg", "(", 
                    RowBox[{"x", "-", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], 
                    RowBox[{"2", "/", "3"}]]}], ")"}]}]}], 
                    RowBox[{"4", " ", "\[Pi]"}]]}, "Floor"]}], "+", 
                  RowBox[{"(", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "2"}], " ", "\[ImaginaryI]", " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"x", "-", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], 
                    RowBox[{"2", "/", "3"}]]}], ")"}]}], "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", 
                    SqrtBox["3"], " ", "x"}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"]}], "+", "3"}], ")"}]}], "-", 
                    RowBox[{"4", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"3", "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"]}]}], ")"}]}], "+", 
                    RowBox[{"log", "(", "4", ")"}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{"log", "(", "3", ")"}]}], "+", 
                    RowBox[{
                    SqrtBox["3"], " ", "\[Pi]"}]}], ")"}]}], "+", 
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], 
                    RowBox[{"2", "/", "3"}]]}], ")"}], "-", 
                    FractionBox[
                    RowBox[{"4", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], 
                    RowBox[{"2", "/", "3"}]]}], ")"}], "2"]}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    TagBox[
                    RowBox[{"3", " ", "\[ImaginaryI]"}], HoldForm], "+", 
                    SqrtBox["3"]}], ")"}], "2"]], "+", 
                    RowBox[{
                    FractionBox["1", "18"], " ", "\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    TagBox["\[ImaginaryI]", HoldForm], "+", 
                    SqrtBox["3"]}], ")"}], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], 
                    RowBox[{"2", "/", "3"}]]}], ")"}], "3"]}], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], 
                    RowBox[{"2", "/", "3"}]]}], ")"}], "4"], ")"}], 
                    
                    SeriesData[$CellContext`x, (-1)^Rational[2, 3], {}, 0, 4, 
                    1], Editable -> False]}], 
                    RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], 
                    RowBox[{"2", "/", "3"}]], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    SqrtBox["3"], " ", "\[Pi]"}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{"Log", "[", "3", "]"}]}], "+", 
                    RowBox[{"Log", "[", "4", "]"}], "-", 
                    RowBox[{"4", " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{"3", "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"]}]}], "]"}]}], "-", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{
                    RowBox[{"-", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], 
                    RowBox[{"2", "/", "3"}]]}], "+", "x"}], "]"}]}], "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{"3", "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"]}], "+", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", 
                    SqrtBox["3"], " ", "x"}]}], "]"}]}]}], ")"}]}], ",", "1", 
                    ",", 
                    RowBox[{"-", 
                    FractionBox["4", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"3", " ", "\[ImaginaryI]"}], "+", 
                    SqrtBox["3"]}], ")"}], "2"]]}], ",", 
                    RowBox[{
                    FractionBox["1", "18"], " ", "\[ImaginaryI]", " ", 
                    RowBox[{"(", 
                    RowBox[{"\[ImaginaryI]", "+", 
                    SqrtBox["3"]}], ")"}]}]}], "}"}], ",", "0", ",", "4", ",",
                     "1"}], "]"}]}, "SeriesData", DisplayFunction -> (#& ), 
                    InterpretationFunction -> (#2& ), SyntaxForm -> Plus], 
                    ")"}]}], ")"}]}], TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod11$$ = XMLElement[
   "pod", {"title" -> 
     "Series expansion of the integral at x = 1/2 (-1 - i sqrt(3))", 
     "scanner" -> "Series", "id" -> 
     "SeriesExpansionOfTheIntegralAtx=(-1 -I*Sqrt[3])/2", "position" -> 
     "1100", "error" -> "false", "numsubpods" -> "1"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {
        "Series[(2 Sqrt[3] ArcTan[(1 + 2 x)/Sqrt[3]] - 2 Log[1 - x] + Log[1 + \
x + x^2])/6, {x, (-1 - I Sqrt[3])/2, 4}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            RowBox[{
              FractionBox["1", "3"], " ", 
              RowBox[{"(", 
                RowBox[{
                  RowBox[{"(", 
                    TemplateBox[{
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"x", "+", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"]}]}], ")"}]}]}], ")"}]}], "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{"(", 
                    RowBox[{"x", "+", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"]}]}], ")"}]}]}], ")"}]}], ")"}]}], "-", 
                    RowBox[{"4", " ", 
                    RowBox[{"log", "(", 
                    RowBox[{"3", "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"]}]}], ")"}]}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{"log", "(", "3", ")"}]}], "+", 
                    RowBox[{"4", " ", 
                    RowBox[{"log", "(", "2", ")"}]}], "+", 
                    RowBox[{
                    SqrtBox["3"], " ", "\[Pi]"}]}], ")"}]}], "+", 
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"]}]}], ")"}]}]}], ")"}], "-", 
                    FractionBox[
                    RowBox[{"4", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"]}]}], ")"}]}]}], ")"}], "2"]}], 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "3"}], " ", "\[ImaginaryI]"}], HoldForm], 
                    "+", 
                    SqrtBox["3"]}], ")"}], "2"]], "+", 
                    FractionBox[
                    RowBox[{"4", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    TagBox[
                    RowBox[{"3", " ", "\[ImaginaryI]"}], HoldForm], "+", 
                    SqrtBox["3"]}], ")"}], " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"]}]}], ")"}]}]}], ")"}], "3"]}], 
                    RowBox[{"3", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    TagBox[
                    RowBox[{
                    RowBox[{"-", "3"}], " ", "\[ImaginaryI]"}], HoldForm], 
                    "+", 
                    SqrtBox["3"]}], ")"}], "3"]}]], "+", 
                    InterpretationBox[
                    RowBox[{"O", "(", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"x", "-", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"]}]}], ")"}]}]}], ")"}], "4"], ")"}], 
                    
                    SeriesData[$CellContext`x, 
                    Rational[1, 2] (-1 + Complex[0, -1] 3^Rational[1, 2]), {},
                     0, 4, 1], Editable -> False]}], 
                    RowBox[{"SeriesData", "[", 
                    RowBox[{"x", ",", 
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"-", "1"}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"]}]}], ")"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "4"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    SqrtBox["3"], " ", "\[Pi]"}], "+", 
                    RowBox[{"4", " ", 
                    RowBox[{"Log", "[", "2", "]"}]}], "-", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{"Log", "[", "3", "]"}]}], "-", 
                    RowBox[{"4", " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{"3", "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"]}]}], "]"}]}], "+", 
                    RowBox[{"2", " ", "\[ImaginaryI]", " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"]}]}], ")"}]}], "+", "x"}], "]"}]}], "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"Log", "[", 
                    RowBox[{
                    RowBox[{"-", "\[ImaginaryI]"}], " ", 
                    SqrtBox["3"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "2"], " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"]}]}], ")"}]}], "+", "x"}], ")"}]}], "]"}]}]}],
                     ")"}]}], ",", "1", ",", 
                    RowBox[{"-", 
                    FractionBox["4", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "3"}], " ", "\[ImaginaryI]"}], "+", 
                    SqrtBox["3"]}], ")"}], "2"]]}], ",", 
                    FractionBox[
                    RowBox[{"4", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"3", " ", "\[ImaginaryI]"}], "+", 
                    SqrtBox["3"]}], ")"}]}], 
                    RowBox[{"3", " ", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "3"}], " ", "\[ImaginaryI]"}], "+", 
                    SqrtBox["3"]}], ")"}], "3"]}]]}], "}"}], ",", "0", ",", 
                    "4", ",", "1"}], "]"}]}, "SeriesData", 
                    DisplayFunction -> (#& ), 
                    InterpretationFunction -> (#2& ), SyntaxForm -> Plus], 
                    ")"}], "-", 
                  RowBox[{
                    SqrtBox["3"], " ", "\[Pi]", " ", 
                    TemplateBox[{
                    FractionBox[
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"arg", "(", 
                    RowBox[{
                    RowBox[{"2", " ", "x"}], "+", 
                    RowBox[{"\[ImaginaryI]", " ", 
                    SqrtBox["3"]}], "+", "1"}], ")"}]}], "-", 
                    RowBox[{"arg", "(", 
                    RowBox[{"-", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"2", " ", 
                    SqrtBox["3"], " ", "x"}], "+", 
                    SqrtBox["3"], "+", 
                    TagBox[
                    RowBox[{"3", " ", "\[ImaginaryI]"}], HoldForm]}], 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "2"}], " ", "\[ImaginaryI]", " ", "x"}], "+", 
                    SqrtBox["3"], "-", 
                    TagBox["\[ImaginaryI]", HoldForm]}]]}], ")"}], "+", 
                    "\[Pi]"}], 
                    RowBox[{"2", " ", "\[Pi]"}]]}, "Floor"]}]}], ")"}]}], 
            TraditionalForm]], "Output", {
          Background -> None, 
           GraphicsBoxOptions -> {
            DefaultBaseStyle -> {"Graphics", FontFamily -> "Times"}, 
             DefaultTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsTicks"], 
             DefaultFrameTicksStyle -> 
             Directive[
              FontFamily -> "Times", FontSize -> 10, "GraphicsFrameTicks"], 
             DefaultFrameStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsFrame"], DefaultAxesStyle -> Directive[
               GrayLevel[0, 0.35], FontColor -> GrayLevel[0.25], FontOpacity -> 
               1, "GraphicsAxes"]}, 
           Graphics3DBoxOptions -> {
            DefaultBaseStyle -> {FontFamily -> "Times", "Graphics3D"}}}, 
          NumberPoint -> ".", CellSize -> {550, Automatic}, 
          AutoStyleOptions -> {"HighlightFormattingErrors" -> False}, 
          RenderingOptions -> {
           "3DRenderingMethod" -> "BSPTreeOrDepthBuffer"}]}], 
       XMLElement["dataformats", {}, {"plaintext,minput,moutput"}]}], 
     XMLElement["expressiontypes", {"count" -> "1"}, {"\n   ", 
       XMLElement["expressiontype", {"name" -> "Default"}, {}], "\n  "}], 
     XMLElement["infos", {"count" -> "1"}, {
       XMLElement["info", {}, {
         XMLElement[
         "link", {
          "url" -> "http://mathworld.wolfram.com/Big-ONotation.html", "text" -> 
           "Big\[Hyphen]O notation"}, {}]}]}]}], Typeset`pod12$$, 
   Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
   Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
   Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
   Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
   Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
   Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, Typeset`pod36$$, 
   Typeset`aux1$$ = {True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`aux3$$ = {
   True, False, {False}, True}, Typeset`aux4$$ = {
   True, False, {False, False}, True}, Typeset`aux5$$ = {
   True, False, {False}, True}, Typeset`aux6$$ = {True, False, {False}, True},
    Typeset`aux7$$ = {True, False, {False}, True}, Typeset`aux8$$ = {
   True, False, {False}, True}, Typeset`aux9$$ = {True, False, {False}, True},
    Typeset`aux10$$ = {True, False, {False}, True}, Typeset`aux11$$ = {
   True, False, {False}, True}, Typeset`aux12$$ = {
   True, False, {False}, True}, Typeset`aux13$$ = {
   True, False, {False}, True}, Typeset`aux14$$ = {
   True, False, {False}, True}, Typeset`aux15$$ = {
   True, False, {False}, True}, Typeset`aux16$$ = {
   True, False, {False}, True}, Typeset`aux17$$ = {
   True, False, {False}, True}, Typeset`aux18$$ = {
   True, False, {False}, True}, Typeset`aux19$$ = {
   True, False, {False}, True}, Typeset`aux20$$ = {
   True, False, {False}, True}, Typeset`aux21$$ = {
   True, False, {False}, True}, Typeset`aux22$$ = {
   True, False, {False}, True}, Typeset`aux23$$ = {
   True, False, {False}, True}, Typeset`aux24$$ = {
   True, False, {False}, True}, Typeset`aux25$$ = {
   True, False, {False}, True}, Typeset`aux26$$ = {
   True, False, {False}, True}, Typeset`aux27$$ = {
   True, False, {False}, True}, Typeset`aux28$$ = {
   True, False, {False}, True}, Typeset`aux29$$ = {
   True, False, {False}, True}, Typeset`aux30$$ = {
   True, False, {False}, True}, Typeset`aux31$$ = {
   True, False, {False}, True}, Typeset`aux32$$ = {
   True, False, {False}, True}, Typeset`aux33$$ = {
   True, False, {False}, True}, Typeset`aux34$$ = {
   True, False, {False}, True}, Typeset`aux35$$ = {
   True, False, {False}, True}, Typeset`aux36$$ = {
   True, False, {False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = 
   FrontEnd`SuppressEvaluationHash[True], 
   Typeset`queryinfo$$ = {{
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "6", "datatypes" -> "", "timedout" -> 
     "Integral,Series,Plot,Plotter,Simplification,Sequence,Sum", 
     "timedoutpods" -> "", "timing" -> "3.541", "parsetiming" -> "0.228", 
     "parsetimedout" -> "false", "recalculate" -> 
     "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa57021cfa7aa5i98ge859000027hc4627d792b13d6249686130609588165", "id" -> 
     "MSP57031cfa7aa5i98ge85900002fefg60691fd2a7g", "host" -> 
     "https://www6b3.wolframalpha.com", "server" -> "7", "related" -> 
     "https://www6b3.wolframalpha.com/api/v1/relatedQueries.jsp?id=\
MSPa57041cfa7aa5i98ge85900003e2f0288630173g16249686130609588165", "version" -> 
     "2.6", "inputstring" -> "integrate 1/(1-x^3)"}, {
    "success" -> "true", "error" -> 
     "false", {"http://www.w3.org/XML/1998/namespace", "space"} -> "preserve",
      "numpods" -> "5", "datatypes" -> "", "timedout" -> 
     "Integral,Series,Plot,Plotter,Simplification,Sequence,Sum", 
     "timedoutpods" -> "", "timing" -> "5.5440000000000005", "parsetimedout" -> 
     "false", "recalculate" -> "", "id" -> "", "parseidserver" -> "15", 
     "host" -> "https://www6b3.wolframalpha.com", "server" -> "15", "related" -> 
     "", "version" -> "2.6", "inputstring" -> "integrate 1/(1-x^3)"}}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> 8., 
    "Date" -> {2024, 6, 1, 15, 40, 42.4748092`9.380706311266083}, "Line" -> 7,
     "SessionID" -> 25734234230995472093}, Typeset`showpods$$ = {1, 2, 3, 4, 
   5, 6, 7, 8, 9, 10, 11}, Typeset`failedpods$$ = {12, 13, 14, 15, 16, 17, 18,
    19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36}, 
   Typeset`chosen$$ = {}, Typeset`open$$ = False, Typeset`newq$$ = 
   "integrate 1/(1-x^3)"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
         Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
         Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
         Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
         Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
         Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
         Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
         Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
         Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, 
         Typeset`pod36$$}, {
        Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
         Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
         Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
         Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
         Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
         Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
         Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
         Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
         Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{1084.4, {1191.2899414062501`, 1197.1100585937497`}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     And[
      Not[Typeset`initdone$$ === True], 
      Not[Typeset`initdone$$ === FrontEnd`SuppressEvaluationHash[True]]], 
     Null; AlphaIntegration`DoAsyncInitialization[
       Hold[{
        2, {Typeset`pod1$$, Typeset`pod2$$, Typeset`pod3$$, Typeset`pod4$$, 
          Typeset`pod5$$, Typeset`pod6$$, Typeset`pod7$$, Typeset`pod8$$, 
          Typeset`pod9$$, Typeset`pod10$$, Typeset`pod11$$, Typeset`pod12$$, 
          Typeset`pod13$$, Typeset`pod14$$, Typeset`pod15$$, Typeset`pod16$$, 
          Typeset`pod17$$, Typeset`pod18$$, Typeset`pod19$$, Typeset`pod20$$, 
          Typeset`pod21$$, Typeset`pod22$$, Typeset`pod23$$, Typeset`pod24$$, 
          Typeset`pod25$$, Typeset`pod26$$, Typeset`pod27$$, Typeset`pod28$$, 
          Typeset`pod29$$, Typeset`pod30$$, Typeset`pod31$$, Typeset`pod32$$, 
          Typeset`pod33$$, Typeset`pod34$$, Typeset`pod35$$, 
          Typeset`pod36$$}, {
         Typeset`aux1$$, Typeset`aux2$$, Typeset`aux3$$, Typeset`aux4$$, 
          Typeset`aux5$$, Typeset`aux6$$, Typeset`aux7$$, Typeset`aux8$$, 
          Typeset`aux9$$, Typeset`aux10$$, Typeset`aux11$$, Typeset`aux12$$, 
          Typeset`aux13$$, Typeset`aux14$$, Typeset`aux15$$, Typeset`aux16$$, 
          Typeset`aux17$$, Typeset`aux18$$, Typeset`aux19$$, Typeset`aux20$$, 
          Typeset`aux21$$, Typeset`aux22$$, Typeset`aux23$$, Typeset`aux24$$, 
          Typeset`aux25$$, Typeset`aux26$$, Typeset`aux27$$, Typeset`aux28$$, 
          Typeset`aux29$$, Typeset`aux30$$, Typeset`aux31$$, Typeset`aux32$$, 
          Typeset`aux33$$, Typeset`aux34$$, Typeset`aux35$$, Typeset`aux36$$},
          Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
         Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
         Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
         Typeset`newq$$, 
         "https://www6b3.wolframalpha.com/api/v1/recalc.jsp?id=\
MSPa57021cfa7aa5i98ge859000027hc4627d792b13d6249686130609588165", 
         Typeset`asyncpods$$}]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = FrontEnd`SuppressEvaluationHash[True]],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "Print", "WolframAlphaFullOutput",
 CellChangeTimes->{
  3.9262164425761833`*^9},ExpressionUUID->"ea4b658a-d932-5947-9ec6-\
885bf0ba4494"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 DynamicModuleBox[{Typeset`querydata$$ = <|
  "query" -> "", "assumptions" -> {}, "parse" -> Defer[
     Plot[1/(1 - $CellContext`x^3), {$CellContext`x, -0.95, 1.1}]], 
   "inputpredictions" -> {{"InputMathOperation$AlternativePlot", 
      Predictions`Prediction[
      0.99, "\:7ed8\:5236", "", {{"\:5bf9\:6570\:56fe", HoldComplete[
          LogPlot[
          1/(1 - $CellContext`x^3), {$CellContext`x, -0.95, 1.1}]]& }, {
        "\:5bf9\:6570\:5bf9\:6570\:56fe", HoldComplete[
          LogLogPlot[
          1/(1 - $CellContext`x^3), {$CellContext`x, -0.95, 1.1}]]& }, {
        "\:5bf9\:6570\:7ebf\:6027\:56fe", HoldComplete[
          LogLinearPlot[
          1/(1 - $CellContext`x^3), {$CellContext`x, -0.95, 1.1}]]& }, {
        "\:6781\:5750\:6807\:56fe", HoldComplete[
          PolarPlot[
          1/(1 - $CellContext`x^3), {$CellContext`x, -0.95, 1.1}]]& }}], 
      Predictions`InInput}, {"InputMathOperation$Zeros", 
      Predictions`Prediction[
      0.98, "\:5206\:6790", "\:5b9e\:6570\:96f6", 
       Predictions`Private`ReleaseHolds[
        HoldComplete[
         Solve[1/(1 - $CellContext`x^3) == 0, {
           Hold[$CellContext`x]}, Reals]]]& ], Predictions`InInput}, {
     "InputMathOperation$InflectionPoints", 
      Predictions`Prediction[
      0.96, "\:5206\:6790", "\:62d0\:70b9", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["InflectionPoints"][1/(1 - $CellContext`x^3), 
          Hold[$CellContext`x]]]]& ], Predictions`InInput}, {
     "InputMathOperation$Asymptotes", 
      Predictions`Prediction[
      0.95, "\:5206\:6790", "\:6e10\:8fd1\:7ebf", 
       Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["Asymptotes"][1/(1 - $CellContext`x^3), 
          Hold[$CellContext`x], $CellContext`y]]]& ], Predictions`InInput}, {
     "InputMathOperation$Discontinuities", 
      Predictions`Prediction[
      0.94, "\:5206\:6790", "\:65ad\:70b9", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["FunctionDiscontinuities"][1/(1 - $CellContext`x^3), 
          Hold[$CellContext`x]]]]& ], Predictions`InInput}, {
     "InputMathOperation$FunctionDomainAndRange", 
      Predictions`Prediction[
      0.9299999999999999, "\:5c5e\:6027", 
       "", {{"\:51fd\:6570\:7684\:5b9a\:4e49\:57df", HoldComplete[
          FunctionDomain[1/(1 - $CellContext`x^3), {$CellContext`x}]]& }, {
        "\:51fd\:6570\:7684\:503c\:57df", HoldComplete[
          FunctionRange[
          1/(1 - $CellContext`x^3), {$CellContext`x}, {$CellContext`y}]]& }}],
       Predictions`InInput}, {"InputMathOperation$PlotIntercepts", 
      Predictions`Prediction[
      0.5, "\:5206\:6790", "\:622a\:8ddd", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["Intercepts"][1/(1 - $CellContext`x^3), {
           Hold[$CellContext`x], $CellContext`y}]]]& ], 
      Predictions`InInput}, {"InputMathOperation$StationaryPoints", 
      Predictions`Prediction[
      0.5, "\:5206\:6790", "\:9a7b\:70b9", Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["StationaryPoints"][1/(1 - $CellContext`x^3), 
          Hold[$CellContext`x]]]]& ], Predictions`InInput}, {
     "InputMathOperation$CriticalPoints", 
      Predictions`Prediction[
      0.5, "\:5206\:6790", "\:4e34\:754c\:70b9", 
       Predictions`Private`ReleaseHolds[
        HoldComplete[
         ResourceFunction["CriticalPoints"][1/(1 - $CellContext`x^3), 
          Hold[$CellContext`x]]]]& ], Predictions`InInput}, {
     "InputMathOperation$InvertFunction", 
      Predictions`Prediction[
      0.5, "\:6c42\:89e3", "\:9006\:51fd\:6570", HoldComplete[
        Reduce[$CellContext`y == 
         1/(1 - $CellContext`x^3), $CellContext`x]]& ], 
      Predictions`InInput}, {"InputMathOperation$ExtractFunction", 
      Predictions`Prediction[
      0.5, "\:7ed3\:6784\:5316\:64cd\:4f5c", "\:63d0\:53d6\:51fd\:6570", 
       Apply[HoldComplete, 
        Hold[1/(1 - $CellContext`x^3)]]& ], Predictions`InInput}, {
     "InputMathOperation$FunctionParity", 
      Predictions`Prediction[
      0.5, "\:5c5e\:6027", 
       "", {{"\:51fd\:6570\:7684\:5947\:5076\:6027", HoldComplete[
          ResourceFunction["FunctionParity"][
          1/(1 - $CellContext`x^3), $CellContext`x]]& }, {
        "\:5076\:51fd\:6570\:ff1f", HoldComplete[
          ResourceFunction["EvenFunctionQ"][
          1/(1 - $CellContext`x^3), $CellContext`x]]& }, {
        "\:5947\:51fd \:6570\:ff1f", HoldComplete[
          ResourceFunction["OddFunctionQ"][
          1/(1 - $CellContext`x^3), $CellContext`x]]& }}], 
      Predictions`InInput}, {"InputMathOperation$IntegrateOverPlotRange", 
      Predictions`Prediction[
      0.5, "\:79ef\:5206", "\:5728\:7ed8\:5236\:8303\:56f4\:4e0a\:79ef\:5206",
        HoldComplete[
        Integrate[1/(1 - $CellContext`x^3), {$CellContext`x, -0.95, 1.1}]]& ],
       Predictions`InInput}, {"InputMathOperation$IntegralToInfinity", 
      Predictions`Prediction[
      0.5, "\:79ef\:5206", 
       "", {{"\:4ece 0 \:5230 \[Infinity] \:79ef\:5206", HoldComplete[
          Integrate[1/(1 - $CellContext`x^3), {$CellContext`x, 0, 
            DirectedInfinity[1]}]]& }, {
        "\:4ece -\[Infinity] \:5230 0 \:79ef\:5206", HoldComplete[
          Integrate[1/(1 - $CellContext`x^3), {$CellContext`x, 
            DirectedInfinity[-1], 0}]]& }}], Predictions`InInput}, {
     "InputMathOperation$Derivatives", 
      Predictions`Prediction[0.5, "\:5bfc\:6570", 
       Row[{"\:5173\:4e8e ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline], " \:7684\:5bfc\:6570"}], HoldComplete[
        D[1/(1 - $CellContext`x^3), $CellContext`x]]& ], 
      Predictions`InInput}, {"InputMathOperation$IndefiniteIntegrals", 
      Predictions`Prediction[0.5, "\:79ef\:5206", 
       Row[{"\:5173\:4e8e ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline], " \:7684\:4e0d\:5b9a\:79ef\:5206"}], 
       HoldComplete[
        Integrate[1/(1 - $CellContext`x^3), $CellContext`x]]& ], 
      Predictions`InInput}, {"InputMathOperation$Series", 
      Predictions`Prediction[0.5, "\:5c42", 
       Row[{"\:5728 ", 
         Pane[
          Style[
           HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline], " = ", 
         Pane[
          Style[
           HoldForm[0], LineBreakWithin -> False], ImageSize -> {150}, 
          BaselinePosition -> Baseline], 
         " \:5904\:7684\:7ea7\:6570\:5c55\:5f00"}], HoldComplete[
        Series[1/(1 - $CellContext`x^3), {$CellContext`x, 0, 5}]]& ], 
      Predictions`InInput}, {"InputMathOperation$Limits", 
      Predictions`Prediction[0.5, "\:6781\:9650", "", {{
         Row[{"\:5f53 ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[0], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " \:65f6\:7684\:6781\:9650"}], 
         HoldComplete[
          Limit[1/(1 - $CellContext`x^3), $CellContext`x -> 0]]& }, {
         Row[{"\:5f53 ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[
              DirectedInfinity[-1]], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline], 
           " \:65f6\:7684\:6781\:9650"}], HoldComplete[
          Limit[
          1/(1 - $CellContext`x^3), $CellContext`x -> 
           DirectedInfinity[-1]]]& }, {
         Row[{"\:5f53 ", 
           Pane[
            Style[
             HoldForm["x"], LineBreakWithin -> False], ImageSize -> {150}, 
            BaselinePosition -> Baseline], " = ", 
           Pane[
            Style[
             HoldForm[
              DirectedInfinity[1]], LineBreakWithin -> False], 
            ImageSize -> {150}, BaselinePosition -> Baseline], 
           " \:65f6\:7684\:6781\:9650"}], HoldComplete[
          Limit[
          1/(1 - $CellContext`x^3), $CellContext`x -> 
           DirectedInfinity[1]]]& }}], Predictions`InInput}}, 
   "otherpredictions" -> {"FullResults"}, "allassumptions" -> {}, 
   "summarizeassumptions" -> FrontEnd`SuppressEvaluationHash[True], 
   "summarizepredictions" -> FrontEnd`SuppressEvaluationHash[False]|>, 
  Typeset`update$$ = FrontEnd`SuppressEvaluationHash[2]}, 
  DynamicBox[ToBoxes[
    AlphaIntegration`NaturalLanguageInputBoxes[
    1, Typeset`querydata$$, Typeset`update$$], StandardForm],
   ImageSizeCache->{1033.9, {48.1, 22.6}},
   TrackedSymbols:>{}],
  BaseStyle->{Deployed -> True},
  DynamicModuleValues:>{}]], "DeployedNLInput",
 PrivateCellOptions->{
 "CellSettings"-><|"HideDetails" -> FrontEnd`SuppressEvaluationHash[False]|>},
 CellLabel->"In[8]:=",ExpressionUUID->"6a8a63bd-89ce-ef43-a4e9-ede550ad94eb"],

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"1", "/", 
    RowBox[{"(", 
     RowBox[{"1", " ", "-", " ", 
      RowBox[{"x", "^", "3"}]}], ")"}]}], ",", " ", 
   RowBox[{"{", 
    RowBox[{"x", ",", " ", 
     RowBox[{"-", "0.95"}], ",", " ", "1.1"}], "}"}]}], 
  "]"}]], "DeployedWLInput",
 PrivateCellOptions->{"CellSettings"->{"UsageTags" -> {{"Plot", 1}}}},
 CellChangeTimes->{3.9262166635925865`*^9},
 CellLabel->"In[8]:=",ExpressionUUID->"3b51c839-c978-4347-a2ee-f31cbb0c07bd"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.926223202184168*^9, 
  3.9262232021891346`*^9}},ExpressionUUID->"2b0a09b6-d6b9-2046-a366-\
d8484f6d5829"],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{{3.9262158321070538`*^9, 3.9262158321166916`*^9}, {
   3.9262159836296043`*^9, 3.9262159861687927`*^9}, 3.9262168109015026`*^9, 
   3.926223201234621*^9},ExpressionUUID->"5ff8719c-62de-7c46-a88f-\
8adf10f3cc1a"],

Cell[BoxData["\[IndentingNewLine]"], "Input",
 CellChangeTimes->{{3.9262168427956963`*^9, 3.9262168564936066`*^9}, {
  3.9262231986664276`*^9, 
  3.926223200194309*^9}},ExpressionUUID->"c5f60fb6-ba25-ef41-b642-\
2249380e67a8"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9262231969170094`*^9, 
  3.926223197643839*^9}},ExpressionUUID->"71e8f488-0465-aa46-b104-\
37e4e6504b19"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9262231954635735`*^9, 
  3.9262231954649525`*^9}},ExpressionUUID->"f9031928-8894-df41-85e7-\
565204efc6d8"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.926215828639223*^9, 3.926215830313591*^9}},
 NumberMarks->False,ExpressionUUID->"727b059b-c159-1c49-a88a-ffdf4e45089b"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.92621693680229*^9, 3.9262170001432667`*^9}, 
   3.9262231942255363`*^9},ExpressionUUID->"5bdfe611-59ee-9842-a0ef-\
cf1958e33f72"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.926223192002825*^9, 
  3.926223192014244*^9}},ExpressionUUID->"1649b736-fd33-0543-96be-\
c6e4963bc2c6"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.926217016345339*^9, 3.9262170698622036`*^9}, {
  3.926223188760433*^9, 
  3.9262231909566593`*^9}},ExpressionUUID->"fe7757d2-7fe3-9b48-9f78-\
8611f65148f7"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9262231866376743`*^9, 
  3.9262231866427574`*^9}},ExpressionUUID->"6513d098-8732-b946-96c0-\
a76365722a4e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    FractionBox["5", 
     RowBox[{"4", "\[Times]", "\[Beta]"}]], "\[Times]", 
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{"3", "\[Times]", 
       FractionBox[
        RowBox[{"Abs", "[", "x", "]"}], "\[Beta]"]}]}], ")"}], "\[Times]", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "-", 
       FractionBox[
        RowBox[{"Abs", "[", "x", "]"}], "\[Beta]"]}], ")"}], "3"]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "\[Beta]"}], ",", 
     RowBox[{"+", "\[Beta]"}]}], "}"}], ",", 
   RowBox[{"Assumptions", "->", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"Im", "[", "\[Beta]", "]"}], "==", "0"}], ",", 
      RowBox[{"\[Beta]", ">", "0"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.926217135513502*^9, 3.926217366058529*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"9ac016e6-2e4d-434e-bf0e-75623dfdd417"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{{3.9262173385085087`*^9, 3.9262173687604218`*^9}},
 CellLabel->"Out[17]=",ExpressionUUID->"86cc9b17-8b06-e848-ab53-71463ab97896"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     FractionBox[
      RowBox[{"Sin", "[", 
       FractionBox["x", "0.1"], "]"}], 
      RowBox[{"\[Pi]", "\[Times]", "x"}]], ",", 
     FractionBox[
      RowBox[{"Sin", "[", 
       FractionBox["x", "0.5"], "]"}], 
      RowBox[{"\[Pi]", "\[Times]", "x"}]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", 
   RowBox[{"AxesLabel", "->", 
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}]}], ",", 
   RowBox[{"PlotStyle", "->", 
    RowBox[{"{", 
     RowBox[{"Red", ",", "Green"}], "}"}]}], ",", 
   RowBox[{"PlotRange", "->", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "6"}], ",", "6"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1"}], ",", "4"}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.926217396988491*^9, 3.9262173981524696`*^9}, {
  3.926217446986084*^9, 3.926217651202112*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"8e84e48c-111d-9440-b59f-6aaed445e964"],

Cell[BoxData[
 GraphicsBox[
  InterpretationBox[{
    TagBox[{{{}, {}, 
       TagBox[
        {RGBColor[1, 0, 0], AbsoluteThickness[2], Opacity[1.], 
         LineBox[CompressedData["
1:eJwVV3c8198Xtvf8fKikZIcyEiJyFWkYiVBCJRT6IkUySkKShEoIWdl773Pt
mU02WVnJ3vHz++v9el7n3HvP89zzPudcHhMbbTMyEhKSHnISkv9/XX9rLO3t
ETGbGGLLORwAk84HVvt3iPjTzoFke9qPoMkyvJ6/ScRGSa8SFVY+Abec7T+b
ZSLOiLwivlscDBU+gTQjk0SsRn7wEiaPhBPHbtOXjBHxYY6tjqbxSPiUzccU
PELEE2/y3JkqosBsIIeo1be/f02E1k3bGKAR+8mFfxCx5U0+SvWgOHhc8Y0n
rIGIexU77l/QiYc+vYf8jrVETMIbdKibLgGSX24KS5QT8YVIK7FjFonAxlZx
kqGMiHHxWIwLcxK4JPiITxURcdK6WFptehJotnFKR+YQccC36EHPwWTINxs/
45JJxAKbWbdSLFOAeyvl7M00IhbvLT9xfDEFvP3sz0kl78d3c6a9wzYVFnkV
lVgSiLjWW9s8YDoVDPKplOdiiThcJShc6XYaVKi1XKyLIuK7ya09ldVp8Onp
XTW3r0R89WOATo9HOvyjEdY0DCbib9TfR2R608E8fFFL9jMRM4TQMpIRM6D5
VJEOWyAR37L75PNZOgPO1LjrLfgRsad1+W31GxkQaaB2q+kdEbuNHhk6apMB
NH+JhgneRPzY75ohmVcGPH49YOzhua/vuArLcnAG9B38fu+uOxHr+x0SmInP
AOWU/0wVXhIxb2RDwWhWBqQoyTw45ELEpxiKBnsKM4Cta9dixZGImQbGv9aX
ZICrRe2jVnsi3vr5ZzGrOAMm/32wSbEj4veXf3d9zMsAzcCbdt42RHz8w6j0
o9QMyBfksTd9RMSKd1U2FCIzgLt4+pmSBRG3PRvcpv6QAW+vZTkdMSfiO+m1
B1ufZ8DSmJPrhgkRP7Gk5gy5mwEGjspunXeI+JrRYuMD5QyoZGB4nWFIxANw
4/d53gw4GdXp6XuLiK0PdSoabqXDJ+lw74d6REy5yCD9MGFf33qzdyo6+/YW
obECzX19jcX8uLWImF8u2vDenzRoXlrz31En4kbmyEAHjzQ48wY+9lwh4hNS
3teY2dKAJkMrxF+ZiOeRdIL40VR4rMIR9kiJiDP/jk39CUqBvp5fEZfP7cdL
MJgPo02BZNInsSRniFgi/8NPjb4kkNVJogo5va+H2nOOVJEkqIn99fCUxH7+
5Akwmz1JhJFLWqImwkT8LEOh4/t8PBzwE82r5CTi6PasBq3AWIgdNj1keIiI
+7d+x6slx8CpU2FOK2xEbPh1RsCkLBrUO+mQANP+/9VObfm7IxLcD0/VepEQ
8Xk10qtxb0KA5dExkWP/CFhPY8lbwfILhJfq+eZvErC7rfKu9cXPUHC3Wmtq
iYDVrh8WZZzyhz9x0b1XJgh47p205tPSl3DztNEsQwMBiz/2/ab00wNNenzS
+F5DwJcnpMs/P3yLnnQ3pp+rJGAni9/y91beI7/nZ59alxAwA5NVzUHnj6gS
Dv5rSSPgzQf0TDYoDGmxXrvzMJmApYJvptHdjUBDJl7lJAkE3BGo7GqhEIk2
KFc9T0URsHWwmqXS5Wgkpt7O9PEjARNobW23+eJQSTjt4xP+BMwlFnuqjiEe
Xfmr1FHpS8DaJ3Ru3f8bj0wD07+seBIw5Rk92n+RiWhpbHLT152AdSe/M7rY
JKGX0lyGAi8JuPpH7ucGmWQU2uPLredIwDRuzExzaSlISKTKff4pAWfgJMpr
d1JRrvP2uNdjAuZfr8uIok5DF35IXjpmTcCcUdb2mfFpqJXLMjHfkoCrjsKO
BkpHRrZR9FoPCPhYtuP5K83paKa857+p+wTcLP27WV4kA1GaXZLkMCLg6Ya1
4InoDNRufEp/9hYBbwQw3vrTmYEibnK6lOoRsKnalaAhskxkqU0Z9UGHgHMt
E/1TTmYiGfW/1fe0CPi7d723mnYmIlPtnTmtQcAmn7kqM55komZUyUx1lYCT
FVd92v0zUahcqlSPKgHzFElIJyRmIvPTX24lKRMwr3g9r0hZJpIUffXCRYmA
p5hoK683Z6JdQasYzXP7/nnenzn6MlEDt24d91kC7qz+fcL1Vyb6chj9WZIh
YI105RPPxzORKZswofo0AceRWGnQj2UiCSbimS8SBJzH9OOe5GAm2qH+d9tC
lIBtkgQ059szUR3pbzd5EQKu+zbOpFSViT5tt35nPE7Acj+08oUzM9Hd1aKG
YT4Cts82f5wWkolO/o39m8lNwC3/2bm2u2aizSk/No+jBBzKZnbqq1Emqhl1
lNM7TMC+XyfWmeQyUeCAibHQQQLe0zx6TZolExl3q7/eIhJwEb9S7YGxDCTS
KpPQxELAmLeNpDQzA63Vc/+IYCTgR1IxSZIuGaiikm7Jlo6AS1qDXr6+kIFu
5w/Js1MQsM9/H7y6PNORUGbd3d8kBPz+M1+w/FYaWknK8iz8x4o3KrxvN5in
Id8IrxajdVas+ypZbUYoFd0Mtl0RX2HFHGUdz6pepCD+QAMOskVWfGWcSuXW
j2RU6il2P26GFVOf8rt0SzcJzT/qXpsfZMUnXzkOxLDHoyJzzFnex4pfSFEk
ysjEIa+7SUoff7LiN7mvp/5pfUfHbrzwOdPGirWbvA5SOsQgLXlBLrcqVvx4
zr7/Dc03dESaRVm7nBV/US6Sd9oMQ1NiWw/4y1jxXwPeW96joegVb3NmXT4r
JgujvLAbEYSyaB0usiaz4ogfiyrN394hYk/1o+gAVjx0xmoMdTwGfCLK28OP
Fbcksmno9TnBo5cusebvWLHDhQFFnr+voEbw9ICIJyuufGvWRznjA072kWrZ
jqyYarns7bRmEByvd37w2Z4Vzz+/UPXIORg6j+i/fmbHimOdFd1+R4eCWBVj
sfwjVuxyPM85ayQCRgnOIlV3WPG7oZNNeR4x8MFcTzXOkBUflIgaLnoZCwpF
p0y8b7HiprcXGuQdvkPQvakQdR1WLGXGvlJ1Ix6UcytzxbRYsZ9L1IWbCgmw
QPOtjUVjX38715gXXIlwNUOXtkuVFXMevhsa35YE6+SnBPKVWXHx6YVfitHJ
EKvPcD5EiRXbvz5VGPgoBXZ3KxyNzrLiS3WJMQl/UiFZO+ITOsOKG5RJ0+li
0+Bm3PMMHilW3DxD1LbQSYcsDYmpCVFWHNXYXSOjmQF3ougp6kRYsdi0+8Jw
aAYwrE4eSzrOinuytU7kjGVA4eUKeV9+Vmywvt4cKZQJ5mHh+tY8+/yLjnB8
ssgE4oLjEy0uVvzfbtcp17hMwMo3PkhysmLjol1x9eFM+O+LeDLbIVZssnvt
6BIxCw7P0tWuse3rL668dVclC2oVJ0d7WFmxoWFx+TvbLHgaWL5bxLSfXxVP
H5kHZwHPZNjhcHpW/NpPbmWiOAua5RxlXtLs82Pt1yPpzwLn9zra9yhZ8XrI
fHDKahYI/RKzViZjxYKSGnWj9NnQJUXnI7DHggcidXe/Hs0Gd++J79Q7LNiG
fOFeu0g2iA/g8ukNFlzgoC386nQ2DIiHDTausmB3Na+vsWey4e3rZ5upSyw4
UieV9ew+lvmpze7/lwX/GqPaQJLZMCYidspujgXnSOc05wplg/8LWo0b0/v2
UXmRsMPZcK59/KHMJAt+qNKUvUKdDTMC2OPQGAvWfa8gXLGQBV+ef43cGmbB
jm+bDGm6skDlh0PJwAALZlmPlmrKyYJFbu2esl4WnOFOl0T0z4KIp6Irkd0s
eMLpv7oJ8yxQq6Nhed3Bgm/eY0m5KpcFG5zjJ8xaWfCY3zs3Neos0K4MvS/c
wILxCP/c1aBM4O8cH6qtYcHrExfV+q5nwtq4mIF5JQtm3oz5+YwmE0KoKrVi
Svb5F/qWCz3IAMuDjE3nC1lw2aCejBlzBigI6V8ayWXBTG8Im+Tm6TByZfbc
0XQW/JmqodqpNxWyDKQLi5NZsHX/vPExqlR4bfVSyiCBBZ/83XtKRyQFBN8T
T3yJYsGyf07aaBskwX+t8odYP7HgwWpj+6A7caD4y/Njuj8LbppptfW59h1Y
llqYNN+z4J7qL8WccrGQQzSlfOe1r9/Ta1dVtqJgS893ieI5C24OevMpyikU
vAcHmjaMWLDO199Ca68cwWBe8PIXAxYsdPz8SR3aR3Byz7ZSWp8Fvzj/c3Zg
Qw1auCmL7LRYMEj/ESOEPEYHTEXj5y6w4OvGt0tzu96jqafPeN8hFrw8Nr4s
4BWACj3Lw4UVWHD1MOFI9NFPyDBe95O5NAtua6P8p6wYgmJmXF+NHGfBox7M
tZQhUejpdu3OC34W7L84ZGP4IxqpMhAcj/Ls50fiS66VnRg0IxpnbXCYBYcM
/uF7rx6HJB433+5k2NdXkDpIKTYJkbkf+mlHu59fW30BdonJqDPQRJuVigXv
zfVw3opPQfMP/wSE7TJj/xEhxOWbhpz/nnvkP8aMsctTvLWRgcLunZlSGmTG
DFcXLc7cyEQlHRKmi93MeL2HS+peciYavCgyEtXKjL/GNt+4t7vfb/P5DLUb
mPFLE/1tHo0sdEzkaA9ZFTM2+aWk5/clCymFHbiRXcqMX93LCQ4czELubrTq
bJnM2Kt/u/uQYTaKWSKrq0pixkwxw66On7JRlemOsn0sMy4y+GJ1oi4bTXSv
gkAEM37M7XWabz0bUV35K9/9hRkn9Qi81ebJQceLp/K9Avb9s7KUU1Vz0GXR
0dNn3jHje28C7gk9yEEW3/rTf3swYx1+W/oi9xzkw9p1IvgFMx6N4/pyKyQH
Jb9ujr/syIxZDvP47CXloKbVWr7Nx8w4IWzj6/f8HPTnQfm3RCtmzGrGV6AK
OYipr4jTwIwZ36Dr2Bsqz0Hi6jlf6O4wY4V3Nxut9u1aZanE4pvMeCn8YvLs
/vrHEvEfrLSZcc74BQvj5BwUGB1Jf0SdGS/mhtJU75+fzRb6pukiMzaVdazh
eZ2DOr0+krsiZuz9vY/DcT/+1Q3fl6JyzLj7i0J20z6/A1Ze24OSzFj89l9n
gX3+ZwZfPvM7yYzzroh8fruWjW5ee76sKMiMv2k165HWZqPn5XY2f48x4/KG
QY2gwGwUevrR7DcOZsy/lHBW51Y2Kv5u9kCLyIwF5dOZVDiz0cDBO2MkjMz4
0z/pGfueLMS1c73/Hgkzjk6SJfxUyULIWk2fsMWEmWsNbQRX9uedEZWOimUm
vJ7oMr8WkYmiq8408v1mwrac/gMPfmegSplTlzpHmDCJeYvGKc8MNJ4gUunR
x4QPOwUN/ODKQILvjxZP/GDC00cukJa8S0OJuuTJ8TlM+F1dw4ZKUxJqqN0R
vJnGhBtO/x3waUhEM3Jr0TQJTLgo41QMd0UCOsk1HWrxlQmPWGCz0xFxKGOy
2eeEOxMWN/cJZGONRgXPQi3TrzHhC8+pW/MV/RGv6ePvPZeZcHiHwDL0+aD3
WpdHSC8wYbcrWnQ9op7IRHhN94YUE/aVdHL69OwJou+/fn7zEBM23fz97F2+
Exgr0h5SHmXE1c3/1Zx/Gg51IiPaj/oZMffF1sjCw5EgeTD//edORpyXpyth
8CwKqBdMyadqGLFd85s8Lr5YyIjC877JjJjR0bhqRi4RDvt9Ec6LZcSB/9g/
LdokgaeTtelwOCNmbfTb2IxIBgOdI32n/Bmxwo3d7KTJVCCndKzufsqIpcaf
0UXQZoL1oiYJiTUj1nm1hzdfZ0LPoIC88ANGXFEzqPl+MxNS8joynG8xYk3r
Kanm/X5xICZpNlabEa/Qa7LKKmTDqw+vBJvVGPHczMIv7fBs0HsoHsatyIib
UQUf/7UcwDeofl45w4jNxpoKo7/lgMj5QdYnEoyY/tvBbyYzOfBJNEc9TJgR
P5852aImngt7HO/eVPMyYuMBjvFL1rlgSWVSMc/JiN9/8Tt6IT4XOpdk/x1k
Z8TDaj4PjvflguIws+x5Jkb8K8P/7iRVHiQ0TtpZUjNiIdIHd2xE84BQUJr6
kYQRb4TpOeZo5IFr7Kepkk0GnBCx/CrxQR5M+VvxTS4x4JlGMw4V5zzQdr1g
zDzHgMvsJOOcvfOgxIIjRHaCAW+NeRpd+ZAHgnoLHfeGGLDwvW2VhH3sf6GW
6d1PBmz6bFTq89s82BaLuJLTyoDfTpD0MbnmgTmnvcdgPQMe02rNY7fMg1Zq
daCqZMD6Emf4U7Ty4OwK75Z4CQMedS653i2RB7Ejm1K3chnwbrv0xVC6PGD6
0WrjnsaAJ5b+9u4N5sLzwvik5HgGPOd0HViSc2H8+4uJzkgG/IBvw6HncS5o
Bupy74Yw4KeZWtqmkrngJMl85dJHBlyRLxlwYD4H4trrHvv7MmDBrTjRiZgc
aLdzD+31ZMB+quZ1v3RyYJegUMn7kgGv3Hkec2w3G0SyV2etHBlw0IPc8Ozo
/fvVSWfLfcyA1WSqRXPOZ0PqR17zS6YM+ALtDWxokwU9pwf8/I0YcOx1h6dy
u5lA0fk5v1ePAT87k8M29yYTDNloaR9dYcDPqR/0qfvuz3+f/yb7izFgEc2N
G6gwBWSlEzt7jzPg1YPHSr3fJYNpl8k/Xh4GvFPy+FyKbhKUsHdr5hIZcG0L
I019ezxYBZUs9m7Q46yfBtcbnkdDw5e3Z/gq6XGM+YGLG5LvYO2M8t1HJfQ4
0f6/rcgjnsDbs+Odm0uPr9b2qDBsu4LTIdu+Swn0+L11m+4XI10QDtFzffSe
HtPSVpGKHvRC3qF8lbn69NjMN9VbMz4K5ZwdnN3Vosf2DalPVI7GoJG+ILbL
V+lxSkdHW5pfLJLlpDPvU6DHg/EfRi6YxKOprws0ezz0mE7XRMmoPAWxKSSd
usxJj59WvxGa2H9PKw3cNwhgo8dyTjoN9arpKPjIz2Q+ano8kfkpl6s7A10K
L9W8PEeHbxakrwlRZaOF9wM7FJN0OObS05Qk1/16/GI7qXyYDueoCHgWLGSj
uTty1PIddNiHke4SeX0OCtK6mbveRIdd7uzw0ojlInT+2f2cGjr8bC2VXdgv
FwXy5oJoER1+fyxf5TbKQwrEzv9msunwV85u83P+eWiCfJkzPpUOHzsc8Gyw
Pw/5rbA23I+nw8v67FOCvPlIdkLCkTuKDstKSJpT3c9Ho13XBAdD6bDM9Jtf
FhH56F2NdWfIJzosYvTIX6kzH0nlv3fX86PDFZIeK04UBWgoPkWC6E2Hiy2Z
h+nEC5B3cONQyys6nHZ46umYTgE69XbG19eZDn9SkJTctCtAfc9p5a/Y0+G9
D8V/zvsWIA9LoWlKGzr8LYRuIOdbARK7felLxUM6rD/KGXg1tQD9VDO/+NKE
DvcnNFH/yylAbgqey/KGdLhOfSmkNq8AiYjGRm3o0uHHP44yxGcVoM6jlddy
r9Hh5Ho6n5CEAuTKNPrv8ZV9/dwLEyKCC5DgHkmKmDIdjrM//SDfvQC1/j1m
MKtAh2vktsQmzQuQ04giTYIMHTa6xd0pdrEA8bUZ5ZlK0OHsXfrPQUcLUFO5
iymPCB2u1hvj4F/IRw5ZXwlDfHQ463v0k+GSfMQdU4RDj+7HxzlwuP11Pqr/
2Gutf5AOh/vxzFNdzEd2HhtH2Fjp8JbGIQkfknx0xP5gYysdHc6/d8bTIi8P
1ZjJPH9PQYc/fJBYzDbPQzZ6usev7tLi2kiKzueseajizMfXlYu0OFt34wzW
y0WPhLJOuc3S4r2SyuMPF3MQO0fbsMIELR58EX2/zysHPdxiUsjrocUvGFoH
nKKzEVOpz0oC0GIuuwN6rt8yUUFqYrRZIS32neTaRsRMdC+iTos3mxbHskb+
jHPPQDkvqVK/xtFikpIU2brENGRwwd3M7z0tjm8bnen+nIjiap93P7lNiwsO
O7j9cgpDIZIOyok3aLHO+o2qZZkQ5BtulzGkQYtfz5q6iMx8RnZPrHyuKNFi
xMHyTO+JHzp3zEjxmAAtluH419lrewt1OijFNczT4AOvqVvTh0Kg9pcCkWSK
Bj/2CI/nQOFQpC7nJv2LBgd5DPf4qUdCJK+kQWQHDRY7GmnF+jUGrJr5mBwK
aPArYcQyuZMIxnLczsmZNNhJeilE1ysZtGKPTI0k0eBBsFMcoEkFGSf2CrVw
GmzbP5ZuvZ4OZILUDjzuNJi0ZWPPIj8LVv3Jx/ScafAJibcf/AyyYWp775rv
UxpcID8aFrKRDc1tG8Lr5jTYPaveKZ4/F8oVVoNO3qXBgsnSi9eyciEnfpHc
5BYNFjLfUxM5mwchrjODTWo02Lgg1r31TD74Tk1eJbtIgyu1FK9qpubDC52x
/DOKNHjcW2/i3pECeFw2zP/fGRoszPzv5ZRHAZgKDwRES9DgMPsLtOWTBaD/
qWf3pzANPqtmf27/4QVX9zqtGPn2Mf14+tznQjhn2dZz4QgNrpjk7qQaKwSJ
rh8XHdlpcIlfFRWpcBHwKTVkpTLt738x9XPlgyI4kFxzbIx6X6+o/FrZb0VA
e6DS9xApDS4Kmh9TbymCHTfY1NiixuI2ErLz60Xwd7bY/PUyNW4MUj3GyFEM
o3oFHQVz1PjcaWuqMMli6CzPUZqfoMbN6dfsPqgUQ+3JzFS+YWp83uc++ZBm
MRR9ST18q4caR3RVPHe7XgwpZElv/Nr2MYtJwWP1Yvj2X9xKZQM17mfPrU1D
xRDYE31vs5Iav2Qv/ilzohg8lb81i5VS46LMx+fpmYvBMe2rvGkeNeZ8lfZG
fLYIrDiCE0LSqXGcqbF+IhSBsccn9pYEaux8ReSNm28RNKM1asdoapxb5BE2
qlsEaFt/izuMGgeRHstPP1QEGXmFc/WfqbHmAr/6cmchcNtxDtt9oMaVjv9s
inwKwV/UtY3zLTW2+7XeQTxbCKTTQ5VV7tT40qWPlcxjBTB6JzrhgAM1VvZ5
dV+WtwC0OSm+gg01fqcJH94X5ENlt9n7hxbU+HSA8pnuy/kQqyFsV2RIjckS
ZXpj9POAjfad6X09ajxTN+xu1J0LnlVzegxa+/YR6u0n13LBXD5D3liZGgsO
U2RJnMqB7jVWMepz1HgWtR47GJoNl7KecGfIUOM/vePJff+yQEj4DCWZCDX2
JstT987LhJkDZc3fWagx/5+M50a/UsGg/Vi5Jh01Ht3LFFezSIHG96+y18mp
se3abXeb6SRIobgYfGWdCh8pdN2r6ogH66XGe38GqbBj38SFeYMoGEoVvRH0
kwrPWbDuBBt9g2sWH1RRGxVWvUOMr97+ChIj2icCqqjwpyD+u6lcn2HpR++K
VDIV7lJp+Z2l7wIOib/fuDhS4bhPIl9NHD6jSdMrTgJ2VLj073Nje7IQpM+d
/KjZigo3ni3RNPMJQ7JfrK9z36HC/ZPGJ8Wro9CWx+rhqotU2KOpLOtsSAJ6
cZc8jZ5IhZ/F80jFhGShjJZLfp0MVFjQgrWb5Vo2GlX0tQ6nosKkvqXieiQ5
SPUou7j4FiVmHPGPK9DNRY6+t5g3linxZvLMQ7fNXJS0Hf4X/6HElia2F+yD
8/bfg4IZ2r8oMT4skqVam4+Urlj5c/ZTYvUhhfPdegXIriDddryTEn/ieTm3
MVKAuoNkTznUUeKRGmNTy/FCREPlyooqKLH9xbeZ9kZF6Kx9+SJ1yb6/xWnR
961FKELnalZIOiXO+cHF9DC2GLVW+AWaJFLiKPFYvyWKEkQm2WF3IoYS33tA
eH3wTgmSijqosxJGiQ/JSlKVZZUgcxbD06VBlPhFISQ175Wg4JeRRC9/SnwZ
l7w6rVqKGubHlzV9KLFtxH/cPZ6laMdIuPOgByUOj9v9nlhWisR+/Jcz4kqJ
zy624qCFUnRXIetT4jNKLL36KPsDZxkKTF57aveYEt/9ynHLC5WhqsPyuvJW
lPjqmwMi1oZlaO3tS2kKM0p8zswRKdiVIaHNSvYfxpT4FW+c3m+3MmTwkGbt
801KbEDn0PnAuwz5/lTvNtamxL0/p2vz9zGoBuQdV6fERaPec+2vytBSblfQ
wkVKXBejn5L3pAzxCxx+VogoceSYFY+JcRnS+2Ss7y63r+e/Iwe7z5chb/KY
M2qnKbFQXgsdO1cZKrL7fZBNlBJbI6OTfMulaO7XiY0BwX3Mzm5MVV6KuK7b
9nznpsTpLrekat6UIi2cU2B9mBLTvuhesbpUitzFN4PPsO3z19X5TEZSinIi
zj0nYaLEJ4y5ioIyS9Ako/utempKfP07MUfGsAQdcq2RCySlxPp6ii+W9orR
1Tm6w7e3KbCrIXtxf1gxcrl9bYtvlQIvR+hkUp4uRiNyPUW5UxSY5WwYxWO1
IkRIPPL1xSgF7qn9QvbrRyFSOXTP+dLAPhboWZq/UogS1qble1sosM9pWgmd
/fmrz0zsSHQ9BbacEg0YD85HDF12O5aVFNjddJvEZycP2WZvl+zkUWDV2APO
X7JyUTSvUnh1BgX+ZVivrkqZizoDPFz9kiiwliZrapB2DpK1ZVTkjqDA9MRT
mQWDWYhE9Bgoe1LgG6n52nz26cjlwHljzxcUuGFa+5xqYipa3zP5V/OMAjN8
d17c7khG8+1x8lctKTBZbGIeK3MC6ncUK9C6RoH1Ljt4c4hEoryqc5lGHBTY
wmfdoc9WGyTT7mh9I1BgN+OBZxYF9pD65dXfEXoKrE0bS0X/32uItawWNd0l
x2kGv/eKVAMhkEUjyXKMHA8ayVlnREXBf4aGMc9SyfFiXpeu1nQGTF18caEw
jhy7C9vUiw1mgql45K+tb+SYQ8dguLQpCwzIxo+9CCTHLvWjpb3h+/VzlhLg
HTnmGzCQHH6RC9e7jhuTepJjqcGvtV4GeXA5wSrM4xk5bm1697KYpACqAt7L
19iSY4Vg5+LGhgJAzul91JbkeMGYzMbDrxBkNJcPvTPcP4+f3pKKrBiyzrAX
NOmS485VYZc7mcUgynNGn+kaOZZNvVridqsE+FecPgecJ8ec1dXy1z6WQuRg
mFTHWXJcm/KI9it/GXDWlnWwSZHjt8MiaC61DIIyRuz0RMmxsbyG3EFxAEIo
GSFYkBynt1y3X4oHeP+aP7P3GDk+sG1+7QQDBpr/VLU4OcjxvNioBrMSBg+9
h38NCeRYIPZ000cbDHvIxy+Cnhyzp/O8TQjF4CScIjpCQY7tOh48VizHsEZo
buLZJcN/k9NjL41heLzz1+r+OhlmOCnnlE9SDnMTrPTfF8jwSJmEpztHOTxs
OZ00OU2Gzw9kBkeIlsNYge4VoTEyLFjxtJHsXDkYRz+bshggw/QHBZ3jL5VD
37uQN8ldZDhT68E1L41y6KjmTrnbQoYfDSkKpWmWQ9NefCt7PRmOCrtdEKdW
DtVy4qsNFWS49pjP3H8q5VD2JI/DrYQMY3GqLDK5cshPPaconUeGLavM102F
yyHjd5XJTDoZ1lDSSP3MXg6JPOpvviWS4TPBP2uC/mGIvt2RfCOGDAsJdMlZ
/cLw9bNBK204Gb46V7p7YJ//p5ZfK2VBZHhQ5hHLtzAM72ktOJ76k+F/JsFW
tE8xeCkvnBP2IcNHxw8wGV3C8NL1mcnQ6319nvesRh3A4Ji/6/XRlQx/vXkL
VVQCWJ5gbP1nS4Yl3egU5nvK4L7Zp5Usy309KjfS6/XLwPAbJ8dDUzLseO2N
9GpzKWgSRUza9cnw7lS+fGpcCVzSyPR6c50MEwTyuhyoS0DpjWyyghoZFkP/
4unuFYPktupKnCIZHnZVNTy2VwgnpJsPGcrun/dHbWJWuRD4bXTPsUqSYTbp
1XEO9wI4MHbfy1mADB8uUXihMpsH2w1uh7QY9u/jkX1Ut302rFDQnKOkIsMV
vFj6u08WzCt+uFe0R4rpdkyqtEMzYSQrPIl/mXS/Hv5bvaqXDlWhRQqbvaQ4
tkFT8uepePC1XLkbHU+K47iNp2K6vMAz1tlTP4oUf5xeJ9H54gwvhsiSGL7u
4wn19LfDJmCrzbrs4EeKDfkujHTSOKMbZ8U81exJsbT4cL4ZbQg6QvcwceUC
Ka46N+pwyTwNGZc1+fIqkOKR3e6448YZKMrulK2WNCmmmIoiPvbMRIL9WzIp
x0lxwNQfZufabCSe8r7qPgMpPsBa4yXBst+v7y7FB1CS4gnVrHButkKUw6b/
DnZJ8K3y3XhgLUKyrtzanIsk+MXtveyejWJ0QTN7uL2LBH/OmL363BqQB9mh
SpIWEqxUp5U3x4lRbZ5LnFgdCea7PTByywUj9WOq//kUkWC1dtHgRfFy5NeR
pFWQvY8VP7KMupejtjfMUpMpJNiVgcmXs60c6S30bJ3/RoInaFhayO5UoODY
c0M2wSS4LszSxi2iAvXfjC4PDyDB7x4d6pzsqUBcjNTfG31IsHqPhTIPUyW6
W27lvfmaBLt8jH9wRLESRdu3Wh13JcFiVJG6NQ8r0biw9DVdBxI8V9MZyORX
iQSHQiRf25Dg38KqnJOplcgicJc98yEJ1t/pM0d1lShF9f7m0D0SzBNuYs00
WInmt2oHGG6TYIky8YzLc5VIIv0kPnuDBN+Xvio1sVqJ7O4HxDzUIMEtd2T8
BzYrUc7BNa8gVRLMkac1I7RRidYbDSyr0L5+GiU71QuV6KwbaCzJkmCqY2MH
M8cqkYsU/yluSRJ8kfYN/3RrJSqb8mbTPEGCD8SafLcuqESk4X/WnflJ8BL7
rQLl0Eqkcl27P/EoCc45J3XwkUMl8qLML/t5gAQrRi4c/KNeieoKOaMpWUjw
08SglB9HKxGdtZvnaVoS3DsfaXJgugKp8048vEdGgvPP/73XlravZ+rHYK71
PYh+oWpFZ1OBYtiN7jhN70HOcaPuZuEKJPRCULC7fw8m155+EB0uR6euFWa/
x3twsHrw8T+5cpSX7+40nbUHodO+ip+GMTrLrX7+4vc96NxhDGZxw0hlcah5
5+0e3Fp//fOEKaD6Wwmfb7rsAaOazImoN2VIs+KxYY71HhCkDJQSokrRzY8U
M1Y6e5ARaL5+vagYWUmLUPYf2QPeRn6lDY98ZEdZGO/AvAcPb70qE7TIQ05d
l64SyPbgqEyEt7xqLvKxN/tw5fcuXBScblacy0JJuZEcBZm7oFM+MHRrJBlN
Sx8U+6y6Cwcua6yM0b9FC5RxrRJyu3BNsGj9Ypwz2uiSetJ0YhdEZp+zMprd
QDQO2gXkrLsQ2FR22/2oBwjlvb9g1/8P7ASSLnKYRsIDGQr9a7b/4OBY78bF
S9lgTfVxc8bkH3zo2rBJ/5oDDt08YV66/0DJf9szcTYXvBzQr9Kz/+CV5YND
7S4FEJfnZHWS8h9w3TykXHGrFNK8aJnq1ndA9xhDo6NbGeTpBWfcn9kBFtLC
8rFvADVruauhLTvQ1u0qV7HfnyZkFl/Shu7A0NQ363c9FTBH5cb73XcHUnWG
xi5erYSVbqZqpZc7ULv41oEnvxIonp2kczTdAc9XoQo5r6qA4VJxClF/B0YL
KTJFhquA7eDVa+lXdmD1xLcepTPVwJ//4NOk2A7od/1U7e2uhpNv1mTceXZg
Nk/4nQBXDUjpe/YeZdsB9rhTH77fqQGF42wuhVQ7sPAlaen81xpQWY/m0t3c
Bq1Wyp/jrTWgXnuqfGF2G3qO5k4+J6mFG1/wfd+hbVgeIBjOC9eC4YNrVEJt
23D/4wT1KY1auH9mKKGychtMWV31JS1rwTzhjJ5q/jYUvUjv+PCyFiw5Asjr
k7ahk2BqZP6hFv7zmclQi9i321ZKp4bUgu22snFzwDa8u7kxbhhRC08ehdNf
99wGD1GWczbhteAwuFbQ4bgND+wCDIeDauG5ppa53qNteGRWm5HoUwsukEjs
vbMN31bK1xsda+GlBHn5bZ1tINWlvXDxXi24RxlaD6luA9MXihV2lVrwJORx
3ju7DTGxhFrEUwver5nrx0S3oVlAt6F6owberTx0MOfZhrW+k/dTGmrAz6yC
b5ptGxYYHmhsBtVAQDdnmxXNNvyr4vyabVQDny7Zv5jf3oJSf4WcsX29vxQ0
n3j8dwvkEjp0P/ZVQ6iwUO/y6BYEGS37//Cvhkj6/tOb9Vtwej0lm+1PFcS4
SP1yLt0CGroYHcWPVRD3573fbsYW+Ea+2zwhVQWpLUrT5MFbYOjdTP3VvBIy
lEKDvN5twXVW6mfKGxWQk7msTPtyC6I1RJb/eVRA0ce4CCbzLciVfd9B4V8O
NfoMNziktmCUr+c7GiqD+joz0rDjW+Dm4PRHpKAUmuQgjYtzC8AmNG3ybQm0
c9rR8pNtQccT7het7EUwPPyzTKx1E9LQW67J7hzYeBAjrPJoE/SPnriw9TIa
RBzP7lnHboDCYGlG/590hAc1RcaCNkBGEXpNEzORnvJ9Xf23G9BATN+quZmN
3Jl8k5H1Bkh/DjW7k5KHemMH9VlkNyDbZVfVk6MUWdMtuXuIbIAwB9vtje9l
iMKWKm3jyAZICgll1rJjJCEvTvGLdAOmreMuiPqXI+82t4zMxnUgzSbLZ9Cu
QlxnPvcLlK0Dc4JDS/JaFcoJS6QKzViHnRehVwWCqtHIg3ZD98/rEPOVoXC4
qgY5/Jh8s/Zm3870kAzr1CKG09tZlk7rEBRW86xwoBad2eWj1bmzDn/eOtRd
HKhDTfdlpWqvrwObp4fWa+16ZFKvfkdeZX8/2yxH8Yp6tCF2zyddZh1+rzzx
4zvRgPw+2efyCa/DoxfL786+b0D8W29HvnCug8xbZv7rUw2o6E4EPQPTOgwI
zf+4qNCItKqzZNxI1kHsIl/rhncjmhSpvbeytAYZR8zV1JsbkYt/v+/DiTWQ
LGhX4WdoQoS1v/kDP9eA7mBOuvmFJpRwm2JMq2ENeNc7HLZtm5Bi+SGm6pI1
yJPT8Gz60oQ6BUXl5NLXoI58qLk6rwlZ+p43TY1aA8WePP2uH02IZEn3A8+n
NRigrZKfHWhCn/Utiz57rcEXcpvczbEmJFL6YoL2+RrkUHfxrY42Icz7keWF
1RqQCz1m6extQnre8fJLRmvQanhG6kNdE5r7U2xurrW/vpLLhSe9CbnrtAb0
XViDeUkORu/3TehQ4XiJpvQaUDo4XKq434TSuDZ/VxxfA5v4zPq2U01IxYOR
eObwGty9Em9XtN6I+qZ5FJMZ1uD9sOR999xGZHtNxuLY3irIrUnunbJqRFS5
Vz99XFwFscSlPx2HGtHXw3eAenwVQibWOezLGpCE25MZ5+5V+FYvncFv2IBq
Jt6wL9StQmVKNNfKYj1aysiw6kldBcJbsafKVPXI+0B1kHrkKsww7JkvetQh
Lpfechy4CundKhc4d2rR1UtkhxKfrcJH26d7ep01aCTlgPJRy1VwZ/eySZDe
zy/CCesAw1XYkrrfs/KhGkUN6lQ9P78KXEYXF9gkqpDkuORWp9QqXLQ4rt7s
XomqZlglJIRWYYBMwWK5pQJNrrd8nWRahcHMvo9sBuVIhKD+RGdgBTJZbw1z
mJagLFUVXtFnK/D+UKKb4N0UpKzBd9PbcgXAwHn2aVAC6tQh8xszWgEdYy19
hopYtHYXb4ao7OOH/9WKbYYgeWeFNirCCvBr2dAKnnsGVelSbiMpy6BoW2Xg
EZUJunnEPPnIZRDLj9lJj82GyZKl2aCPyxBn+9Uq/nsu0DRk6Gs4LcOoiZni
XkQhaIyfFC+6tAw1mdd0cQaGoRl6M3b5ZWgM0TsSHl0OtoszobZiy3AvUrLk
YUAFBO4mUB1nX4ajO74O3aZV0H1IYOjj6BKMcqdy2gzUwoNjFGx/u5ag7vem
DV96HWwIjF25Wr8ET6UOUcy41MPh01G5JBlL0B3+eeIHTSMky7nN3o5ZAuYu
tgDXmkZQULrDkx+0BGKtJTdMXzSBscbR9/+5LkHJyQEv6oEf8Fdnp6LOdglo
PYpZ77xqBjeD/g0+0yVItBCn4edugegHIaZ9V5fAKi9HMpy/FU5bO4ZKKy7B
TABjQrBFK1Q91W/1P7UETLGO9xeSWuH3K3aFS4eWgLHoqKIJbxvQuab//Ui3
BG9fENoTDdtAzPFKzMjOInBZ9HhoBLaB9pMxPdG/i9CvcPbQmco2cLB2pXP6
tQjJKpsu1/+2QajFwbKajkWgZb3U532gHcpMMx8TaxaBimLtU4NsO4zeURO4
W7AIs+bGepR67UB1e6InJWkReLtWCcLW7SCi99J3M2wR3vUFsRx/1Q6a1zmU
VD8sgnauw9yiXzvYqWcvB75ahBbF2kjXL+3w+ZJG/PCTRVAikPtAaDsUXPht
cNJ8EeqOjFqlBbfDwLlXTM9vLoJ394r9hYB2IJHjrKi+uggqTuOX7D3agV8q
155wbhHi4vRWz9u1w2Xxa8J3xBchdcaO9rtBOzwSmR5I5lmEgC4an7Bz7eAv
8Np/g7gICXK6W8c52yGH+6jKRapF+GZhZnR5uQ16OPPXAzYWwOTaQVmSmjbY
OXA9eWhmASJv5AbqfGwDbsKs8YnBBQgTFd26dLsNlBk9CY4tC2CUMeI2frQN
zGmO1VSVL0DBNjOc6m8FH/LC56w5C3BfbaBd7mMrtG/OjSQFL8BJ8pEjur9b
YG3F69O6zwIIdfqzGcu2wOEF7ssqrguwrHmATP1lM5hM3kgfvLcAsfJ/+B/8
bQKvX/MmIjcWoPVH6NbYoSZIGvA+8Ex1Ad5nhm+NyzbCUnuJK8uJBZjUCeqT
NKoHspdXgr2m/kKL4bpbj0I1XLV33Tv24y/IWlSZKHBXQYBVpnlh5l+Y4NVJ
nt2uAO6bHNJzTn8hi+984YVwDOjUdNt1xr8Qz1Vz/e+xfPA6flRudnEeZivN
jAOdc6D56PVIj+550Pd49yWyKROM6Qqt87/Ng/RURdyzmARwGfOmPyo5D498
Aw6+cLWBos9CF6f0/sC3kVu69z3zEM3t3/dJFf7A4Yfbs4qPCpEed5z7YZ4/
UFge7GN1vQQtJfFh9dk56Pnzwr2KthwJYy75zJdzMMLedEQmY7/eeQ7eajDd
tzsn/cxnrUNVV8Mcx67Mge5/x1PEbOrR3S6OPHa2OfguIdV8/0gTCp5hO+WU
MAvGpkNmj0Nb0WR6x7WP72eh+Wqc9ivpNiRlH2idYjcLT03OW+w0taGWPeaU
IYVZyKFdkbZfaEdHqpsb1nlmQZjqxBF2lw5k6fN+moV6FubKv8SZknciKnb6
48ptM5Aoxq5yh6IL3eirv2iYNwNNhwOrs1y7UPQ3b1P7rzPwn6rxL6qlLqQo
QhUdbzYDYKImztDYjXz/VmF8dQZ0uHKj/hP/ifpyXg/3is8AB8O6qoTfT2SP
SI8ybE0Dxw9SYdWzPaiCAssLDE9D/9DUmvabHsTS8MJAsWoa5BzE9hn3IOMP
557rJ05DhFnxSD1TL0q5sfPF1m8aLk+22K9e7kVbHMV5b59Mg2XnxboQl150
efh5V/TNaXCLeif4NbEXBcXKrhSfm4Y4eV3j4ZZeNG6xTujinYb/zpDUaPzt
RZLieafmqaehJzjhYgt1H3JbeapF/WcKbiXM3tHk6EPNhadtuNunQPu63tl8
vj7E+XLpvVz+FPwIdvm+LtiHHqpkpmiHTYHRj3z+Pd4+lEdr22j1agqi+N6u
lh3sQxQtYjMe5lPwxzPigAhlH9L+9IcmQm0K9h4/05Se7UWRt1KO50tMgUVH
/Kmf9b1onstKtZV9CuaH8oRoonqRwriw2fTWb5CmCbavsO1FPolTr8lGfkPw
+RJZMrle1GMdH81Z/RtONhXaV2/2IEEp83KppN9wZdX7IEN2D3q6yT+i8eE3
fJC5sfLTtAeVl43tmj/d97/Y13qSuQcxeUQfdbv1G7Jz795nyfqJDK/cUwhR
/A2eS9J6Pho/URIT9+0svt/wyrD8SuyvbrTRMfS8keY3vPHi7raw7kaqIeHB
438mYTFIy3dquQt9MjbM/9c+CQdWRtfE7bqQxHTvinj4JBREGK/cvdWJni6I
Ch/0mITplErbxqYOVLD+ymjXchKKOVQYpc52oPNUIjVNspOw9TB8TZu8HWnz
OX2x6JyANSsv+4roZhQk0tyoVTwBVTeCOr6I/UD9p3hJZKMnYDX/WzlZRiMy
VWp4SGU7AZivzC7sUx2yNzp8NoZ+AvJkCYof5spRkam1tc/SOKS7/TmRehKj
XauK6Me94yDRLVBqUF+CvJws6ZXi9+1T9+NvOuei4C9FAwMXxmE7NM3Ody4Y
FbUZvDzgNAYe9nd7IoWKYLcnLfvf3TFwKqkzEtIugwsjZFPjl8ZAYmw8LwSV
Q+N8klY2+xi8IxGiItpWwwD9No9W5ijI2MmsBLb9gL2LX6veTv2CMS6Lzk22
n6Ci8XfDtuUXfMkIvB/P0gPeN5RFb+b9AgdtzSEN2l5guT/7WdDjFxw2POzm
vtAHvG7yDyqP/YLOkqITjh+GwPzNh69JVL/AxXH6Qb/VMCT5jbUE/BmBCx68
p0J5RuB0+DvZu8Uj8OLIS52JhRFQKeqn/ac3Ah7R8oH9VqOQlvRdrlZ+BF6O
HH8WXj8Kh77aWARwj4BqW7OrCt8YuL+TC7lNOQLmk/QXkh3HoHudKlCtcxju
Pd+aTakfg6Se0MXh8GHgM1uWFTgwDi8Kxa4/fTAMJe/sPRaMxkHAWY8lfGsI
GkkiWleGxmHj9ozNqaohqJvo/zN9cAKaFF60VL8fgkjVeZ0ktQmIPEoQN9Af
gpKdc+vsThPwdPe73zz3EPyoDw9njJmAy8Ny8+4zg2B1z2zSrmYCOPEPjYM5
g8DG+EBbaHwC5iPvpSa7DkLDVqka684EVLxaZVC6NAjdGk9ECUyTEGTy9lEn
yyBcYt24ynJ4EiyUjzY97BuA6dN264vHJkGBP/PEv5gBCCzr843YxyyUF98F
/DcAMS9m7XYPTcL4RM+MwJkB8HnYJ7BNv5/nNY+uFpEMAAnJL4WXGxPgG0+S
pNnQD/ZcfrYOQxNwx/sT7djHfmB3Hon8UToBkhZCFs+M+oH7vlC/XdAEUF0t
qaM/3g+LR9Lv6D6cgD4RLaHI/XuOdOGNNzs9AWn042+kivrg/LnKB5/Xx8F9
7tnvutd98KPsRujPnHHQ/UF/yUijD8S7m15wW42DUNq3uMUDfcBuWRFpdngc
dvxOU3mN9MLL7yH94RVj0GpTa3Y4qRdGgh4Zl98fgxit29VpT3rBjSc9vf7f
KFwlvPb4SdULjdfIIu2PjALX8oFxq9Ye8L+deJQY9QuWOpKUSUJ7oJ1e5eRb
rl8Q8rmdTFi0B3YNL1GQUYzAIwdzk9K1nyBaey+Z2DMESvpb5dfxT6DjEQua
ChmEqUO8r5x0fsKhBPBjX+4DmbDHe43PuyF81vOz+7/O/XmQ8s5d5W54MshP
TDfqgEGjkLIVhm4IeFXx9HpGG3gcK3c9GtkFyl2pJxhuN0FHNMuOdU0nJPzZ
ESqSKIK417G3yf074dyn27U/WbPAyVS2+MutTvhFyn6g1CMGeAXvOuG5Duiv
awuiTg5HtonpG6zEDnij7fHt5GI1kmCyfn1hpB3aZP4K9N1vQIt2J5mepLaD
271vh0SmmpGdQiJf56V2AAF59iHWTmTfEq0Z5NIGjZmyNJwpg2h55sQV6aYW
YP9hT8rLNI2oXm9EqtrVg5otIf2H1Tp6o26fF89QDx02DPHBnBuI5sBSI018
HQSt/2CkbNxAdImzaw39teAcJGh3X2gLMbcMqV+7WAP+z2Jkv/XtoEOc1Rv6
hyqBBm9UnqMgVQoZP89UmFUBPZYWEkk6pEqH08r4DmtUQA21zcLJaFKlo+cL
NAdelQPLD2PRKwpkSsrNelfKuwHs81QDU++TK6ne03r6mh7Aq79sPCyJXOny
ypVvF5XKgFSwz0hjgVxJ/fC51frEElCKEFytf0ahpGfOF9XuUggHLnv18jtQ
Kvk8fuIdmFsA3aeFNicyKJVKXSpttOfzYVHI4OfJGUol/o/3Fdvv5EGjszDr
yZtUSjcjsgUCg3Ph85sY5i5fKqV3ieSM2m05MJ6xybb/NygtQUx/24VsMObX
bzvKQ60k2LhcEeCcBXH/1Cdkr1Er3epWTrqekwmsAqol35yplfDcmGObQAZ0
w8j6mRZqpam/DzBvaRq4mHMGG61RK12jovkQLZYKY8+9nuZz0ihxnb58Mpo1
CV5PebAs36VR8rwytcXzOgFK9UnoGt1olObueNdHrcQB2yxPbmUEjZKOg1Aw
j/l3yLLk7OopolEq8q0zj/oZA/7SS7ZUXTRKPDEPpXmuRINso0jn5T80St6F
NBRRRZHA2fHwQxg5rdLQt+vfz9+MgJ3X5M93D9IqpTYFXDgv/xVktPxSrURo
lZw324aVuIIhvVTX/9dZWqUrggRXJdLPYK/d2mh0hVbpoI72YaXxAHB9Ra49
pEur1LjHb/PS7z14ewwY3rtLq/Tw1vfEFzfegA7R1XriIa0SRbbAuOvhV/Bm
2vm6hQ2tkhKH+rktbA+tzBwcc09olbxrtlpvHrOEizmThb/saZX+B9+u4bQ=

          "]], LineBox[CompressedData["
1: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
BgeyuT/i/wHPlo3C
          "]]},
        Annotation[#, "Charting`Private`Tag#1"]& ], 
       TagBox[
        {RGBColor[0, 1, 0], AbsoluteThickness[2], Opacity[1.], 
         LineBox[CompressedData["
1:eJwVl3dcDd4bx7v3NmjcexsqoamQSkV8aZwGDSWJhmhKEipJ0hRFVFJJk7T3
vLe0z3O1UBootMeVbNLS/N3fX+f1/uc8z+fzeV6vcx4pJw/zs0Q2NrZwAhvb
/8/Az0em19YE4crR447X69LxpL/w7MCyIBzI1Me749KxKXVk/tk/QbA67SVc
5ZaOJfd7rnj8FYSJT4rTghvT8fN7setGJwXh+zevI5pXnuJ1Su/F4bUgGF3W
WpVQf4IfejsY30gRhGPa14RRUiIuJFzJYtsnCGIdsneUc8Ixx1kD1Y22AqDB
OMPjJBSD3tipWH07KQDJJxRyRkJj0BPrTQENlgIgO/l81mo2Bu01+dXiaCYA
wpE6Fnv6YpHL7oSTBXoCQC0newUmPEQvCJ9vqMsLAFw6JntKJBFFPrndZTvP
D2bis/F32dOQ4IeWixkx/HCXwalyeGcOgp3p4aH3+YGdf8YuzDYHXQwOyHKJ
4AfOPY48qdE5qFVu96B8GD/sdanpOfk3B/ldfWpM8+WHwzWH6tbV5KJxAX/5
Znt+0E0Oa2do5KOKI8pTnxT5YW1MdGijdBGyT+dhfyHPDzmRmrkvTYsQ7+yk
RME2fhiwezh+0L8IuaQ+tnKX4gcbEYH6lLdFSOwbd9ucED8Y1sj5NIQUo5vh
n7K5lqnQyjE5c/ZtCTJvSj6z4xUVZJkXbtzMKkNb3zGH21qpwN5SeK6kugzN
MZVsXJqoEH45NK2iowwlcTaZZdZTQdzg5bjuTBkaNfqmuaWUCkcFK2f9dMrR
pW51Uf6HVLjsqGjK+64caY2FxZU+oEKKoKR96qdyRJ3uIptGUcGisvAS23w5
ogs6c0TcpkKR1js/vY0VaNEycpr9OhVqZDoUSk5VoPChwY4FWypwyMZ/Gnpf
gWx+yhkm2FCBMP0nOnqyAimseTapWVHBMgm0+WcrUJckR62XGRWULEpbbvHT
kLCzYu53XSpUbf40IW5IQ1Pe16QjEBU8DvDpH7agoZowxuMdGlR4YXT9o54T
DZ3OtXjookaFm73J5U/9aSjza2DI6DYqTBX84lsqpCHvpbbloK1U4OGRGY55
RkP6vAK+W6SoQJtYLzf7nIa+Kua424hR4a9fsaHkRxpSvtx56h0vFfxH5GVJ
JDoi3hR977WeClqRpUvzvHT0LtbJnJ+TCndszhU/E6ajn64/YlJXKSA0LD70
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
RexZ/bUudltLuOErgZ8ctrH4f0nMkPY=
          "]], LineBox[CompressedData["
1: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
p+L/AVIToiE=
          "]]},
        Annotation[#, "Charting`Private`Tag#2"]& ], {}}, {}},
     {"WolframDynamicHighlight", <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
    StyleBox[
     DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
       Slot["HighlightElements"], 
       Slot["LayoutOptions"], 
       Slot["Meta"], 
       Charting`HighlightActionFunction["DynamicHighlight", {{{{}, {}, 
           Annotation[{
             Directive[
              Opacity[1.], 
              AbsoluteThickness[2], 
              RGBColor[1, 0, 0]], 
             Line[CompressedData["
1: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

              "]], 
             Line[CompressedData["
1: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
BgeyuT/i/wHPlo3C
              "]]}, "Charting`Private`Tag#1"], 
           Annotation[{
             Directive[
              Opacity[1.], 
              AbsoluteThickness[2], 
              RGBColor[0, 1, 0]], 
             Line[CompressedData["
1:eJwVl3dcDd4bx7v3NmjcexsqoamQSkV8aZwGDSWJhmhKEipJ0hRFVFJJk7T3
vLe0z3O1UBootMeVbNLS/N3fX+f1/uc8z+fzeV6vcx4pJw/zs0Q2NrZwAhvb
/8/Az0em19YE4crR447X69LxpL/w7MCyIBzI1Me749KxKXVk/tk/QbA67SVc
5ZaOJfd7rnj8FYSJT4rTghvT8fN7setGJwXh+zevI5pXnuJ1Su/F4bUgGF3W
WpVQf4IfejsY30gRhGPa14RRUiIuJFzJYtsnCGIdsneUc8Ixx1kD1Y22AqDB
OMPjJBSD3tipWH07KQDJJxRyRkJj0BPrTQENlgIgO/l81mo2Bu01+dXiaCYA
wpE6Fnv6YpHL7oSTBXoCQC0newUmPEQvCJ9vqMsLAFw6JntKJBFFPrndZTvP
D2bis/F32dOQ4IeWixkx/HCXwalyeGcOgp3p4aH3+YGdf8YuzDYHXQwOyHKJ
4AfOPY48qdE5qFVu96B8GD/sdanpOfk3B/ldfWpM8+WHwzWH6tbV5KJxAX/5
Znt+0E0Oa2do5KOKI8pTnxT5YW1MdGijdBGyT+dhfyHPDzmRmrkvTYsQ7+yk
RME2fhiwezh+0L8IuaQ+tnKX4gcbEYH6lLdFSOwbd9ucED8Y1sj5NIQUo5vh
n7K5lqnQyjE5c/ZtCTJvSj6z4xUVZJkXbtzMKkNb3zGH21qpwN5SeK6kugzN
MZVsXJqoEH45NK2iowwlcTaZZdZTQdzg5bjuTBkaNfqmuaWUCkcFK2f9dMrR
pW51Uf6HVLjsqGjK+64caY2FxZU+oEKKoKR96qdyRJ3uIptGUcGisvAS23w5
ogs6c0TcpkKR1js/vY0VaNEycpr9OhVqZDoUSk5VoPChwY4FWypwyMZ/Gnpf
gWx+yhkm2FCBMP0nOnqyAimseTapWVHBMgm0+WcrUJckR62XGRWULEpbbvHT
kLCzYu53XSpUbf40IW5IQ1Pe16QjEBU8DvDpH7agoZowxuMdGlR4YXT9o54T
DZ3OtXjookaFm73J5U/9aSjza2DI6DYqTBX84lsqpCHvpbbloK1U4OGRGY55
RkP6vAK+W6SoQJtYLzf7nIa+Kua424hR4a9fsaHkRxpSvtx56h0vFfxH5GVJ
JDoi3hR977WeClqRpUvzvHT0LtbJnJ+TCndszhU/E6ajn64/YlJXKSA0LD70
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
RexZ/bUudltLuOErgZ8ctrH4f0nMkPY=
              "]], 
             Line[CompressedData["
1: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
p+L/AVIToiE=
              "]]}, "Charting`Private`Tag#2"], {}}}, {}}, <|
        "HighlightElements" -> <|
          "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
         "LayoutOptions" -> <|
          "PanelPlotLayout" -> <||>, "PlotRange" -> {{-6., 6.}, {-1., 4.}}, 
           "Frame" -> {{False, False}, {False, False}}, 
           "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
           "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
           GoldenRatio^(-1), "DefaultStyle" -> {
             Directive[
              Opacity[1.], 
              AbsoluteThickness[2], 
              RGBColor[0, 1, 0]], 
             Directive[
              Opacity[1.], 
              AbsoluteThickness[2], 
              RGBColor[1, 0, 0]]}, 
           "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& ), 
             "ScalingFunctions" -> {{Identity, Identity}, {
               Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
           False|>, 
         "Meta" -> <|
          "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
           Plot, "GroupHighlight" -> False|>|>]]& )[<|
       "HighlightElements" -> <|
         "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
        "LayoutOptions" -> <|
         "PanelPlotLayout" -> <||>, "PlotRange" -> {{-6., 6.}, {-1., 4.}}, 
          "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0},
           "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
          "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
          "DefaultStyle" -> {
            Directive[
             Opacity[1.], 
             AbsoluteThickness[2], 
             RGBColor[0, 1, 0]], 
            Directive[
             Opacity[1.], 
             AbsoluteThickness[2], 
             RGBColor[1, 0, 0]]}, 
          "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
              Identity[
               Part[#, 1]], 
              Identity[
               Part[#, 2]]}& ), 
            "ScalingFunctions" -> {{Identity, Identity}, {
              Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>,
         "Meta" -> <|
         "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
          Plot, "GroupHighlight" -> False|>|>],
      ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
       4.503599627370496*^15, -4.503599627370496*^15}}],
     Selectable->False]},
   Annotation[{{{{}, {}, 
       Annotation[{
         Directive[
          Opacity[1.], 
          AbsoluteThickness[2], 
          RGBColor[1, 0, 0]], 
         Line[CompressedData["
1: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

          "]], 
         Line[CompressedData["
1:eJwVV3c8198Xtvf+RFZRJErqayXh3EpFVCplKzMhoYyWUvaIsiJ7ltXH3q69
k52RvUeyyfz5/fV+nde997yf57n3dc5zjhg+uW1CRkJCMkNOQvL/r0fNZosm
nzlczp4oGLajRXckuovdLrhAS5Xgiq4lLcrt0Xjn/tILjg8ZRnYa0yLGslmB
Km1/kPsamHZDhxZBQIpblUMAxC72vKy/SYtsTC2mqwKDocj6a8rVi7Qo9txJ
1eqMUFijdD3eKE6LOhhm06ubw6F6kHjk3hFaRDWUzFozGwXRzg2EWUZaFK4l
JWvkEgPR5YalPhs0SOpSkMUoWxxItLgKKwzToGbR1XCjmHjYui8TRVZHg0hI
cvaMSpOgZqYTtfvRoNDpA/+NqX6D7T+m+pPWNEi8/ZmhcV8ynL79yvKwGg0y
TpSsNt5Ig0Spz0dpaGnQjl/g2pjbd7CKHWyrGqFGjXKbAZleRKhIfvUuv5Aa
GQtpV4tzZYJghs53HRNqdIaHbsB2KBNW0u1OH5ShRjvMhWuZSVlgdco/8wgt
NQr+xyUsIZ0DJrI3dRQSqVBtU4+XxJ18iJKEMd0flMjMsbdW52QBZIQ0ftX4
QIloBPsoXMgLweNn+VzYdUp07eVvp46sInD3bAw/VkuBmkQGbe0OYEg69+mq
SxI5Mrtkm9Y3UwGv2qTxxHFSJBO61Pj3XiUURdlEjrSRIJq/tjPklZWQFqBN
nHlFgr6FPT0u+qUKVHOULqeG78HM4rOYVyo1cNrumLZ8yzZYRjsEHUqtB6dx
Y0Ik9TrIra1n/cfZAHSrN1JlVdeAQdWx7bJLAxxRWfTK9F+FtHVHZivdRpDL
8e+N51qB+RsvPEsZfoB4JZE/RmwR8p1KS79Lt4DYlV3Lx/8mIPrb7o8CyxYY
oXn/PCtkHDw6FPorY1uAsk6rjfzcGGiewFu/mFph9Esh3zvXYfjXiWVIJltB
gpfXfy2oG2RPlWeqhbQDj/9XEe6HOSDV0RVcWt8OV8vsV/POJMOZl3MvRLfb
oUfhrEVIeQAI1R+8RGPQAZ/vp1mztyRggolVOz7RCXwPGVw171RhJgaXvFN6
naD88q+DRmctpssK/fLFrxNayqOjJC40YhLSaiOHlU5wvZowljfTgufCeVbE
Srsgh48p+ttKF5689F93+EIX8NBzRZdodeORmSvFdAK/gOne1ZMjmT24R8bW
ZcL9FzSSZb9hv/Abdwy6m6kX/oLcEeimtO/HLW4RqhVzv6Ai5FlvfeQArumo
OxB5qxsEaoM8202GcPnLgQ16l/249Kpaz+QQLj668vt5bjcsMfJfKDIaxpnW
fAl3eXpAfczhIavyCE47KOVZeb0HPEQuEtwzR/DX0muP/3vbA88ni9v62Edx
FIO9FON4D9QkDiWfaRjFYVneXC8P9kJfI626LM8YDtaO2ZlS7oVWH/NT0qZj
+CNp3vC9V72w63rP/mTKGPb52lRdld4LjSnzJkdnxrD7zZFv4sO94LehIiwo
MI7fra37RhP6wGLpTZ/svXH8OoLRlulKH5wttfCxeT+OHRUF7r1y7AOrV1YS
Hcnj+OmsjOxMch/wZ88SnzSNY6tPNw5r9veBX0hy/a2pcWx+zpishvk3DK4w
CXjujmOToecTEhd/w+NUUTjGPIEfuPs1xDz7DX98ch2luSewrlhCOnPSbyC8
qt/9wTeBNToLP73u+Q2N3YEtO/vx7Vct9rP0/aBCN5zfvb//usCEtpZCP2xK
2inbskxgpYYthVrrfrh0QK9rgGQCX7JhFZCK64cXO8w2EnPjWIHzOHVcZz+U
s78YdW0bx+ew3CwLzQA41E8lz2WNY0nT2z+dZAeALrRvycl/HJ9hNMuasxwA
uTuFfupm4/hk9usQ7agByOyx+ed6fhwL6QS8rGsdgLf+G5dF6cbxUbJv96Up
BsE3okjAoGMMH/pWeileehAu8a+1K4SNYU61juNsjwZB13dZcEhnDBPWp+nf
fhkEHn0FywdcY5gpcu/vnx+DMKZY/LavbRST2bP/NuYagks1wz8lZEex9oPk
tnzJIZhmGEq6NDyCM69BPYPaEISIr6YfcxnBhnyPcrPdhsCJRarvX8kwrqgr
9qdYGQJzXdeLp6mGMHfWLXdN5mH4aO+jL84/iG0jJl6nnhgGvmh2KyGxAXzU
lsVC3WAYaIRm2AvO/cbveYwvxzcPQ4atV0MUZzf+Tfnv/Mb0MFCQr9R6UP3C
kgu+4qqUI6DXXzd6crETj1Xl8a2cH4HaxSM88yXtWNGKfvPStxF4/H1QYeJV
M6Yoz0wffT8KDsqcWXGe+Vg35WrC2ahRGAgMoQujycbZQb+/eBeOwhPuXqMi
3u/Y2JzKU2JxFL4sVweKNobhaoK20Xv9MSiLw3m/KRLg8O681q/nY6Avfz9L
Si8N7Kfeq50MGoMTv7ZLPRszQagkTb69cQxu8aYIT7YXgpspKafAuXFYkDjw
roWsGgbUgpkc1MeB7/S9P9o/a0D6/EnKxifjQP/Wm6Tbvw4mmO8u2SaOQ4W5
YsDZxUZQ2JyeqikfB47yaw/N/X5A8JjTIHf/OEwm5SWeOfITrhR8baogTIBN
c3bGEeZWiIyTr+Q4PQHKxo/W31S1wppvW4H5tQk4m8RHx/m0DRINtxPZnCcg
zv/3sVdF7bCr+jHCNHwCfudqJrDc7YB7Z4UCC/MmYIehdfTJZAdQM6g5G85P
AIHC2VN6rRM0j2uXSdNOQntjasIl6y5Ivmi8Ryc4CV9+DFcQRrtgW89KYVBh
EuyVDJ6G3vgFN547vs7SmoTP67/k6jN/QXTgu2L3Z5OQrH82JJR5vy5999nS
8ZuEGN5Ds2Qm3aDYGCx7JnkS/KTq/fYyuyF4Ivo5RfUkNOjF13n/64Yp0pT8
7sFJeP5IoyJBpgdkD+Wsp25OghWvnd916x7wkcHSzuxTIJ+eJ+ga3QMDd+rt
7p6ZghmrdnW1+h4486Q9W0RlCpyYhxqzZ3rgnVf/8o7JFFwT0aYrpOiFjoRJ
8ba3UzCUXXr/0X6dEypftEn8MgVCMhVjP472guPvLeKL3Cl453HMbkWoFxrW
KRdutE4BJeHEt1mBXuAlsJwWmJsC0Yyk5kquXrAS47Zap5qGccGa4Q80vVCm
LJjWeGQafj3SdX2w0ANsJmJzUXLTUMm7sXm9tQeM38qcfKYxDTKqftxWKT2Q
++WiuZLtNGgeHFTuceoBmjzVb7y+0/DS//nTbyo9oN12b2ohaRoaHrnu/GPt
gdQ/D45XV0xDLal42WRrN+zSWJiG9k9D+LORLX/vblATtEt4vDENt03YbrJD
N8TCm7ELhBmgR+spQft95bJ9gOGM0gz0JumkH5D+BcEfI2JKjWagWZ3rhU5b
F0ylJg19cpqBH++iXMUedYHPaJH++ewZcLH8e5rDvRM61Ma0ffhmgTuYJsrK
ox2ELOdDH8jOwl2P4wc/7bSBo/tGt+TdWdBc9XgbaNUGvKUMGv1es3DQqeb2
X8VWMD4pdUdsbRbyi9qsH/j/gNwr8ImMdQ4CH909sHSxCWgMlVu7Ts7Be+qI
hksLDZD6We/mG4M5oPlu0Z8vVwcrlG4qLU1zwDU9/GsrqQLeD3Vdso37A2Pn
Itovvk+FgQKVx47Ff0Bm0ehY/uEkkA0oC3bq/AOIvulafkkMLFxOnvaingeb
HArYEfUB/ZTXfnEW80C/GxLGuPIFF7os5X9zmYdzSdrZIfxxmF3/4cj3iHl4
mWR55bTsV9zEckuq+Oc8kJ3gXaY8koFl7QX7OiT+wuHo414PKwtx8M1Qij7V
v9DhLZw5RijBi8JMYsMmf+GAcedslRbGX/vW3/4J+QtVw8K6s8PlmONCoxDV
9l+IRTtunmQ1WIaRX9iNbgHq8vOkJTZr8MTzXjnagwsgRWK4MTJTiy/euWnK
fGYBYsOPn43Jrcf/KM8V8BguwL9XMoa8y0040Xb5R6TVAnTt5Rs8Tv+B1QfT
Ro68XAD2lkRjf4NmTMw/yiAcuADhfZM53ek/sf6xfv6U6AV4nOidbCzYguk/
hUiJpS3ARGTaTdbHLdjUguG+ZM0CBPcwP9VfbMEHumue5rUtwPCps6R/RFtx
haKzh+zgAvCk11IyGLdi64zzESWzC7BMqymWE9yKDx1ey0AbC8DE+P3saFUr
bvAi1lRSLIKc6PM/H+dbseO6ed8V1kU45VIhUkpow0LGxxbqDy0CW7pUh4lk
G+5oGaS4fmIRanv5ht3V2vA7+TCuFulFIM2QVRM0a8NnktXF7lxaBCsHuZNy
L9vwAAfzpa6bi/CO77RLq2cb9n5fr6GluwgPWj88nQxowzIL7y1/my3CdPwZ
jnehbXhCV8H5vt0iACx5JYa14cD6jaAR50UwPSixoB3Shi9KZyWbfFiEL6c5
DRL92vBC7GM8FbYITjxflvzft+FIZuEOi6RF4Jc2IQo8bcOqr0am5rMWgWLV
IdRMvw3/mwrfsSlbBOWbceHml9tw4l0NttWmRTgs2xgoJdyG1StYjzv2LALH
5R3FLqo2THa66fzW+CKYmWuoaw+3YuIXNzWnpX28p8uVW/JacSPBbZKZZAmK
eLcrkFsrnvB2dYphXAL23RBZglorJqVwZZfgWYLEoOMf9NhbMe8rl9Qq4SVg
fvsxR7qrBZ9deX/pnvQS1JLoF+V+asG3Ld/3Tl5agnry2uy1ay3YQ/cdDf39
JWhZOpIH+j9xXIdzVLjlEhgdfy73NrcZl6o6S4u9WIKwhvt9vNTNeEXurfGt
oCWQY0m00f7UhB8ccioLaVwC7QTM0KpRj18GvdYQ6VkCinLWmJ/P63Aw4+v5
woklCH12rum/4FrctPOSd4B0GYwf+7yXx9VYZuC5o6DMMhSeOffBprccs0TZ
ncmIXwbvS6F8cn8z8cmDdrUXM5fhTeeR2dBqIr7i90y/Ay/DTUop6ZeSafjV
m6c+673LMBO17OHtHI+n7ttMybOuQFiynFDL+eeYvNv6zc/DK9DGkvWaR9sQ
DqtZcxiIrkCfe2q/e6YrqKMnii5XV+B8P75nU/sFyvgfRze8XoHgY7wUC/fS
oe+z5Vld7xV4n5IqNCGSAWssls1/Pq+ApVV/9hh/FoiSWmyzZK/ABRGXw/5r
ufB52ExTY2YFbBSnXc5IlEKWltnfqfUV6Fiu4omewtDc+tDtBeUqHNGSOWhX
XwYUFabZEfyrMHVoQfucYQU8iTVmGbu3CqaVJ5GdUjV8eB4a/sFoFU5Wkber
TVRDulqz8DnrVfA96ZLL6VQD87tnL3zwXIW9F+58/8JqganL8odM8CqkB5Z5
9vHVwam0GK3R2P057aPgQYXIOrDUobeVKV6F4by5ABH3evARR7sjdatQm0uX
7blYD6m0dl6+navwkTFan/NuAzQNfeOQGVmFKvcVy+qMBpjNG4gdmV8FNsrc
J++oG4HOj3Dad2sVWhztiRfvNcIJU6WiszRrMCtVLr4V0QjX5F9fHTmwBqqZ
tdmxA41gfiCz3efIGkhQJn7/j7MJvGYn7p8VW4P4F6ARe60Jkit45oZl18A7
PSt0wa4JGkLVHH2urgFJgeVh7rAmmLZ2pTirvgZvGGoVD+ft9w+lQv/hB2vQ
VnLn6G5TEwjz/eX1ebwGE+S5b4v7mkBpTeCb9Is1eNnB26c32gRmPzSlht3W
wPWzls7UfuwR71vuHbAGR2iDuoz6m+Dry4rr0tFrADpx9T0/m6Du9nrPUOoa
RKxuqN8taoJJEVFT74I10CO9IDMa1QRUpAZLUjVrUHcu5MfH100g1B3kNNS2
BqbPTCls1JvgyvcGOu/BNQh8/Efnk2ATmLrtBUvNrcHT5xb9NPON4KYnKTC0
sQYxjWvs08RGSJR89N2Lch2KuHeZlR83Qg195HkptnXgtXdQRQKNMD7SVjt4
eB00pUuLJtsagKKQWt3r5DqMkxzN1XrVAIIf5YYkZdaBY1p4JYOvAYwhccPz
1jpw/2n84aVeDy4cfS6S+usg/uyHjfJEHcT/YWYdNF+HXMN6TXPbuv25+7mI
pMs64PpKT90XtWC4oao9kLsOTvpaJyivV8O7n84THpXrsKUU1f0zpwpiE3Nt
JVrW4WgavYoodxUMq/N7e0yvw0bdt37Frgp4kLFcJM67AcZJQvYN/GWgbx52
yN15A5rSdn1J1bJhq4e2edF3A8yIhPsfajLhs/JzJ92wDXhH+nIYZDOgVVhz
8L+sDXC4/8KKRyoVFCfZY36PbYCIiKoO67EoEDH+KCiu9A882O1Jo88G4Jp2
ks5w9X/A1uuf6WYYig0vWbtSG/wDNcOCb1bOUTj86M2J38//wWLnx5WhhgTM
NMzw1T3lH/woU48oLSbiFLVXmkt5/6Cdm06JXSgTK5XN0uhV/QOeH56dTZ5Z
2Dmq4ZF4/z8w69M2OwG5eEXP42Q/0ya8v5ap/0mrCPv/WO+7yrMJ6nVeV7p9
i/Ep+Yc+mcc3wbVOQeByYQk25b3yxx1tAlsww8cvmxiT++RELKluwlTDjCi1
exmO3hK8oae1CeGHD97UYyjHPb3k38VtN+HZbV1hO9oKbH/t6f0Ip01Y5jpj
TuFcgdkKR5hpvDehT7LYo3G5AquGllv3x20Ce3bw428NlXiK5r8jSsRNuHKM
8XKIWBV2dYxuzSzehIK1oqMWvlW4VOONuEfnJvC7GOa8PV+NdWrnR5aGN6GM
o/tZnFc13pDWD9Cb3wTKKXV1q45qHJj441Ld5iacOvyFvpOzBv/HIb8iTr0F
H7n5I5o0anCza2p8BGELWl0faah8rMHmqzx3afi3IPLBoS6l6hpMbeJN+VR0
C/Z4qslKl2twfMdmTr/MFgQ3X2JP4K3FSNHcVOnyFhSm7QX8g1rcn9XDkXVr
C+JI8Z18vVr8QkC59pD+FkT0yzgM2tVijoB8Bw/zLRhd1bKy8qjFWWTCwsv2
W5CwI79qElSL1WxDuvXeb4E7zQBbXXgtnhum8qzz24ILL58d/BxZiz1v2Z+T
CN8C0+MhYb1htfhT0wnL1G9bsHBt/L6Xfy0OvzoYeSxvC/jqfzmVvanFiRUB
rZFVW1D2orHf3awWE+WVKDjbtoDYVMr151otLszflv44uAXdBlecd4VqcZVE
xiO6P1vwO4uVuWl7X590k/D3m1sw/4HU+GFTDe4W4f65Tb0NfQ/aykaDavBI
fDOpPfs2iFnp7t3VqsFzfO8l/x7dBgUeS+8Ojhq8Fnb2odmZbTD2l9RxaK7G
JBxzocPy26DHdX9S4201pvsY3aStsg0nCgqOfhStxgcY7u61a26D8jt3G2iv
wsJkpcY1T7eheVqq7ylLFRZ/bRsCztvA+7Y29lxSJZbbEGrI/7ANb8dMK5dl
KrHavN/plG/b8NL09Yu26xXYoddg029wGxwCU7m0LpTht3c5TtH+2YZvan9/
fH+IsVdLw/13m9vgeki5m/JyKY6skah+xr4Dh/n9f3HOFOGaTEp/LZUdkDw+
blExmYtbThVWtGnugNjHOWn90Bzc+9VqVcV0B9LieCskrmTj+chf2grOO3Df
k+s6ISADc3h/OyaQtwPWpkLNJLRfsYnR9aK5o7swaRRr5FlnhK0GSOdNzuzC
iYvnP73MeQSOWrn8g/K7sKy+OLlW5gw+N/ncWjV3gYXqczOBNxCyzy+q5X7Y
hbjBEyIhFAlAcSBo4s3mLlAKTMbkRmYD27wTExv1HjSOssjHZ+XAkToz6XjC
Hhj4CRk6VuSCwis5tzrRPZDkJb8x0ZQP1+8JpWuf2wN/zbUHjHUFoHuGpWvu
8h7o2EalSxUXwvOx0WOs9/fAhvjILv9DMXiU/rgeZ7EHomL/zaRblkDw5zw7
Kcc94AlPTxi4WArZqt7VWh/3YCghPersLwwVQnZ/ZiP2gOYjt7nbtTJoJbnP
7pS8B6nWHInnEspgPlvcJLZyDzZe1gZkXC+HnQ+8vpIte8D09ESl+pdyYHhE
lVPzew9ktUeCXo+VA/elhd+a03tQFFvNeFikAkQO9VLMru5B6aKQqsijCgjf
MghWICVBUWbkgQHxFRA3dS/ZnZoEWczPqNzuq4DkTpXSFkYSFCQbu6fDWAmZ
FaiN6wAJ4nrmZPBVthIKvktNGHKToPUrL1TOGFVCWfiJzRR+EnTRmKLsj1sl
1HnyMa0KkaCmJ+4zfQmV8NP+wFGFUyRI2jqFbx1XQpcRrbS7BAk6NaHWL9dZ
CQNqu8ot50hQJb7ckDJeCePyy3pciAQZPM7OubRYCXMnpmwMr5CgmcfXgyk3
KmHlYL9riioJepJ30nP5XyVsUbSFrtwmQey2z1pY1iuBbKkmTV6LBMl4ZbYa
/K0EusGicrf7JCg6fZ4wN1IJrE3Ezp8mJOivvot8bmslcBYkTHNakqDAkmzW
uqJK4E8M2zGwJUE5k+uPT8RUwvEAP9YURxKkEM94ddK5EsTeuhxbcSJBocrN
CbT6lSD9+Pk5eVcSpFRXHBchVQny2lbX3bxJkGuX9kMiTSUoXjUy+PmRBClf
QfxqvypAVVLTjvMzCeqIWCPziamAO0euexpEkqBujjDFZw8rwHBLOmM5mQQN
SItG+02Uw6Opk9VyGSToXGTJ9mRUOVh38ve45pGgsvPyEmfvlsOb73SknFUk
iPFebQNTdhm4he8dMGggQZ/Dx79W6pXBB88V4eQWEgTZcLOOvAzCjQbU5PpJ
UNf0YaYrXqUQr9Zu7DpKgjpP3jymWV4CKfJ1js3TJIg2i/xL52IxFB7MjH6w
tn/+zszreSiCX42uCy7MpChwvl1uLDgPAhUiLt/lIEVZaqvb/l65cDsjO+zY
IVIkrpY3mOmYA83Bo4o1J0iRUm2cfcTlLKgxuBBKfYUUGX9W6X17Lw1y17cv
eL0iRco9t7xmawPgmfmBEO33pEhnmcLQ5JsviPefnDvhRYrUsl09UcV7SK/Q
Dm4MIUX8nLwsFq2/ShN982cYskjR0GRR4rxvAA4WeBbgN02Kdv6RmJGppmL1
YO+p+wukqCdMw+G1Qzpmo42TP7NOigT7yBW0VYn4w3zrZAsFGXrl9USKVi8T
qxpMy8XQkyFaFTl2f90sTNdB8smGjQyRPv053Xc3G7sVnJZj4ydDG/xPpEol
c7Gi6NWPI0Jk6EoXb9IvrjxMFqU/kXmKDB14Unq0eD0PO7n4+t85T4aqYipn
yCMKsNx6/LjARTL0nLESbxkV4s1HxbIrSmTIwCWiYfJoEba/OTsWeI8MXRBW
Sh90L8aSFWSyJnpkaOGOkFLAqRK8JMntJ2VMho4G0nz3aijBxKT/xigtyBB/
zkPeaP1SbMWtfK7LhgxJbHEYE6dLsajvgw+JjmRop0piO8wC45k9h1H7N2RI
zOsOxcUxjL/a+slcdSNDYw/Wj1WLlGHT8UTfg75kiFBAnpqmW4YFNUtHJgPI
0EVxyuyfXmV4pKHzbH4YGRLiWC0+kr3vb+T/+HjE7O/PKUj80l2G9YkUI5pf
yZDCqmWW9EYZ5hXgPSvynQwpnQePP2zluDdIwudfDhlazVw7VSxcjj/TqAzX
F5OhCm561uhz5fjuS0PpsEoy5KimT/r5cjkOjjhAtV5PhuJJB2LvqJbjLlzT
eaeFDHkQG9lrbpRjjhHHBGIXGfp1oiJhcX/9HsVJO8Z+MkRxhvRbz5X980L9
iuajZOj0/IzTO7ly/EvJ70DtNBkSoLj4YfFUOea0uDAmsECGnCKFL53iKcea
vstZb9fI0OW7wwzyFPv4vie8798mQy9f39YRmS7D3a0ad2TJydEmUTV8q74M
c67QCoTQkqNZ3SCZ0sQyrMVRvLTMTI7opHL9X70pw2EyVhVqHPux46d/F9XL
cK82/6c0XnJ0bbci//CxMqwd5fLfQxFyZJj7oCfKHuOwcmnSqtPkSCMvd8OD
FOO+0akWfmly1GczeJjLtRTrCl+37r1Ijsq0fChK7Utw+LU9OKtMjqTbHqYe
Hi/Gvy0zmANvkiPPcNaDparFWC+D/ft1XXK06y1laEhThCPba52SDcmRPWPZ
J6xbiAdWn9+gfkSOiJsFTAwpBVhfduBPmR05MroYMCMunY8fVCaKSvqRo8I+
ZiVgyMHR45rb/kH7601oOUAqGw9T0zf9+bKPz8VQy0E7CxuqPrFI+kqOlmyj
VZpDMrBR59lk7gpyVJkponmjOQWbTtYdJ10lR6NUPM49Zz/jRNqX63pb5ChN
8eaW5X+BePLkqdpCUgr0l7PrUqCwPzaz/mj6jIkCSV3+HC5z/C1+9E8rYfI4
BRKyqX39H/NbsKSfPdqsTYHM3E+u3g2Mg9nnhRT0BhTo8YXI27OmCWA+5Tlx
9SEFWqG/+/umRBI8rBZOLn9KgdzTLi2M5iWD4RvT/3J8KFBDlcqtz5lEGP4j
RVj6RIGUX0gpBL/OgAe6lKtioRQo7NhVseVLmaB/Lj7/awIFcgvPmuSuyAKt
5WEIL6VAlKO98ZFvcvd9YsaRnioKxP9Hwoj2SB7ca3lLztFIgYY6F3uCi/NA
PY2v1u8XBZIW8dAKHs6Hdp6/X5v6KRB7x3eNBvMCuO1V6kU7RoFq55IoE/4U
gNpDvRvvFyiQYMFTk9HBQvjZKXqmbI0C9foSfNlvFsENxW3WnW0KlP5uUMs7
rwiaMhuXz5FTIpaiiINnuIpB5ciXTntaSjQ13V2w8LQYGvzM87KYKRH+ajBY
VFsMSrvnQhfYKZHF50edzgdKoNaS9uUpXkpk1nA2TFK7BK70deuaH6VEZQz2
g7WfS6Ba+atCkjAlOtDAwfBfSwko5jvwj4lRonNX2+UfkpTu+5mrZEekKJEI
/8VrRiKlcCGIY0zvPCW6sueK+VRKoYx8ojrsAiUyiQ4c+2xSCgq2OUm/rlKi
ayocBU2OpVAy5OJ54AYlMqUeWCl0KQW5m+oWt9Qp0cLoJpWJZykUlQhc/6BN
iV7XGB5odisFWdFlscYHlMjg2tm1zVelkB9WwULzkBLx3U44u2RRCmdpPy0p
PqZEe+QPCMV3SiHXwaDD+Sklekyab20oWQqSE2dyS59TIpKym0MLjKWQpU7y
eesNJRIitfr8bKgExCt/Ppdxo0RRr/5ab6eUQMZ/UTp2PpRIdaJ74LN1CZyJ
tpLP/ESJYvy8/uqIlUA6kwLf38/7+m0EX9IaL4ZTrxlJRaMoUWq+PG1iUDGk
zv4eMUvYv5+LPmuaUAwntFOrElIoUTWd0CWvkSIQPqviwZe/z8+a9lwLexEk
JXCb65ZSIsGe3nDexEIQOjCjElpFiTzxlZp7ZwpBcNGDmdBKiRpS57kIEgXA
l1ITTDVDifhFIw0sVnNBPSq/oGGBEi17c0nqq+SCV0Dy7w/rlOhf3kNW5y85
sPLyw9GDlFToi/6bZydOZkOD6r304/xUqLty678jTBlgPz9erXSPCt01+mt4
WiweUkd+TTHoUaGvkVO6KfdiYbirnr7ViAotj7SICb2MBlWcdkvLhgrZCpxT
NHsWCkf97fof+VAhussBzODkAj/+o1z1qqBC0odem+qTB2IyofWDN+up0DXq
0xxPs0KwDPe0LKGFCnUOO78o1P6CY8l+vP3ST4V8l9npnl2OwY7tgQypG1To
kXxuhfbJrzi91u209R4VYpgWiIxp+4ZHixxvS1JRI1pmlZZCmxR8I173czGB
GkkZBbWlBKVjQTtBwR9i1CijwG/IWzITaz/iuPpRiho1UZr25Q1nYj89GvO7
ctToWXHY1jnPLLx5ee57vzI1ooroogqqycZnZAfaYtSokcDxd3a8ujnYRKxl
1USDGrF/fnhMYzYHt3Bkn583pkazCz/lNdZyMRV9on6mxf7/viV29djk4fN7
Ic72ttTIJCrviNdEHrZe9oyXfU6NSI70+quo5+PEyZe1u2+o0YypZgB5UT7u
63s8U+FGje60CYeHchdglpb7jO6+1GiKOej4um0BvlJ164xKIDUiDF4vo64q
wC/zL91h/kKNdsxnyAsYC7G4bsvC/RhqdGzt0r8GlcL9/q/7gZhEjSbOPxDQ
eF+IY+OmT5KmU6NCtc33d7ILsfZV+/pb2dRoujw+P2+gELPNkj2MLaRGnK2r
W6/IinDDBz+K5TJq9OnTTaFIviL8Tpw39lItNbq9dCn9oHQRlu36CoE/qFFo
UeDXyctFeOm5VP9Y+77+v37WMt4swsmHKl5I9VIjcgYPHe9bRdiw/Aan2xA1
Uk44cXN/9MNcJn05XRP79/HcVjjsYhFuoTG7c/wPNZKZcKSU/q8Ie6SuLDgs
U6NHxiZhClxFGKk5f6j7R4003xaLlWwW4o1lRlEuEhp0guxmWHFnISaGhNU/
oqJB9843XFBOLsRm548/LGSgQY9ezrDZOBZi/sEsCnoCzX49UXt7CRXi7nco
VoeLBn3b2X7VSlqI/YV+QCofDQorfexwqqQAKzVo9W8fo0Fj6g/VLfb1z2N9
yhkpToOuX/5mP9qQj61y9nLmZWiQnTJ7jKpVPhbS8rkDQINsBz0sVunzcXB0
wochFRr0WTn+s610Hr6hKC76320a1B36M+Rt5f57mSqtd9akQTcnax9cUMnF
9qe7KQRMaJD07dXTuio5WKzdOPapBQ3y0lYM/leZjSfsF6HKhgb9OcVl13I2
G98tpXtp4kSDsI2TVwlrFpa8Lr+YFEKDnCsWT7R9IuK5hfoPGxE06D2zA9tw
23ccH3hPVDmeBnXpiXxjep6OD/x+8nCGSINsDuXOfclIwcvmsf2iDTSoIDB2
6mF/Ak5mOv3ydQsNWtuWP0GrG48NM4s4m7toUPWJGoGXXbG47V/HnSejNCiA
IMfz7W0UzvSgbsjYpkF+bvL8Z8Y/YetEy1zp07RI6l5yu0XJCxj4yRPEJE2L
JtulXBIUXOD6v4anE3K0yHvIi43A7g0nVEX+C75Gi1rWn+z13giEscXxlFUT
WlQcalx4uzAabvMEef2wpEXg49rIcjsWyhUVHyU83c/vXxyUPxoHkSGxQned
aVGn7Xo+3XIiaMjfj8kOp0X3b+Jr3LmpUGPK9NYnjhYdcVESesGaDpL+JfrG
ybSIqJHI6230HVhGeXgP5NOirnTXyROrRHBiaNycLaVFimcme8/4ZcAfqRc9
ldW0SELJLWJYIBMaPLqDn7bTItPcjwxJclkgk+lup9JLi/7u0ITblGVBUp+0
usAwLeLjONRxWyEbOCgnxLcmaZGNXveqSG42uIgFsbbP06KLbZfou4/nwJKG
4kLy6r4enBf+QkAOGDgvN7/b3l8n/la/spEDCh23fMTp6FBFKF9bQ3oupO6Q
WNCx0qFeXrpKHpI84DlOVB45SId2QuaWiNfywEvtvnDhYTr0hN7uq+OHPNh4
zkT96Rgd0hGZO2rUmAemcSXjj0TpUJxNUoQhaT50NllWXZCgQz99p29bnMkH
xTWeOC5ZOtT88IzTU818yORrdF5EdMguakHv6fN84Fd+8aD+Kh0KFS2VNAnI
Bz9bEYi5QYfaBEeULyfmw+6X7kPP79Kh8Wq9adbMfLCsdt9W06VDL5l0jBpz
86F3XrpP2IgOMWrR0z/LzgclzokCEnM6lB64IsmSkg+5F4I+d1vTIbnhNMnE
sHw4ZqHoQHSgQ0KvGLQV3udDYODyXQ8nOhRIqPgzYpwPZKWxkg9c6ZBgyeNT
0ZAP1pO3CDI+dGhyhf+qCyEfBlhIl5gD6BDhjLZ61FAeqMoSWyZD6ZBYjr06
eVIeFBnd/46j6dCljxFCVaZ5cMKX6UNI0r4eicfer/PlwefcEssn6XTo67rj
SnZbLlANWapczaFDlE8cfrLv+0E7Wt4TfMV0aCFA56TUsf35WPfFZHM9HQpi
eqcteD8HylxFahJb6NDmOY1u8eVsOP29O97p1z6/rXzO187ZwEB21lBsnA6Z
WEc33fHNggIH8jsTs3QosqW1KpgxC0z//LwUuUSH3N82sPZ5ZEJZt9kxJhJ6
pCZ8sJjCJgOefg+b+sNNjzwP3Svp4kwH/mMPexKO0KP3NJ6Sr9tSoSlMokFP
mB5Rff7vdZdLCgi5NaX8kKJH1yps7/J3foVe3V2rNDV6FMp+dndELA7c2xru
m2jQI5Mc9Ztj+TEgqRSidkifHr1jYYotVoiGDxJnxH0t6NEXqspSqTdhcIHO
cNXSjR59g4Wqy+4+8DWv+qVoMT3S+Hbxj+uIC7576pPlWAU9Gtk9li296YXJ
4vT1wuvpUQFj25Wq9/5Y98O6AsMvelQt+8QcOQVjZhMRsrlFevRXeTImlyYG
F/euLsVt0CO61zPkCVax2EytYlRnjx7tRAkvdTTH4YrzOtWNDAzoz4FG+fev
ErE9m69HynEGFFsvzKnyPgULeGg9NxJjQEF9375bZKTilp1j5jxSDEjVkq6I
41caPjFdquJ9kQE9bzSinicn4l/63nKXlBkQ0W1cR9yTiF06NE5t3WRAvka5
esm0GXgALzBZ6DEghzmdgsytDOwtVbJ31JgBPZW2UKF8nIllUjwXes0Z0Jsj
bXQsPZl4nP/e8CcbBlRqcLomD7Lwp+CjbdccGVBgxbX2kegsDAx/K8jeMCCg
NGF/vp2F55yLsgpdGRAfJye58e1sfPmxetCJAAZkMxVcPD6XjZ99KiJ5EsqA
1hPPX54XzcHxeUcts6IYUDnnxQd1D3Nw+2/PX+sJDGhgQw/MInIwGdniRblU
BpQIi5qVP3Kw+HHN9LeZDMhunNS8ZSMHG6hirup8BnSEYdjB/XAu9rcRcqXF
DOjT9fetwwq5uCzYd+F6NQPq2PVk6dXKxX+LVnQ+NTIgrWs7XJZPcvHhYZ3a
rlYGtHgw73DQm1x8g6pSnKebAfE3OH2545WLX588EXl/gAF1z3VqJvnl4lS1
j7TxYwxImtze/ON+/Ntu49nUDAOiy3kjdmB/P/2X+0OiiwzI47uOqsR+Ptmy
GhWbdQbkHXk9a9kqFz8aP5WXs8OA4nMLPuvs4/lMF3R0k5wRHdc+ZG+7j7fu
9LavAh0jorMrorqwz2dd3ejfOxZGdE1hR7F1n6/QiwbjWg5GlHPI46FYcw6+
F/VfC/0hRnTag3bAODIHu1Z9Pq8mwIiosguuv3uUg7On9xIDRRgRNVewb9Dp
HDzK9JCt5zQjSi5Tj01fyMZsks2vD0kzosoXrIUDqdn7bTlcPfEiIwpfOazf
zJGNo+PIy2aUGNFY9/ZMTlUWbqkzP3n6JiOKmbazobDKwmKEc2T5Ovv5wgUv
iGdlYj2Z6MfbBoyoXlWQ5uLNTOyjR92DzBhRa9ZoHtdkBp5N6vxe/4wRUT6Q
DvGhy8Bf5Wz1+nwZ0T+yz89UrqbjboOeOr5ARsTxlf2h0MU0TO2OJI3DGJGI
z+LQY+lUbNrKRP8ncR/PlBHbTYZkLGCakr+LGVHFuaOfdp4l4NvebIKXahhR
39NM4c6L8fgd8bmfexMj8vzCd/IOQxwe2rxqytLDiDoMO1KfBkTjSL8xwtEl
RjT6ji4mcDUYcxYcenJZkAmxn+WpULLTx7tGSTysJ5nQSxl3naGpGzDG9F/d
7/+Y0MPih3KfYq2AaKx45BkwobrOgA9UjO/hKotFe6w2E9IMzJQVzAkE0aKV
N1YGTOi2a/xTJpsQYDN1EpU1Y0LLFOm7x46FwUDRR9dWOyZk/tNZddQ2Cuwf
5p8l+ciEXmnaB0rUxYMu28WxxhAmVByV/LdkOwEuljT6h0Qyof8Gfe5+OJEE
TITBabFUJuT8hru9yPobrJSYBW9mMqG5sGPBLz2Sodds6WJNAROKqesYu/I5
BRJLKcP1apmQGn36n4HINPB55Kck0syE3lj+J3MkKB1sD3CtrnQwIYt54h3t
d99BwVz0hs8IE+q0ozTRjSaCIHvupsb0fv6sSZtsmgygK4MkgQUm9OHWkxw2
ywzoZL9DUrTDhFKeatx8te83Cst+p7pRMKO3A1t+mg6ZEG1hqnWbnhmpleRO
/q7OBDeOBcrDbMzoWKfL51WmLLAsf545zcmM9m4W2vrfzoLbluT3c/iY0QTj
k55w/32/ctCX3lmIGQXKOtbQ12fB4QqOfNVTzMjp/PyPn1tZQPE42phTkhmt
iCoc6RfOhpmDJ1jHZJkRnWLNRxG1bGipyCr5foEZ6ftsf0q1yYbcx/LmL5WY
EfUXPrn7vtkQzlnLcfUmM0r/a60sF5cN7yrVKtnuMaOqgQ1elJUNZla9TwZ0
mdESSUepWUk23OAy5k02YkbuinT9OeXZIFn1p87OnBlpD/5tEC7LBu4nDnYX
bJhR3xuWt1X52UDCTXqU0XGfr3xCsG9KNkxUeTV3OzGjhxNByl6fs6HpyYGX
8a7MSMKWyrbiTTZkckcet/ZhRvZWNi5gkA2fq493nA/Y189GzZdBPhucrDPe
UocxI76UO6ekCdlgxHP+VHs0M/qvWySoYTQLlGqqeiKTmFH73563PelZIGZz
w808nRktMhDFnz3LggO83eLSOcwoTAQ/TpPMgs0ag0HSYmY0a/TvSejfTBiy
mfX+UcGMWGOGZq8nZEINr51MaD0zYnzdSjpyNxM+2Xp8PPOLGUlf/eTA8DUD
NptS8z36mVG3ad1hUMsAw+Otg0OjzEjy7LMq9RUiSPzmEvu4sI+/oiTZ6wwR
ZmLvjm9QsCC0Ehy+t54Kh1smNwRpWNBM6aVERYZUuL3znOEWPQu68fq3BQV3
ChRpREp8Y2VBSSxTz/8c/QY+DJPOWodZkPetoK33i/FQdu55kOsRFiR8I1M+
szsOVkzpv2UIsqC8A6olT4piQbf8dAvtSRZ0O5yOPf9ZNJyydzxceJYFnb55
evzA6xBoHqQt4r7Fggb+pqzpcD0BMsbw5ivqLKj78OQV49B7IC0rNmKrwYJe
VnL84llTw5GBt2kb9VhQuVOZ5vkVB/xE+YvGS3MWlNDFeV7ksR+Otz9lkfSY
BYU8Oxljx/0Jd8dhp3ZrFuSq1DS74RiI0e5owkkHFsQb5/EyQiAUs2SJrvS9
Z0HuB5WXR5hjsOJQKTWNOwt6khp/y1swFjsy3uKR9GJBmvKlL+9K7tezh3YX
ffxZ0Otz8Q7XFRPwgSDqe/kBLIjFRblv51IiVqoIfTQWzIJMJPZUOuWTcAZv
qb9cBAuSYNdpY+L7hieU1eLNolnQ1nWlhD3KZMztMJIXGMeCDp1W45aaSMbv
WqkG576xID1ndtbIj6k4d/fzEmcaCxKNaDlqpZuGZ06epLpM3Md3PISxmC8d
33a7eSoid19v1Tjg8/uOE7UWlAsKWBAt19p2PQ8R/xP9aNpZzILYOGXEOC2J
WJVE/P0iZkGl5IeKzfKJOLq9LYqxkgWVqB8SSiHJwMuJT4tFaljQs1cnJn4q
ZuArLw70XK5nQQWJG0/rXDLwH/57bE4/WRB7mNvA3noGRitrYmFtLOihWEmB
0MlMHFgbopLbyYJ2f7sZL2pl4skwGbO27n19W24/u+eSiWWtelzm+1hQhv+2
1/XkTPzhwosYukEWdG3xgebPxkw8fICnVGiEBS2RZX3pnMrEklNFvRfH9/Vs
9hfUIc3CHkW66/pTLOhj+q92HfYs/PvDDuHlLAvCZ2TCOwSz8GnDyDMh8yyI
4onnu8rTWfidFFzPWmRBfVN9Ecels3AXzdCjnyssaHZO5SCpTBYW+f3WbXad
BR3PDRC5JZWFX30/Eke9xYIeP9bj5xbb77/vKrDALgvyvXlX4/7RLCxwz+g3
kLKi5ivbMsfYsrC9CMU/HQpW5Hr3vLzNTiZu2I5nd6RmRfcU8ieVxzLxoZbL
4oF0rGhqbLY6tyYTW8dN3CAysqInC5uWZfGZuMre3aKJhRW1Xr3lYO2UiQ9e
E/aYIrAiKUbSd613MrH5ofp4ioOs6G7TuMhfwUxcuvConJ+bFWlF+NB0LWZg
tiq6AblDrIiGYYQYUJiBTUJSNjX5WVF0RGKK9JsMzKDwR+KjECu6SdJhY7FN
xPdZP6ilibCik63TG4dziDhzTOxxvSgrCn59+sLWIyLW8rZOJJXYj3eaUtb8
v+NUfdbKQ9Ks6KxcZK3fWDomEc8cPHeOFbXkXtU49F86Tuxe5rQFVsQ1tZPd
kJOKV445eI+osCIMhdw5tt+w0r+DX3dvsCJ5sfNbogFf8Zem/Cru26zoRN+7
MeH0JHzx6ebObU1WdPi1YalvRwL2K3ttXWnMii7qHaG0no7BJ3Rc7sa/ZkU7
m+L2nu2fsJZNLhuFMytquEpce/XYH3u4T/00cmFFv8eJBmHUPng8S/WagPe+
fnd1SqzU3uFoBnaI/cyK/N4NkKyEXgL20gTh6CxW5G9twcxbGwCKHb/G93JZ
kZ1ip44TRzDYztDG3S9kRYQhWq1+/c/QwmF1iK+cFX14+t82e3c4eD2RZots
ZkUByxJvfqbFQoGr2c+dVlZEn364mywjDqa+hPnodbKiV1EfLuqmx8Plul2q
Q79Z0aB5TYttcCKQHKnd+jLNinpJqlv/Y0+G02f/5W/NsSK2E7v0viPJoH/9
pL3OAiu6Y6hWJ/B1v/4+91vgXmdFztxDr6R50mDGrzztxeY+X7KzAbfq0oAz
cdm8d4cVsaQtvp2wTAf7No3xUAo2lHfwjXPXl+8QP+UZ+4+aDbkuuDAusRGh
fbfovhY9GzrX/eae2R0ikLHP8xYwsSEv0Ufz8n5EOHOSv5eTjQ39ZtJeM6oh
wv0Lt0Mc2dnQc63Hw00bRPig4aLezcmG2JXJHC2FMqD4cS6rDC8bYvSO6j17
MwNm3081h/CxoQhqe5djTzOAO4zbZ/0oG5rufnf91KcMUCKqKmsIsaFHOzct
lVIzwKHGiSpPhA2RWd5xsCnPgMTfxEqOU2wo/PqcSXxrBnQsjby1P8OG/pzb
9R/4nQHktOwKXRJs6Kf1iazDoxkgznd1S+osG5oUSJoyHsuAB1LP84Nk2dAb
kpz0zKEM8FNJsVuVZ0M0l7JG6LozoNSgX/zuBTZUXdBWZtOQAXMOzAvZimyo
W8psZC4vA3g+XEg7oMSGuigGz7+PzoBr8U/Nn6mwIf/jqtzyLhngWJhwvOMG
G5onxPELGmVAUsuvMYnbbMh2xkfxknwGdE3QxgbcZUO8R0YbEtkyoEbdM7xA
kw0dNZhYSp4gQm4FTcigDhsKIxlcSMolQuIZj4+U99lQ71wyTn5HhOBIap+T
hmwo6uszlfJrRHBjcHe7ZcKG5G0orTaZiGD/gsrZwYwN8fwo7WyM/A5371Ha
V1qxoeVfBktiXumgWOViPW3Dho5E2G6QraaBpDiFBbMdGwoKajdt1EyDA0zk
D3ResiGK2vLkPvpU6KgmubbszoYUYLi9TPAbVEm8VeTy3n8PgtUKyzpfITtm
TwE+sCGOoN0eV98kCHy9K+EdyIbuXPPe/jKUAHektg8JxLAhR7f29beqsdAW
v754u5ANyTDUp6j/DoQKNoc5xxI2FHNe+MFy4yfIfLs2EVnGhm6QlI/k5fnD
J93VvpkaNuS0t7v8jN4Tbh1Yrn7Xvs+nbpPl73FraHk/H5o5x4YojSpFybI8
cdni48Duv/vnwz7lXujwxcT7fz7sLrGhBA6fFLs1f+x/fu79tX/79xdfWHiN
JAjfXJ5+PEJJQEWmx5qVGsOxgsEjMxpaAko/t+x8OjUSi/2cMhRjIKBtz89S
bhejMVPKpMYLNgLqPPpX054pFjcbjl9g4yOgHj1eslbLBDxMkbQRdJSA6DxY
zG1vJOKVRLPvXEIE9KUl6QGNSBLmmp3lPXKKgMLarhscrPuKRX3T2uPPEFDa
NYkJTp9vWOH0Ey9hScK+v4hl5VdKxsZPl9ZPnyegw2bLQhZJKdiBPTs9S4GA
TohP6KlcS8VeeXYmZy8SENtU+OKjsVQcrnWWt+gyAZXZsKZ/sUvD37c22hSU
CcheAg7n76ThiohCzwrVffw0qiGhr9JxB7xCV9QIKKOi6+KhpXQ8OSy/Xn+H
gBZ1zYQF9L/jzfd7adc1COi1GaX0h7LvmFGo3LhVm4Bks+cFYhmImL/uHc9d
fQIaZfU+eFCSiMXNFdu6DQhoIKy778s9Ir7MQOWpa0JAR6Squ44/I2LN9FoY
MiMg1d/SC1k+RGyu5rlmZElALNsxAbLRRPx66Vra5JP9/3edyMhLJ2L/QAZj
i6cE9LjpVqnwvh+Jk27m/mtPQA52J3J9iok4t9uv1fYFAfERD3GNFRFx3Ytb
HmuvCUj9l/TcmVwi7uMlwAtnAppz3c6zTyHi+dKO1R0XArJ+2OlW+IWISQyC
U509COhe0b8RMnciJpBrGlH6EFDOraV2jcdELJTAxe3pR0BHZxP6Km4Q8bmr
fS0MAQTEQbW2dOPkvl+aDnf3D97Hd2XOlYaciPW99RUOhBGQpufywGbKd2xz
in81JIKA5I0Dpp8rfccuP4dTeGIIiKv81tvvfek42CbOMCqegJxyqPOwSTou
zhFqSUwhICUqhTrG+2n4p8aU24nvBFQ5r8oZ05yKR/59k0/PJCBJ4vCvAqlU
TK1wKiWngIAU10NvXJzd94tD8wbnSggoVDtNi0c2GYu+I3KWlBHQfZkGbVXn
b/h2jYRbVe1+fFuwL+ZfEjYxW5VTaiSg01yVDhdOJmFHurzlxuZ9/fpTD5++
l4gjbsgatHcSkOsY6WuS0Hg81YXkRkYJiPUdX9J/vdF405Fs2WSSgChkBK+0
F0VhRp6qb9MzBHT5m7u1SWEEFr9/9eDiIgFtxtbZP4oKxZdJaZufrRJQ//Hr
mofcQ7BmXIPLxsb++7ynwu5gFoTNL/ucf7VNQPUS3Cq8igH49eT1pb09Ajog
BgeyuT/i/wHPlo3C
          "]]}, "Charting`Private`Tag#1"], 
       Annotation[{
         Directive[
          Opacity[1.], 
          AbsoluteThickness[2], 
          RGBColor[0, 1, 0]], 
         Line[CompressedData["
1:eJwVl3dcDd4bx7v3NmjcexsqoamQSkV8aZwGDSWJhmhKEipJ0hRFVFJJk7T3
vLe0z3O1UBootMeVbNLS/N3fX+f1/uc8z+fzeV6vcx4pJw/zs0Q2NrZwAhvb
/8/Az0em19YE4crR447X69LxpL/w7MCyIBzI1Me749KxKXVk/tk/QbA67SVc
5ZaOJfd7rnj8FYSJT4rTghvT8fN7setGJwXh+zevI5pXnuJ1Su/F4bUgGF3W
WpVQf4IfejsY30gRhGPa14RRUiIuJFzJYtsnCGIdsneUc8Ixx1kD1Y22AqDB
OMPjJBSD3tipWH07KQDJJxRyRkJj0BPrTQENlgIgO/l81mo2Bu01+dXiaCYA
wpE6Fnv6YpHL7oSTBXoCQC0newUmPEQvCJ9vqMsLAFw6JntKJBFFPrndZTvP
D2bis/F32dOQ4IeWixkx/HCXwalyeGcOgp3p4aH3+YGdf8YuzDYHXQwOyHKJ
4AfOPY48qdE5qFVu96B8GD/sdanpOfk3B/ldfWpM8+WHwzWH6tbV5KJxAX/5
Znt+0E0Oa2do5KOKI8pTnxT5YW1MdGijdBGyT+dhfyHPDzmRmrkvTYsQ7+yk
RME2fhiwezh+0L8IuaQ+tnKX4gcbEYH6lLdFSOwbd9ucED8Y1sj5NIQUo5vh
n7K5lqnQyjE5c/ZtCTJvSj6z4xUVZJkXbtzMKkNb3zGH21qpwN5SeK6kugzN
MZVsXJqoEH45NK2iowwlcTaZZdZTQdzg5bjuTBkaNfqmuaWUCkcFK2f9dMrR
pW51Uf6HVLjsqGjK+64caY2FxZU+oEKKoKR96qdyRJ3uIptGUcGisvAS23w5
ogs6c0TcpkKR1js/vY0VaNEycpr9OhVqZDoUSk5VoPChwY4FWypwyMZ/Gnpf
gWx+yhkm2FCBMP0nOnqyAimseTapWVHBMgm0+WcrUJckR62XGRWULEpbbvHT
kLCzYu53XSpUbf40IW5IQ1Pe16QjEBU8DvDpH7agoZowxuMdGlR4YXT9o54T
DZ3OtXjookaFm73J5U/9aSjza2DI6DYqTBX84lsqpCHvpbbloK1U4OGRGY55
RkP6vAK+W6SoQJtYLzf7nIa+Kua424hR4a9fsaHkRxpSvtx56h0vFfxH5GVJ
JDoi3hR977WeClqRpUvzvHT0LtbJnJ+TCndszhU/E6ajn64/YlJXKSA0LD70
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
RexZ/bUudltLuOErgZ8ctrH4f0nMkPY=
          "]], 
         Line[CompressedData["
1:eJwVlnk4lG8Xx2fGlm1mmCJKWhQVLUJInZsWKpWUQihrSBuyxK+SrcWaLUui
rCEajy1yz8gWJVkqpDCDEKlsyfLO+9dzfa57Oed8v+c+17PG5rKxPYVEIvmR
SaT/f+/UzjabyjuD23/95xTPcuHEjs8VQboBwOfiZ9FhxYXijtO3g33uQdT7
3MREHouzRtZVm0fA4jbj80d4DFE5QdWeUSCwl4PHLLlw1eHCUHV0LDg9GUq/
yeMnWpsNa17EA6NdUJbE4zaxkec1TUnww2Bi5RULLgj2PJOoHXkMqcb++e/P
cCHJTF3bNiAVdJUftazisfremAscyaeQ+Ecv2NKcC03Kk0m2qWlwPyu06b4Z
F0ikokXbykxAWqMyJae5ED+0dDvXMBtEL+asJk5xQbXV3cau6xm0a1njFBMu
2GWo1djN5AEpSazR4AQX5sOjp7hB+fAZnHfxG3OhUWc2inmvACqiwg/lG/H2
bzCvUZVhwoSm0JG2I1zYtkLkq2sPE7jjN/cdNeSdp72cYmYWwuAqcU7JIS7E
/pVR2qFRBLt6i1eZ63Oh7m3HvR0nSuF6QtHHTuCCo1dn3ZnNZRAVkW+dvpsL
SxS6+AP4XkLWL596i11cOOTz5UZbYTnIlR3SeqDBhbcbv7leW4pBVkNWbrky
F1zav+U/+oFBwmzlv4MbuRCErkzZ2LAg3eXVJ8cNXFD8cWXHfW02KDXlpFxc
zYu31zWva7gK3jhNU6IZXNCM/93489RriPza6LCFzov/03WY7/VrKNBYP1Ek
xoXsBDdF5cRq0Lqr8zREgAvDv9xTfQ/XwtvYdpLZFAdcUjxj5HLfgPSGxgi3
Ng7oTE0Xbl/eAPaZP+I57zkgZujVsj+gAQy7jmnrNnIgb9qLdsmiEb5RH56r
YXNg7Oj1u5Vi76CbrqD0O48DpTcqK/M1mqFt+5Jt/bc5kJK98K7MpRmExs3T
Vf/jwJ22Pd2vnzRD7rVPey55csB0E/73ifoBOA0FAgUXOPC3HWuSBj+A5VWF
easTHNBWYTON4loh2/lMrZs8B9TbPsZWvmkFY2+SlJwMB7b5/LiuPNcK94Kv
upRIcmDDG+m9S6zbYMIp/QQW4ADD/lIr3tQOX5UiZeRG+uBH0oqJLZUfwX6K
2CVT2AePxTzUxfs7wL7v+pClZh8kFN6X8ZHuhN9xpyk62/og1jx1/vvBTtDZ
4+0tptQHIVlva6qfd8JEZjUzQLoPvPatO+Xr1QXD43qZrZO9YOzb7DEi2g0x
m84ETOX3AsVj2Rc7mR5IXtmtnSPbC+bnnrWUqvXA/n5b45X0XmAegjdiRj1Q
whd96qZAL9jIOxUTQT1Qb/7u4orxHqiqr4jgn+gBh3+JnXnVPeC/wm5/WlMv
9KzKFDe80AP8bOZzjj8HyuU7Tg9bfgMhMSM/m7EBSPngs2ZQ6Qv493zc6/p0
FFpdI6zGVrdDQWKQ0Y3fv6DFsfzdZae3cPmJHZ17ahK8wk7r5/SXQ5h3fFKY
7SSczf6su+FmOTw3alLSujIJRfqNie3Ly2FsYadu2N1JqMtZbdpq+BJczoi6
alZMQsGsLJiWlILzUmZryJopaKlenzAeWwQOQYux6j+mQKew3o4ulA9Blmrr
emam4FPCoYwBg+eQoeaUf09gGhzKxM7r3c+D/r6Wum+rpmGQ8C4NlcgFO8iY
uXt8GkordybdU8gGmxlD86/F0/D3jkzNB7unYOWcIBfsNwMPgwOfzmRGwL8O
4aZfoTOwweykYHZeGDw86H3DImEG5K/oPMLiIfBByfTb9sIZeLtg8ITRHgT7
BpelfuHOgG5JnqcO2Rs22kUqqBr8hW5395CzDZfwhOWdzd3UWXj8YF54eHkc
jng33aW/YhZun7+/6Z3uQ6yy+3wIU3EWfAufLrVwiscOKw+MBqNZOLPnn6E3
kYg7OvnyVV1nIT3eTvCwXAquPH1T9U77LNTmpF98fTsN3z3uobUj6R8YGeQT
K+tz8YO3m1xys//BC+Ki17rjeThJ/1vy+pJ/sGJlOsW4Iw8X7DbgX97yD7Lv
MPMVBp/jzxtl388JzcHsP1nzQ74FWIlSaVfrNgftDRfwOm8mVv3PNQ785iAv
YVj7XTET68xsaCgNm4OxIef7QhNMbDQWvjUnew407ikLbblYiD07rWfDv81B
k5r0qj3mBK5lCkSYHZ6HJscaq8PyxbhZ5WVVi+k8yL9RrB03KcadWZcmDzvM
Q1xLaodCSDEeS/5kvsdvHm5KMhI0p4ux1P3s9etK5iHsVH6daH0Jtrc9Uv5j
7QJ44oz5IyfLMP/SmIGbswuwfR9LvFOqAkuO3aBKCi1CU2r5Tz+dCrym3lEj
jbEIivqBlTXWFXiPr05QvfIiDN5fprQmpwJ7cznrJc4uQsKMs6ei1is8Rqja
P3m9CM88MmI89CrxfNjKULXmRdBy1zz8zboSizkJFtV+WQT7kAIj7q1KvFGu
k39kchECnFf4vH5ViZlVqEVmKQklt9exPqli/GPT96s2B0jIzteAoyrAwhPS
3YE5hiSkuqZS/Z0EC//jb4mfMCYh72YNdY1VLCzyrZwddJaEgqKyz7trsLBi
VLhEjhcJjdmEcZ7YsfCWWwHrJ26QkJfXF27hZRbWuOittTuQhBbXHpuIus7C
+/Rtrd9HkpCTwwZ3djgL2/zTePHnGQmphcQHtZawsNP3zTU6L0goHzoCrdgs
fKV9dUdgCQnRFY4vKWtg4Zv5IuTl1SQ0A4c+ffnCwkm2X410ukloSQP1au8C
C6cZtdoFckiIUhF3ZliQjXN213s1DZHQ4ZNzx19T2filNDPl3BQJlay2ye2X
Y+NPjYHjATQyyjgUsmVMi42j9zzabyJFRq5rvu7k12Vj4xdEwno5MkJiTx73
6bNxUyxnX+0mMiJdl5icOcnGIcL/4mO3k5FHgqDM9jNsfMhX8qeDJhkdO0la
omrNxrXWuvFCB8jIImW6JMyFjQPaTMc+GZJRUsRF5vBVNtbTv7I36wQZHZX9
PEzzZONK5cejBtZklOfeFFJ8i419HxfryTiSkfPTSVXNQDbWlmyKG7pERpfs
9SP877Jx8fSc7j1fMtLy44x6RrKxu/PSOHN/MnJc2qOyJoaNVbs3/9h0j4wO
9DunRT9k4/Fje3X/RZDRc6njri2JbPy8yjy2MY6M/AtYpZ3JbOyi7jqSmExG
nZoG8XmpbLwp6y5ySScjS8OP6ofT2Pi7bGqMTi4ZzaqXFRRmsHFGaOmwWCEZ
NQcmKw9msbEdqRm6y8jIKfPB2/5nbLzWbTA6j0VG6p4kIj+XjXv6F4b+qyMj
/U8Fgvufs3GyqRQcbSIjh70N39Pz2diiUSV6VTsZ2do132gpYGPZPfuHxrrI
qOjJ09GGF2z8ucBiD+4jI7vSW+bhTDaOXeceFT7Eu0+PNCJfyMYnY+9/PztO
RkFGUjW+PJYUfrp72zTPzykJWgaPm31ePiAt8PzuSPqZyOOwsQ+DzfwUdJf1
MtSKx4bWQzqpohREX/2GPsa7X6SN9OCqJAV9zrqRcojH9QeWD+rKUFB267Cd
Oy+foLKtOpKrKUjl4rWgC7x89ynrR/ZtoKBVa76qbOPVQ3lsNcBUoaAifp2A
qjw2Zkl47PJXo6Dbq+eZa3l63AgIjTixi4IS//ZzjHh66Uyn9a/To6AVshK6
R3h6zjpVaE8YUJB0/NiENE9vj2Mj3OhTFBQwu1FMhuePWhVF296SguTv0WqP
8fz7rSYbrm5HQbPdRf4mPH8vyR7U+niVgnRsh182RbOxcui5sAwvCqqKjQ/V
4/XL8KInx+MmBZnHH5IKCmVjh/6MUOlQCuocdF/05fWbgmll32AUBUlOPCzf
5sfGfQ3tO0sTKKjjOKOf8GVjqwL+PtMsCvoR1ai91Y2NTXxsNBJe8/ThPpP7
Zcnz59FSwek3FNSl/io2wpSNP+La9hPNFPTdPOyr0Ak2PsW/+Zp4NwUx87de
v8F7X6ahfwpvTfHWzy43jNjCxg/z0/275yjI7Kxm2m9Fnv8fTp/Q5uNDJvsM
6VvWsLGZVMXvPzQ+9FBhsWEbg43NHwdsP7+RD2kTYvbOkyycwNYgV2/lQ4Pm
bybjR1m4i/O9ebUGH1qmqT36tJ+FLZSOXOnU40MGdW6v9NtZ2PLFsvwjFnzI
LHjwWSuThc+9zlBWC+dD8d3f49adZ+GUftO5iBg+9LhjqT7VkoV7hUTfjiby
ofyVFKWPxrx5Znj5QmYWHyJfPKC5sJuFbdt3PpOt4kMzt+VyCUkWdhisVyRP
8iG/Nmv3+gsYu4iOrG0y50cLNyI4um9e4RHvl/yi1vwoxLt1/FneK+z8/e6A
/nl+1OxNr/0S+Qqfr1F6xnbjR7rHlxxMMnuFbW46bC8K4UcOT3bqxgxUYLM/
vZBUyY9E+YdUqqfK8YGuzxbOawWQjudc2pvfZVg+pzZWcFgAOUa32UZeLsIn
H5eWNYwLoIz3Th7z+4vwvahnX8KmBZDbOnnzAyuL8IRP2FppAUHU9asx60o9
gRsMTz1XXC2IUnLp4+ryBPYY668xOCWIbiUmJkzXMvG77QKT96oEURGz13SW
UoB9SveeoCUKoY8JOeYlUWn4SoZLscZWYbS5GdMWz5vA1/crYqgawkgyjxt3
U/McHPnb4DagI4x+7Ezf1VJmD5sMN26PPSSMkr9SgyzMrgD3V3/OpL0wYnn0
Oovs8YHTu8+mEknCiHby4EEr0zuwp+14iKqICPIS5/23+8dC7jzpgoiECHLe
hEY9FOJghWLBwT5pESQZnWAWVx0HM95UoQfrRdCHKKtoEb54YMo3+v1CIuij
33HxKK9EWH9hn2eBpwiKm5Cv81mbAmKUnTZb+kXQtXtHFSdy06DMk+/EwIgI
+lJ+bRH9SgOH0fd7k3+LoOHG8apt6unA+uy4nkoSRXUxwcNT5englp/wfVRW
FL2wu7WMVpMBnRYLl/KMRJET40TsfHUWBLc0nLU/LYrchHHxLr5sUDOIM5Kz
EkUTr7Pql+pmQ9iObaqhF0TRzXb50ZjybNAVsZl0CRJFZ56OMOtynkFWSY2P
coUoGqiOl77rlQsmKg9cuFWiyI5PlqpXkAuUp1aWSW9EkVbeuEb4YC5YhE3v
EfskinZcL07knswDmv1Gyo9fomjvxqWWVzc9Bw/J0Ds5imJoT/PB/dWsfNh/
8WTMpigx5GBa6E4zfAHuD8pJl+PF0JWzFYe9z76AtJK1LoWPxdDYrWcCBa4v
gEL5paeTK4ZqFcTr/B++AFZs6PiRGjE0ULZerqr3BWizag9fnRZD01n3E+44
M8GpX6WkaF4M/XHo+lN8nQkPRWLWzvKJI63nonMF95gwfdL27226OGoKkOsW
esYEYmgxI3qjODIxemEGA0zYwtCilJ4RR1z228iGk4VgqZlycc5aHFGLLrTl
WRdCiKVQB3IUR2yDa1SLS4Uwktme/8ZdHKWXfzwsE1wIWTqull2h4shJb62O
VHEhfLbuqJePFkfSTIFgI3YhCAUjNbsEcSQ7OpJo8rYQHD5QRUczxNFZ2fVS
rN5CWOeQU7qAxVGffZGQlAgBxvclFfbWiqPtNmzzDAYBtwu8w4PfiqOjUVOO
ZDkCemb1Hegd4mik90qp9FYCksO5jLW/xZHN2NKDNUYEvCMO33SYEUeCO+7F
5ZgSMNfBHH62II5G9e4XWJwj4IyCH3uHKBUVB9UZy18mYHmZ3OX9ClR08vjx
gQ33CFiwzVwhsZmKTAKOGn6PIIBL3V7/ZTsV6USeNbsQR0CB3b417kBFv+1k
I4ufEhBLa3oHB6jISPnOhxvZBPi+PH1d9AgVKUtFcpfkE6BPv9D6xJyKeo78
IGzKCFAun7h5yZqKUkzEQlUrCZB0uKGs7UhFGVttLlZXETBDX9IhcJmKpkq5
dsvrCPhaHhn44RoVqcps8t/SSEC1wwrVR75UlHjm/GfB9wQ8k0j/6ujPOy94
5VpqCwEe50t3kiKpyCVJ/51cBwEWknrcxjgqmtRpyV3sIkDvVWNEXDIVqX1K
lkv7SoCSo8lu23QqqheJ2iHaSwCV8W1oSy4VfbPZxqfOIWDilWPsLJOKpLhR
qWv6Ceh0/K1XW0ZF/x5eU/gwQACL4fszkkVFenJKT/Z+JyCjUiDJso6K7is+
3O49RECIU7jBxiYqGpAwHL46TIDrUpnJiTYqGjpny1UZIcAUP0lldVHRrYOx
mnk83uOsfDSkj4rs1dVJ4zxWWFY8e3qIiuCAkskUj0VYkLlunIp8P40dZ/F4
3PnNiZ9TVNS0kCxxlMfty06QyuepyFa0P/8xL95L1pfcIH4aauTjO1jEyyfl
goOZsSgNJa5t/hvGyzdIalxglSQNVR4v/aY8SIAL25s5tJyG/NPKl4fz6jV2
4TtbJE9Dts0XXxfx9NCUDhX120BDd9ImF1J4eq2qkio1VKEh4VtiI0bfCOC/
mGK3XI2GhmvnM2u+EDAsvUmCq01D3SYZpxZ5fjRXFb7K16Wh2gm35QsfCSi+
uNvZx4CG5ursaFWtBCQtr5PSP0ZDlixBq8PNvP5/bfRa8hQNyYp4Kia8JcDx
UuflrxY0ZHrdOvx5PQFq1aP115xp6OeMzFslFgGylz2v6V6lodk6vpGwcgJI
suS14l68+iWSdcqLCXh7ealPWiANxdWtljyfSwBTNlnxSggNpdbc5g5kEPCw
RrFtVxQNkZSDg1RSCbBdsUulNYWGVKZPfqHFEGBQW92RnElD5NN9fTlhBGy5
ejTI+TlPr/aHVrQ7BMzWWn8jV9BQpsvncyrXCXjgeidy2yca0rDRtmw4w1t/
m1t6p5uG6r5+GFA9SYCN4odvPRwaotp0nrlgSMCOLzJbIsdpKC+rJ8VQh6ff
E5P+GX46qs8N/twmw9O7eXBGYQkdyf0pmWPRef7Me4sdF6WjPVs89W8IEVB+
OnlHtgQdSVkdnnSZ4M0vsUE/s1V0RO601ZfnzR+WlndM4Bo6eix6XzWeN58m
HESzXyjQ0XZlwbh+3vyyYG9tFt5MRwX1Sr5TKYWg4uG16uVOOvpsLZI071oI
Td+Ey2WP01Gl70/vN9RCoIgnNR04SUfO/9WfukUuBA3tLX2up+kocsg6RmyC
CcnRxsKNlnS0YSxgPv0zEy4fTDzt40xHPenCf3ofM4FeqDzR5U9HB7Or9HI2
MME46JjKo2I6ajQLuvZX6gVkmI0fLCujo0PR6wVXCbyAv8qRDu0VPD3CW2VX
/ymAlNaWx+Kv6SiZU5b7qqkARlefkrzxno4kvn8OtAsogDvlFtNW3+moZJdu
uUJrPlSOO7FXy0qgXvvQCiHtPNh0JsAk7T8JRHIIfDTjnAlmV4sl+f0k0G0+
J4abeibcCf7+3jZAAi3+UFNkLWZAf6HhoXX3JVC7Rwi7LSoDUsSWwZOHEohh
XTn3tywdllWmK6UUSqCbq0NodQtPgbSm7l/ikAQa0BbpErqcAh8HhJ9EmUgi
E/W00purHkCTTb+upDwD1TGEApddv417+TNnYtYy0L5qwap2W388keGYL7OB
gQ4EGVvwHwnAMiMjK9eoMFAgheP3RC4I27n9nt66i4Hm9rotTSq5i2f9F/OO
nGag3ZOFBcoOEXhDuozs3XAG6hZ6VCWnFoe19LuaxaIYaCWxg7jzKA4bDiUF
R8QykI8Q83eA4EN8VWX1ZNwjBtqoJUtR+fQQVxRtaM7IYSDX9U+vy7klYOPa
HUHVdQy0NT1zPCb6EbZ3nNQxaGQgqym+03FTj7CXSMmfxiYGUqw+ekvGNBk/
Oqpt3drOQLHbxXYmyTzG3z8inT4OA+30CVZBh1PwrBflj/0gAzn7LPXWuJ6C
xVdUZw8NM5BCn5nZUFYKVj2rL/3rFy9+mjmfv0Aq3k8WbnKf5NXbvbzfcUcq
Nn3aEDAzw0CLWnH3ha1TsfP+kF2+cwzElNcMtAtLxf8NHvm9uMhAbsdOWHuX
p+L/AVIToiE=
          "]]}, "Charting`Private`Tag#2"], {}}}, {}}, <|
    "HighlightElements" -> <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
     "LayoutOptions" -> <|
      "PanelPlotLayout" -> <||>, "PlotRange" -> {{-6., 6.}, {-1., 4.}}, 
       "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0}, 
       "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
       "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), "DefaultStyle" -> {
         Directive[
          Opacity[1.], 
          AbsoluteThickness[2], 
          RGBColor[0, 1, 0]], 
         Directive[
          Opacity[1.], 
          AbsoluteThickness[2], 
          RGBColor[1, 0, 0]]}, 
       "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), 
         "ScalingFunctions" -> {{Identity, Identity}, {Identity, Identity}}|>,
        "Primitives" -> {}, "GCFlag" -> False|>, 
     "Meta" -> <|
      "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
       Plot, "GroupHighlight" -> False|>|>, "DynamicHighlight"]],
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox[
     TagBox[
      TagBox["x", HoldForm], HoldForm], TraditionalForm], 
    FormBox[
     TagBox["y", HoldForm], TraditionalForm]},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-6., 6.}, {-1., 4.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.926217617940632*^9, 3.9262176553508205`*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"2a42f0cf-68d3-f842-80f8-8cd91242e073"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"Sin", "[", 
     FractionBox["x", "\[Beta]"], "]"}], 
    RowBox[{"\[Pi]", "\[Times]", "x"}]], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "\[Infinity]"}], ",", 
     RowBox[{"+", "\[Infinity]"}]}], "}"}], ",", 
   RowBox[{"Assumptions", "->", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"Im", "[", "\[Beta]", "]"}], "==", "0"}], ",", 
      RowBox[{"\[Beta]", ">", "0"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.926218180458866*^9, 3.926218268225195*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"8bacc6ca-4262-2542-8f13-759faa376575"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.9262182745293846`*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"1fca0750-3bb2-154c-acc5-73491ce1585c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NIntegrate", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"Sin", "[", 
     FractionBox["x", "0.5"], "]"}], 
    RowBox[{"\[Pi]", "\[Times]", "x"}]], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "1", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.926219073347267*^9, 3.9262191245618114`*^9}},
 CellLabel->"In[24]:=",ExpressionUUID->"51d6e393-fba2-5542-a152-18891014c0b6"],

Cell[BoxData[
 RowBox[{"-", "0.018198182323440885`"}]], "Output",
 CellChangeTimes->{3.9262191815069847`*^9},
 CellLabel->"Out[24]=",ExpressionUUID->"04869dbf-08a8-6f4d-864e-a0071de06ed7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NIntegrate", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"Sin", "[", 
     FractionBox["x", "0.1"], "]"}], 
    RowBox[{"\[Pi]", "\[Times]", "x"}]], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "1", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.926219151532484*^9, 3.926219175274252*^9}},
 CellLabel->"In[28]:=",ExpressionUUID->"eca0dd42-28cc-0542-8d63-97b14ea2acf6"],

Cell[BoxData[
 RowBox[{"-", "0.030596623406371454`"}]], "Output",
 CellChangeTimes->{3.926219221502264*^9},
 CellLabel->"Out[28]=",ExpressionUUID->"5d9df44b-5293-244d-87d4-30ada9d94c29"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NIntegrate", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"Sin", "[", 
     FractionBox["x", "0.05"], "]"}], 
    RowBox[{"\[Pi]", "\[Times]", "x"}]], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "1", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9262191927499523`*^9, 3.9262192325342407`*^9}, 
   3.9262196505942707`*^9, {3.92621982948612*^9, 3.9262198413770275`*^9}},
 CellLabel->"In[29]:=",ExpressionUUID->"d6b5bba3-f389-cc48-b3e5-484054abdb81"],

Cell[BoxData["0.006410964298525328`"], "Output",
 CellChangeTimes->{3.9262198440485306`*^9},
 CellLabel->"Out[29]=",ExpressionUUID->"b428866a-3890-be48-986f-c6a1424ca2b7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NIntegrate", "[", 
  RowBox[{
   FractionBox[
    RowBox[{"Sin", "[", 
     FractionBox["x", "0.01"], "]"}], 
    RowBox[{"\[Pi]", "\[Times]", "x"}]], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "1", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9262192333878956`*^9, 3.9262192348286457`*^9}, {
  3.926219852921793*^9, 3.926219860792919*^9}},
 CellLabel->"In[30]:=",ExpressionUUID->"04862483-b6ad-2441-a22f-4c1ab0b50abf"],

Cell[BoxData["0.002548915777087688`"], "Output",
 CellChangeTimes->{3.926219862641138*^9},
 CellLabel->"Out[30]=",ExpressionUUID->"126ef458-851e-8a42-a395-283cc28cda69"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NIntegrate", "[", 
  RowBox[{
   RowBox[{"Abs", "[", 
    FractionBox[
     RowBox[{"Sin", "[", 
      FractionBox["x", "0.5"], "]"}], 
     RowBox[{"\[Pi]", "\[Times]", "x"}]], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "1", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9262192358824825`*^9, 3.9262192371586227`*^9}, {
  3.9262204024361687`*^9, 3.9262204149502754`*^9}, {3.926220509839155*^9, 
  3.9262205124019623`*^9}},
 CellLabel->"In[40]:=",ExpressionUUID->"266351b0-d6b8-5745-b2ff-c715424e632d"],

Cell[BoxData["0.2144687902525596`"], "Output",
 CellChangeTimes->{3.9262204647576447`*^9, 3.9262205141846695`*^9},
 CellLabel->"Out[40]=",ExpressionUUID->"9efaf302-e337-c64e-bba0-03d8d2bca1da"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NIntegrate", "[", 
  RowBox[{
   RowBox[{"Abs", "[", 
    FractionBox[
     RowBox[{"Sin", "[", 
      FractionBox["x", "0.1"], "]"}], 
     RowBox[{"\[Pi]", "\[Times]", "x"}]], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "1", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9262204323450375`*^9, 3.9262204726915703`*^9}, 
   3.926220517204666*^9},
 CellLabel->"In[41]:=",ExpressionUUID->"1b0098d1-6172-9b49-9499-4830823573e5"],

Cell[BoxData["0.22956274105898028`"], "Output",
 CellChangeTimes->{3.926220476347271*^9, 3.9262205191628647`*^9},
 CellLabel->"Out[41]=",ExpressionUUID->"dbfcfc92-158a-714f-9bb9-9178e78c153b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NIntegrate", "[", 
  RowBox[{
   RowBox[{"Abs", "[", 
    FractionBox[
     RowBox[{"Sin", "[", 
      FractionBox["x", "0.05"], "]"}], 
     RowBox[{"\[Pi]", "\[Times]", "x"}]], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "1", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.926220458283554*^9, 3.926220486750576*^9}, 
   3.926220522679636*^9},
 CellLabel->"In[42]:=",ExpressionUUID->"483e65cc-19e7-3843-9495-f9511002c55b"],

Cell[BoxData["0.22412841812842477`"], "Output",
 CellChangeTimes->{3.926220490730013*^9, 3.9262205248803577`*^9},
 CellLabel->"Out[42]=",ExpressionUUID->"31ef12e1-0a38-6044-a700-c4806270bc57"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NIntegrate", "[", 
  RowBox[{
   RowBox[{"Abs", "[", 
    FractionBox[
     RowBox[{"Sin", "[", 
      FractionBox["x", "0.01"], "]"}], 
     RowBox[{"\[Pi]", "\[Times]", "x"}]], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "1", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.926220442703804*^9, 3.9262204435619545`*^9}, {
  3.9262204939058056`*^9, 3.9262205291290455`*^9}},
 CellLabel->"In[43]:=",ExpressionUUID->"120a4e18-b5ce-7445-8483-39e6953e0dd2"],

Cell[BoxData["0.2219773167639422`"], "Output",
 CellChangeTimes->{{3.926220501551113*^9, 3.926220531271105*^9}},
 CellLabel->"Out[43]=",ExpressionUUID->"9dc59b3c-f2a1-5d4c-b1e9-815cd09f0967"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{
    FractionBox["5", 
     RowBox[{"4", "\[Times]", "\[Beta]"}]], "\[Times]", 
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{"3", "\[Times]", 
       FractionBox[
        RowBox[{"Abs", "[", "x", "]"}], "\[Beta]"]}]}], ")"}], "\[Times]", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "-", 
       FractionBox[
        RowBox[{"Abs", "[", "x", "]"}], "\[Beta]"]}], ")"}], "3"]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "\[Beta]"}], ",", 
     RowBox[{"+", "\[Beta]"}]}], "}"}], ",", 
   RowBox[{"Assumptions", "->", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"Im", "[", "\[Beta]", "]"}], "==", "0"}], ",", 
      RowBox[{"\[Beta]", ">", "0"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9262221425740986`*^9, 3.926222287533642*^9}},
 CellLabel->"In[44]:=",ExpressionUUID->"e1b04d71-1003-444c-be42-1c14ea753cd7"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.926222290520443*^9},
 CellLabel->"Out[44]=",ExpressionUUID->"7987f0e6-abf1-f84b-9d6b-178b1b80f751"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      FractionBox["5", 
       RowBox[{"4", "\[Times]", "0.1"}]], "\[Times]", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"3", "\[Times]", 
         FractionBox[
          RowBox[{"Abs", "[", "x", "]"}], "0.1"]}]}], ")"}], "\[Times]", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"1", "-", 
         FractionBox[
          RowBox[{"Abs", "[", "x", "]"}], "0.1"]}], ")"}], "3"]}], ",", 
     RowBox[{
      FractionBox["5", 
       RowBox[{"4", "\[Times]", "0.2"}]], "\[Times]", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"3", "\[Times]", 
         FractionBox[
          RowBox[{"Abs", "[", "x", "]"}], "0.2"]}]}], ")"}], "\[Times]", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"1", "-", 
         FractionBox[
          RowBox[{"Abs", "[", "x", "]"}], "0.2"]}], ")"}], "3"]}], ",", 
     RowBox[{
      FractionBox["5", 
       RowBox[{"4", "\[Times]", "0.5"}]], "\[Times]", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"3", "\[Times]", 
         FractionBox[
          RowBox[{"Abs", "[", "x", "]"}], "0.5"]}]}], ")"}], "\[Times]", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"1", "-", 
         FractionBox[
          RowBox[{"Abs", "[", "x", "]"}], "0.5"]}], ")"}], "3"]}]}], "}"}], 
   ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "0.5"}], ",", "0.5"}], "}"}], ",", 
   RowBox[{"AxesLabel", "->", 
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}]}], ",", 
   RowBox[{"PlotStyle", "->", 
    RowBox[{"{", 
     RowBox[{"Red", ",", "Green", ",", "Purple"}], "}"}]}], ",", 
   RowBox[{"PlotRange", "->", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "0.5"}], ",", "0.5"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "15"}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.926222523158575*^9, 3.926222746279997*^9}},
 CellLabel->"In[45]:=",ExpressionUUID->"30c7be18-f7aa-d44a-8dce-b7fd6d1f8d9e"],

Cell[BoxData[
 GraphicsBox[
  InterpretationBox[{
    TagBox[{{{}, {}, 
       TagBox[
        {RGBColor[1, 0, 0], AbsoluteThickness[2], Opacity[1.], 
         LineBox[CompressedData["
1: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
          "]]},
        Annotation[#, "Charting`Private`Tag#1"]& ], 
       TagBox[
        {RGBColor[0, 1, 0], AbsoluteThickness[2], Opacity[1.], 
         LineBox[CompressedData["
1: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
          "]]},
        Annotation[#, "Charting`Private`Tag#2"]& ], 
       TagBox[
        {RGBColor[0.5, 0, 0.5], AbsoluteThickness[2], Opacity[1.], 
         LineBox[CompressedData["
1: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
+3v4//v7/wHJzdPh
          "]]},
        Annotation[#, "Charting`Private`Tag#3"]& ]}, {}},
     {"WolframDynamicHighlight", <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
    StyleBox[
     DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
       Slot["HighlightElements"], 
       Slot["LayoutOptions"], 
       Slot["Meta"], 
       Charting`HighlightActionFunction["DynamicHighlight", {{{{}, {}, 
           Annotation[{
             Directive[
              Opacity[1.], 
              AbsoluteThickness[2], 
              RGBColor[1, 0, 0]], 
             Line[CompressedData["
1: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
              "]]}, "Charting`Private`Tag#1"], 
           Annotation[{
             Directive[
              Opacity[1.], 
              AbsoluteThickness[2], 
              RGBColor[0, 1, 0]], 
             Line[CompressedData["
1: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
              "]]}, "Charting`Private`Tag#2"], 
           Annotation[{
             Directive[
              Opacity[1.], 
              AbsoluteThickness[2], 
              RGBColor[0.5, 0, 0.5]], 
             Line[CompressedData["
1:eJw1mXk0VW/Ux7mXzGNpUgjJ9EMSUe4+VFKGomSeGlCGJJnKkClkzBgVIXOm
ZApPZMo8D9e994RQkogKKe9913rfv876rGedffbZ+7u/63nWc+DKLcPrBAYG
hr+MDAz/+5SDnfNbWzg6AT3pbqXhx2+ti4Wtb+DIxFRjdaxfjFT6+rDEyk8c
3ei1iWTsvUhadobmhSX6+ts9QZEVriRFSb0rs19xpG07cEagI4h0Z8qM4eMs
jljjt24wGcSTKp46PB+fxFHAmcs7/IszSL8ue5wYpOCoxKG8Uc2ngKTCF0zu
GsXRRPkE4fm71ySvzjiv1gEcreWs9TrsqyPVhqTvfNeNo3uab+KCT78n/YFX
FTXtOOreuyTlmfWBdGKj1vD1exzd0cQXUjP7SL4V7UtFDThKVvgltig2TGpw
GYnOqcFR1LQ/54lrZNKW5CfZjAoc6Wj0HCeofiRh08sdT0ro/5+Xvffjq2nS
g2dbDvEFOGowUohYSp4jNRlzsUS9xFHNNr1lh39fSUR+wZehGThaCBRNU3df
Ip3qkjwZkIaj5kQHvEBuhRQSqjzpnYSjvy6c1XyKv0it2Cn/O3E4imY1HWUO
XCex/jHY7xxJzy/zgvwe0b+ks2+s39o9xJHQ1ZG1bxEMEHHL2dQmkP49ke9n
XEoJ0CV177epL46sEkKpF4nMwPUpLPGiF45knDkVr4WwgP7zpCN6d3Cku9lJ
vXqMHWJMsvu1XHA0qryQslOIC/r4y29hN3CUQ656JryPFwwfdhcescZRUthG
6v2w7RCvMXH2PzMc2UtmLYbcEIChP5/nJIxwdK1LN0THYRdcdmUS36tD72eo
9MbDJkFIluZv2q5FryfZfeutsBCMfRK24dLA0X2TX+e2nxcBc9PjTxlUcDRQ
9smbnVEMnm4/q7ZxGEcPQ8cV8t3FgdZ9eWxFFkdBn7+MPN04CDaabjvmRHE0
K+YnpwZS8GLTv/zjfhwpF/z50fBPGqYqoy6Qd9Pj7w7r0h+QhWsy+ZHd3HQ9
Bss1vDBXgJczldJtbDjyhsKBd9cOw2x6c/s7JhylXLFpbvBShBs7PjJVbNBQ
8vAPS/kmJSjo+Zb56icNyZ5k6uVaOwoLYX+w3CUaCrpYWZKpqgIuf3f6ps7S
0M0nikKtH1WhpEpcMGGShvJiOBOR1nFYuq1YE0WhoYaCHL3TNSfAbVbvZ8AA
DXEOsIp2NAN49gY72zfQkL0noblR/SREfvUYXa2mIcVL0+NFqqcgk+WGRuBr
GmLu0Hf5oX4aukBP4FkeDTlFO2rw25wB0VKB+oHHNDTt9jztFLcuHOtiOWQT
Rc9fWOZY9gU90Pu8HvvtIQ3JsLvU2D3VBy8R2jVWXxqKDHiXpJN3AXpiczhJ
9jQ0+IfrfmryRfhUlOLRaUtD3DysJfttLsF6e8RHEwsa+nBLZd/Qf0Ygznir
4o4BDY3e0+vfO34ZfG6rWOQfp6ErmhL1Pa5mEBsl1aqsTEP9Hy7tK7xmDi/z
BRWaFWjohZQxv5qVBfRNbhHxgzT0gGBQU3zFCiQM2wt38NKQ5pLOh0umtnDC
pVYgk52GGI73tnyetwWDiCJ/eWYaCp1xDk3wvwL3m2Ivntugos1jjkqG5Vdh
QNH0j/8nKhqm3TdWJ9nBZ32d61w4FTW59BbYfbGDvzfVe1PHqegYgwHzTLI9
SGYdyHrTQ0UD+wMEtv45gO/2+XNfq6no3fymz71fjvBYnlLh9ZqKnG9tJ4jU
O0GeTo/QtmIq0mzpeWb00BkGgsp/iGTR4/8gNsRJ3ALJVZ/Uy1FU1K23Szha
+zYMDXHMN9pSkRsjQ+Yt7rvw4NqbhkILKto3VeBt8fAuyK1axScaU9H0h5QF
NoIHhG0vP3FDj4o6vwaplW96gLqhSQyvKhXpcUTKhLN4Q05vtpI1LxUl4FGM
fXd94aK1PttZDioyMpIwF+L0A4bvv6mK26jofkf/oFm2H5hx6zzctklBQxp/
NPPJ/sCjtzz+ao6CePfOd7jLPwCvDnX/zQYKshR88FvuUxAcNJu7OFtDQcIl
L4WcIBgGvsRK9lVQ0N0rUzKVacEgy/apP6uAgjRS9up7GIfA5JkIcZ0kCkpu
PTPUOREK51pGPjxxpqAU6Wvry7sjYP+7WztU9lGQaFO2l0BVLHTxH3VX20VB
ocqrh4J+xoLP9Y1BdX4Kcrc2rQ5RioMR9pD4U6wUlMdh2q5TEQexRqn8hqsT
aK1u+4uvtY+B+LWZ17lrAgny/ShZ+5QA5eoRrq5tE0hrUcZjTTYRbGLP991p
mkB9h9j3Jd1NhLqj5Bif6gkkE+Kj8oo1CTwCvnOHZU8gb+LgvKlyMnwR2MuV
dX8Cqa5+7zxY+gRSHHCnHM8JpJ1QdOUUIRW03mZ35btNIM3U2ZtsRqmQaSMf
WeowgcJOO82EbaaCReEpjoZLE6jVSpLgdPEp9GK32MZlJ1DLOOPtowfS4Y1j
MzMPlYyWbv9qlcrIhGMiLodzRsnI5B5fX9hYJtQO7bJUHyCjtH4O0Yt8WfBO
3bHCsY2McocNBqSDs6CDh/9qexkZKdYllCy6ZMPH19bvHoSSEWV7TCObaQ6w
b274rMqTkc2z72thDwogqjQ755E0Ga0USmThbQXAe11/QPQgGc3Z2CYUcBeC
QM8LKYO9ZDQ6sGL8/FkhiGRoj71iIiPPvoRcpsYiOHoq6aj9+Dhq2L7jMbNQ
CdhEHl4aDxxHSz/SVc7uKQefiseh3b7jKEvNj2efRjkkUlb2NXqNo7kC5yXx
G+XQIVt5Ns9lHF3MV5YZrymHI91qWR5m42hoQ4G7x/I1bOM+dXm74jhajdjr
87ekAopiLtfpTo4hQ/X8OE6/KmitqjLEKGPItRYf6iyqgkl895cjo2NoMf/2
2PuJKtipMCEg2D2GckN3u1qpVYN/n/WtL9VjaPOgNgu2UQ2GfDdEQ2PH0Hux
IzktwbWw9vheGIIxJHI1+6J5Sz3M7Wuc11IbQ96zMuW0rXoYydmm16M0hvxv
F17NVWuA17VxfFSpMTRd4cLPVtYALlO5qRvbx1DFA2cyzwsE04eHio5+HkW6
4dIqQm3voKdPtr8wdhQVn3Q63NHTBFnctD0pkyOoVrFyz/zZNnhsDiyqlBH0
9mtzlcOtNgjMy1gdHxlB5z3+y2dPbIMrmld7BbtGEIfhi9Tqj20g6vE5OL1y
BGkISp2q926HTOqP7zmPRpDWK4sR5/IPkFHE0vrm6Ahisz5sEU7qgqfnDrsN
hg8jI071MNnJPhDnONfRFzyMHLwOvhn61QeFnVdEe/yH0VUV97hIzn6o1U0Y
aL87jPgslU1ljvXDuP5vxQbbYfTR+Lr0wdh+2HmxfiVPdRhVVHnMsJ0cgBjz
s3f9vgwhnE1+OqliEAKdbL2kzg6huHJLxxetI3CPWODp9m0AzX4XP+V7kga2
Ab3iI3n9yCq43O6d0DQk1s+kPL3Zh34HJNv6352DWlySs0i0B1H8hMYYUxZA
jBfTvPS8E7EJX+g+T1mCcumwm1PT7YjhmfFzqbYVwFvKRJSVW1HAz1GXq7W/
YEY2URFVvkfqd7TShQPWgc8vX1mOsRHFSR0c2OexCbLK32VfrtQhy++vus7s
24KgU9/6aryqkHCZO1F1igFr0l44r3S1Cp2L38V6aI4BY9D72lOsV4WMrXUf
8S8wYPeNvnRliVahQm1JhqmfDJiH3Ux7VFclavwVq3WFjRFzCKO+sxWpRI8a
00xn5Bkx3a7uUrb2CuQ/NfGb6sOICVwqjjXdVY6O+Hhrj7EQsHKJR7WnieUo
5Qdl93sOAnZh3f7T4e9lyGvu9UYBDwGLeH7gGHtbGTpczTp3excB+/c5Aa/1
KEO+oMRLkSBgs7735PaNlCL3f595hU8TMJfzcSn1UiXofUwlg44/ActbPbeQ
yFiC1nbvOTUQSMCmnjBhLuPF6I12vurlUAJ2+ZPnnFB4MfrkLS9/KYqAgbeV
csDnV8jketHioTQCxpslM6SZW4Q4jl/eLltJz/dXC0+7eAFKwwSux30hYNEF
mU2k9XzkriPk83WBgDla+d99052PTqveO6axRMDEW49NZHrko5NUqRf4LwKW
lFiY49ueh56XzJbNEYmYj1Kc+hGnXHTjj97ZA/uJmKabhePz19ko9QH/0H5d
IiYkoSokEJaNfOUDVWf0idifcYH+RxbZqPR7U0uuARGr0OhV9mbORqpPdmoK
GRMxCT5NwiXjLITVmRv12RIx9tJDT9j+vECSQ/zqpz2I2MuJmagvwc/RdY3s
h5fSiBj5/s70Z0eeo2sye29fekbEuIXOlBpMPUNP56gF59OJmIdN3kANPEPR
m9qMx7KImNbMzV0RG2noirXBaG8BEfu8+D1D2vUJMr2izb+nhojtixUppwk9
QV/ebTPrqiViFw4bvH/cnYK6zONqfOqIWPWd8pkN6RTUMtpR1o6IWPiau3Tn
TBLyTB8TlWolYtKEjdeO5gnIW6vo01o/EbPKkm4RZk9A+QZ1f8wHidjjU+Yj
g9XxaKFUdrlmiIhthNatHd8Zj0wdXjvYjRKxTg5/dc7+OJRm2y7+gELEGF6V
6L/zj0MO+ww+1FKJmJL+R2t3uTh01kRW/juNiD2N1QikPIpFBcyaCtqTRGxM
mjXaNCoapQ1HvqidIWKY843Sxvko9C/dcP7DLBHLK+kYkNKOQrQg0dHBOSLm
rRS1a4MQiRQYZKJHvxCxvST+F6le4ajdtoL9+TciFhhw5z1hJAwx/87hDFwk
Yl+bhmZuHglDCfkiiTbfiVjdmWTp44uhyCN4RJprmYhZGuyrmLgajBbTLzGK
rxKxhZWfqnebg9CrQR2NMTrfT+pF3AeDUKFe24GHP+n5TwR2asw+QM1fVSqH
fhExWT8LgwmtB+im1YGrd34TsbciyqPuuQHIocIzk3ONrpfOgZbz/X4o0uxc
h9w6ERviDe0PfOyLMo9WFFbRecVIlfrm4n30nc2O7/gGEVP8mL4qOOKN9tjf
MT/8h4gZHLzIcD7ZC+lWvTmWTWfXm9s4A008kXUMVyTfJhErWXUS+0x2R+O7
m0In6NyjKiIv+PQO+tv9T+LYXyK26Deopm/phm7z88nH0JmrOVTrgdBt9LvD
Lu0jnU343bMd0C00RHR2kP1HxJKfkt/2aDijj0sxj93oPCKhMajUfBN5f1Pb
+ZrOO8py51O1HFDC/bHv3+h88Tg3gfHDdfRSe0BQbIuulxb3PfY6V1GtWFyS
IZ37zk8odHfboKssvhb36SxUERRrl2GBmnf8vZFB57T2C0jxpTEKS/B820Dn
3dT9i//yDdHCLwO9UTrLTA+rJlnqoLLBJcF5OktwuibL2WugI/NVYr/pHDAk
OST4/j+kc4Dd9h+dZXmoN5n/2wFFEfp9W3QeWQ5M5107BjwOKq5/6Lx0/tCP
W25aoGMxdXKZzvfitToclS6AzdcFffrWH/vn552WLm8Eo+9WEjr/N/7NIqdB
aTNoL3m8p5TOxMu4OouENfSXX/sYTef3IuEPn/FegYMLxG/2dA5OEnVVib4G
QS/ZTh6nsxZnnUk/hz3IXuCeZaUzS6CRhmP4DdgMzh/vo9ev/feiFDOLE+gz
uR2Ip3OEcxh/erAL7Kn8++48nXOWY333PXCF3vzJt9vobG8vbVf5zw2qzAgD
V+n90xb1NAtSd4fnm9dW2egsSX2vf+H+XZjIdwwooOth3tBSZX7dE0Yyc6fJ
dP10cBXIVB3zhmKezcabdC5s/yUc7OkDvB2Ku3/S9edEimUV+nkfavbdV1un
61NvnbI5f8QP/Phzue7QWa5CarnKzR86eGfs5uj6XkuYXJBcCwDWxMYaRNd/
Dfu94aa7QcB0ffKkPH1eMv4TGCwRDYYCjbumLvR5Cr1Q0ve0Nxh8rQuFcleI
2KWk6U4PqVCwufvtA/MPen8O6DZJU8NgajvfAS/6/I6emkW7IsLBWpnlcAh9
vhvsA+qZVCLA55L1jsgFIvboVUU1LfYR3BTZsns4T9eH6v6Sx6ei4XIRqVqJ
7h+cFlVF/svR4BkfjfPS/WXFz6DA6XkMMKm/+Ts7TcRsppoMxe7Hgv+GtMID
uh/JSf7W+zscB1r+K5+d6X724bX1qbLwBHj584+/LN0fT7TIvj/0MQHuuTwU
K+glYqUj6xrPlRPhnsUPomgPEUtaj4dH04ng04YiGTqJ2DVoV7uunkw/B9ir
eDcTsa0OhcN7lp/Alc9hlRaVRMyN8rck5kwqiDzmlwuoIGKz3zrktj1PBd1E
k0PPy4lYF+912ZVzaVA5faj0QzERS7385FB39lNILP4Zh+cQsaNTjEIPTNJh
vjBUhz2Jnn+t8bJCfjpkEAJS/sbT6/H4VfPH9XQ4tu2h8UIcEeN4UXQ0Qy8D
mlYtVeuiiNjmBRPK1mIGDI1afD0YQsSopSVS6HAmvPwqvCV2h4ilu1o1q1dl
w0sOcccpHbr/WbAVJ+LZEFt+P/DcWSKWol2R/I3lJVDSFTyLtYhYrAi74zOT
l7DmN8Z8U4M+P31v+P6uvwTLBdUdpcpEzFaBy7ruRC5wWM0O+IgQMbGlt+tq
TfmwEmiedGCZgN3vPhm8+i0fgsItz334RsBGCjq5i/cUQG8J0zOnefr+5PqE
2IHbBaBT6CWXM03AlsgbeiwihbA+L3dnZpiANbSoZg76FsHNR4/YUmoImFla
1Tkn1RJQjbEz/uJLwM5mjXfrm5QDyV6TuusPI7YUUmzX4lwOzTb1SeRfjFiK
Q9DW8aByEHGWYE39wYh9/u+/w1LF5cAtsyzCM8+IhVUHJBCZXoOmu0vUwBgj
1t59yLy65DVsr75r1/iGETuzdvfzAZY3wOJgFWDszIid1uMn/nxTBY+ePxoS
H2LAYqxHAxSq6mDUZ2V0UW0L2vT3c13gb4RYnsTWsqub8O2AgN9A6nswMmNY
Z0hfh7vuMrYxO1uBSebK62DqLxil8BratbeDm/EPNqGZFbDxPjHHotsJATzJ
JtmKy/BeRiXiPXMPnF+61aLRvwASbHWfs7X7gFvPT5Xlxxzsr3M8zRzWD2fd
uNVdI6eBYYOQ7zY1AM7P+n62BNPgt0G9VcvBIUicr48Iuz8KgeMlVJLMENQe
aQlVtBkFbttMi2qFISiisTF/PzkKEq4PzQqPD8E24fjYdI5RuBRtcDnOYAie
bbsjiKeNQGnHjJ6l7xAsZrk/H0fDcOMkt/rPoSHIvdhysk1gCCaUrAUPBg9D
zfDuzbfrfWC3fpQnJHwYvHiWZv2m+mCpnpM4Ez0MU5mnaBc7+4DpTO189pNh
mFGfXTryrA/kTAVqxUuGweBl5JMujT4I8O00EScPA6tI1ULDvl6QaFVJElMY
AUHhrDH2m13gaszLJ0oZAYdr47psrvTzTp586sHJEWhqVGZk1WsDo3V9ManZ
EdA07PM6KN0GamlRRxWWRuBLtXNG3adWYMbZzUhMo8DVAEbm5q2QasecZSY7
CpV8omcu67dA890NpXh63ZYFlxmFdd5DZeuehqQHo3CB82HVgsx7yN+leiY1
dBQUoqIfjXG+h+gaT9MXsaPA8bTSg723CUz/rvqWZI8C2wQqGrnUBIvB31s7
u0ZB+mUPE4ddI+xJ+GTCtH8M5oVPfrFXR3AsSHinu+gYnFVJWOxnRHDZzWxw
+tAYWHPUNwS0NsDjC3167xXHYNGBybXoQgNwctVpBmqPwdEPbJOqDvXwLyRe
lsF9DITD1wb3Zr+FT56aDJsdYxAiZjNirl8NBHvfesc++vuMLKNHBatB5HK1
z8TwGCTVd1EMPleBpZLcz9qPY7DWtJxwPqgKRpb2zHv/GoOInXN/rOoq4cON
5cHfB8aB36Bcu0rtDRSbZ+SueI1DkY2ASLx9OSiNim1s8xuHSnmNGiMoh7eG
ubp7g8YharRhUX9XObSfLV7GosYhOLyp51NbGUyr1B2PfjEOj85w16fJlMHu
HWO9kh3jIDivFqaxUQKBXTxrloJkQG1xuwtiCoFVO/7cbREy4IOjYnd1CyHm
/c5nwQfJIILereewFcLT2v2ahfJkGLbwlCSFFEBVnkzk2kkyCL1K9VZ6kA8L
wWdE4p3IADOuTjyRuWCs7q/dXk+GCpyraPZrFlB+zvI0NZGh0Wx7qFxlFlwp
1h9920YGDRv9/QMBWeAkLGRX0k+GT68qk2V2ZUEgY31Q0gwZrv9pIh3QzoTi
lo2Ga1wTUJ2QVj1VmwFKfldCrfgn4MkywaQjIgNqlDv0THZNwJCe7zc28wxo
zn1C0TkwAX2NbEQRuq+Phx/bUDw6AW5muz7ZPnwOTPoeRxktJyDPQqZzX3Ma
RGyjbW7YToDgL9OwEpc04EGnm1ftJuDLqUKV+T1psFdB4OJn1wn4K+djbeSW
CvL8Fa69wRPAN5hgvSr9BMxGlgufFU1AscJjoY+1SVBm5SyqtkmP7ztwvdTg
MVx5s7Q/g5ECsq7sQeXsj2EHp/uebSwU+ObS9e96cxx41PjwDvBRIOskmxxN
NQ7UdoT9u3GIAp783jxbsrHQ9CGT/MSQAhQPilSdXSTcEZEY2TKmAEm80PbE
4iMQ98zvv25JAfvh3aUsno8gVLy0/bADBQombf28IyNAx7++8oMvBTg79YXS
W8NgSGns8XoeBT6GEEJSPEIg5JF5tHUxBUL9Y+L5+ENAeYoW3vKaAh0XXs/V
FQdDSsxMQFwDPV/DQmL21yCwnP/hIjVEX0/0V394JxBm07l0TLco0DN7bNPF
3R+S6eduxESFgWiZQ4f6/EBbb4fmQXYqbFkJzPLI+UHBxl7V5R1UKHtm0Xd9
6T7cMpI8FC5NhX+am7kt0T6wxn6SWGNEBXYzBS0beQ/gX+ROaDKjwlJxxCX1
N3dBpp8s3mVNhaI2a8fBE3fBKtlNC79BhUOqoTeEDdzhvVhmOLMfFdQDubXm
otyAss1lL08QFUyC5zXVD7jBry+qhbvDqCDPYhV2tPI2SJb2d8k8psLneX9H
xhlXiD7ByGuYQwXl2ryzjoUukCfcnWFeSIWLITNsqV+doZHw5PD1UipE2Mmu
0+ScYbVd4aJXLRWyF+OW4hscwczIJul5DxVidtfpMxNuwEEXtO/rLyoYLt6N
Gth+DUgGj16t/qFC8eAdnWeBV8FEyZj0j4EGPK07u4VWr0DExqI1HwcNIpdy
mv/DbWEpVChLRZgGC1JV7zLyrYH95vwRDXEaHPhoZa1bZgViepXN56Ro4OPR
50ZssITL2/VnLY/QQH3PDYcrs+ZQl+4rFXyGBrpTZTse3jaBkcCztVG6NFj5
7MKnmGEM368L6CQb0KDxQ3Vh8OBlEJV95VRgTufwBa3FM0bwsJpS0neLBh9m
Apxd7QwhIy0PI7vTIPzUCPVntQHU+rn3T3vTIKKw4Xw9jwEsnOJc+RVEg0vH
29rq48+DYf9x5f0pNFC8JDvDQjsH7Mc5Guue0UDttHiGSPZZaMwm61hk0UDq
U21A3x1tUPDytk0rpsEeSR7ra/Ja8HlSe0GtggYBvcz3t/aehnSd3Z7kGnp9
pLj+pvOcAm7hqsg9LTT4OSLgZbVdE1rDQnfVdNDgv/ToSUVRDfD9YZRp0keD
SiJLtLcqBgstq1XJE/T1Pg+1eEZ1+OCkOC3wgwYGVx+HtlKUIWCE0eXNbxrc
jFff6+Z9FI5h/WuX/tJgaCvW7ZW4EuRsd+VOYMUhrfRV98uXh8HKF54c4cbh
TyQlttNHAQTmuMUHt+PAUfxX8WWtHATXvlLlF8ZhSl3qcN5jaTgh7ttcJo6D
i9Iw7pgtCStRuucNpHF4+2f5aUyPBFyx/Xot9igOJDvrrdgbYrC3s/a7/HEc
dvS45KqNH4B+pQifXgyHlhinqxQrEcBYpWK5dXGoOMFbdOyiIKzdXttbbIDD
9ZW6DJaJ3VAy0fZSzxiHm8mSXV/Dd4Ld6WSFbxY4TA7l1hZZ7QChEru3kVdw
uNfRrc1nwg8ju5W1ZB1wEGV3ysLdeSEqkLm/0xkHBYWDMbX2XLBplD3L7o3D
08HJ6WUJFqhAd24X+OGQO83Ion6VCRylTm6eDcaB90X8PBOZEUTj+R9+Cceh
dtf5y2l8WyTy5iRfeAwOuvxJHErkDVKcXdlTyUQc9rfzlo6w/iZp9wUcak/F
YT2pG4JSVkgMahfK7TNw6M0Z+q0cvESqyhJWZ8nBgTByvmgs6ivJhet7W04h
DkdIoUeUq2ZJEp4NhlplOHjEqYS4+kyRqB+jqDOVOHRPBmuNpVJJCecsHULq
cOAX+iHKqztK0q2QXRFvwgG/pll4fLWfRBTa9G1uw2GG3Edl/tdBqn3YyXqt
Gwf2Q/cJ20rfk9yWU+OJgzh8u8k3q1L4liRtflMoawyHtbqozsJH5aTJZtV8
TRoODAeMrpZa5ZJS5NiUpqZx0FBkidvGm0a6kDLW8OALDtnV538x1z4isRLy
zh74joO57tUWUQdPEnL0HHq3isOZt3Ez+Y3mJI9hLWubDRwWe3a9+tkiQ/q/
+3v4//v7/wHJzdPh
              "]]}, "Charting`Private`Tag#3"]}}, {}}, <|
        "HighlightElements" -> <|
          "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
         "LayoutOptions" -> <|
          "PanelPlotLayout" -> <||>, "PlotRange" -> {{-0.5, 0.5}, {0., 15.}}, 
           "Frame" -> {{False, False}, {False, False}}, 
           "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
           "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
           GoldenRatio^(-1), "DefaultStyle" -> {
             Directive[
              Opacity[1.], 
              AbsoluteThickness[2], 
              RGBColor[0.5, 0, 0.5]], 
             Directive[
              Opacity[1.], 
              AbsoluteThickness[2], 
              RGBColor[0, 1, 0]], 
             Directive[
              Opacity[1.], 
              AbsoluteThickness[2], 
              RGBColor[1, 0, 0]]}, 
           "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& ), 
             "ScalingFunctions" -> {{Identity, Identity}, {
               Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
           False|>, 
         "Meta" -> <|
          "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
           Plot, "GroupHighlight" -> False|>|>]]& )[<|
       "HighlightElements" -> <|
         "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
        "LayoutOptions" -> <|
         "PanelPlotLayout" -> <||>, "PlotRange" -> {{-0.5, 0.5}, {0., 15.}}, 
          "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0},
           "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
          "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
          "DefaultStyle" -> {
            Directive[
             Opacity[1.], 
             AbsoluteThickness[2], 
             RGBColor[0.5, 0, 0.5]], 
            Directive[
             Opacity[1.], 
             AbsoluteThickness[2], 
             RGBColor[0, 1, 0]], 
            Directive[
             Opacity[1.], 
             AbsoluteThickness[2], 
             RGBColor[1, 0, 0]]}, 
          "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
              Identity[
               Part[#, 1]], 
              Identity[
               Part[#, 2]]}& ), 
            "ScalingFunctions" -> {{Identity, Identity}, {
              Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>,
         "Meta" -> <|
         "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
          Plot, "GroupHighlight" -> False|>|>],
      ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
       4.503599627370496*^15, -4.503599627370496*^15}}],
     Selectable->False]},
   Annotation[{{{{}, {}, 
       Annotation[{
         Directive[
          Opacity[1.], 
          AbsoluteThickness[2], 
          RGBColor[1, 0, 0]], 
         Line[CompressedData["
1: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
          "]]}, "Charting`Private`Tag#1"], 
       Annotation[{
         Directive[
          Opacity[1.], 
          AbsoluteThickness[2], 
          RGBColor[0, 1, 0]], 
         Line[CompressedData["
1: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
          "]]}, "Charting`Private`Tag#2"], 
       Annotation[{
         Directive[
          Opacity[1.], 
          AbsoluteThickness[2], 
          RGBColor[0.5, 0, 0.5]], 
         Line[CompressedData["
1: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
+3v4//v7/wHJzdPh
          "]]}, "Charting`Private`Tag#3"]}}, {}}, <|
    "HighlightElements" -> <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
     "LayoutOptions" -> <|
      "PanelPlotLayout" -> <||>, "PlotRange" -> {{-0.5, 0.5}, {0., 15.}}, 
       "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0}, 
       "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
       "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), "DefaultStyle" -> {
         Directive[
          Opacity[1.], 
          AbsoluteThickness[2], 
          RGBColor[0.5, 0, 0.5]], 
         Directive[
          Opacity[1.], 
          AbsoluteThickness[2], 
          RGBColor[0, 1, 0]], 
         Directive[
          Opacity[1.], 
          AbsoluteThickness[2], 
          RGBColor[1, 0, 0]]}, 
       "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), 
         "ScalingFunctions" -> {{Identity, Identity}, {Identity, Identity}}|>,
        "Primitives" -> {}, "GCFlag" -> False|>, 
     "Meta" -> <|
      "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
       Plot, "GroupHighlight" -> False|>|>, "DynamicHighlight"]],
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox[
     TagBox[
      TagBox["x", HoldForm], HoldForm], TraditionalForm], 
    FormBox[
     TagBox["y", HoldForm], TraditionalForm]},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-0.5, 0.5}, {0., 15.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.926222749755213*^9},
 CellLabel->"Out[45]=",ExpressionUUID->"b2d5bb23-02bd-604f-a5cd-53142a5ca806"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NIntegrate", "[", 
  RowBox[{
   RowBox[{
    FractionBox[
     RowBox[{"Sin", "[", 
      FractionBox["x", "0.1"], "]"}], 
     RowBox[{"\[Pi]", "\[Times]", "x"}]], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Sin", "[", "x", "]"}], "+", 
      RowBox[{"Cos", "[", "x", "]"}]}], ")"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "0.1"}], ",", "0.1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.926224373826788*^9, 3.9262243777887783`*^9}, {
  3.9262245545974464`*^9, 3.9262246822784977`*^9}, {3.9262247420149345`*^9, 
  3.9262247714165287`*^9}, {3.926224960172495*^9, 3.926224991739786*^9}},
 CellLabel->"In[50]:=",ExpressionUUID->"078365e1-09de-8a4f-8f53-277da4b98624"],

Cell[BoxData["0.6013370088768044`"], "Output",
 CellChangeTimes->{
  3.92622473046282*^9, {3.9262247802968063`*^9, 3.9262247906673527`*^9}, {
   3.9262249840891953`*^9, 3.9262249943670597`*^9}},
 CellLabel->"Out[50]=",ExpressionUUID->"c173f827-a563-404f-8e12-8b5a884b1b9c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NIntegrate", "[", 
  RowBox[{
   RowBox[{
    FractionBox[
     RowBox[{"Sin", "[", 
      FractionBox["x", "0.1"], "]"}], 
     RowBox[{"\[Pi]", "\[Times]", "x"}]], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Sin", "[", "x", "]"}], "+", 
      RowBox[{"Cos", "[", "x", "]"}]}], ")"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.9262250080808105`*^9, 3.9262250104468994`*^9}},
 CellLabel->"In[51]:=",ExpressionUUID->"a2ace8b5-0611-614b-a308-8bfe97d73570"],

Cell[BoxData["1.0323893771107686`"], "Output",
 CellChangeTimes->{3.926225012551958*^9},
 CellLabel->"Out[51]=",ExpressionUUID->"e9847ff0-980f-8e48-8f47-e9bc7ee409ae"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NIntegrate", "[", 
  RowBox[{
   RowBox[{
    FractionBox["5", 
     RowBox[{"4", "\[Times]", "0.1"}]], "\[Times]", 
    RowBox[{"(", 
     RowBox[{"1", "+", 
      RowBox[{"3", "\[Times]", 
       FractionBox[
        RowBox[{"Abs", "[", "x", "]"}], "0.1"]}]}], ")"}], "\[Times]", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "-", 
       FractionBox[
        RowBox[{"Abs", "[", "x", "]"}], "0.1"]}], ")"}], "3"], 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Sin", "[", "x", "]"}], "+", 
      RowBox[{"Cos", "[", "x", "]"}]}], ")"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "0.1"}], ",", "0.1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.926225059358473*^9, 3.926225075691124*^9}},
 CellLabel->"In[52]:=",ExpressionUUID->"4e59ad0c-ef4b-b346-8dd7-2dfb5887179f"],

Cell[BoxData["0.999523908718136`"], "Output",
 CellChangeTimes->{3.9262250796830063`*^9},
 CellLabel->"Out[52]=",ExpressionUUID->"27037605-5b19-764d-b33f-65ede96bfbc7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"\[Beta]", "=", "0.01"}], "\[IndentingNewLine]", 
 RowBox[{"a", "=", "\[Pi]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NIntegrate", "[", 
   RowBox[{
    RowBox[{
     FractionBox["15", 
      RowBox[{"4", "\[Times]", 
       SuperscriptBox["\[Beta]", "2"]}]], "\[Times]", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "+", 
        FractionBox[
         RowBox[{"x", "-", "a"}], "\[Beta]"]}], ")"}], "2"], "\[Times]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "-", 
         RowBox[{"3", "\[Times]", 
          FractionBox[
           RowBox[{"x", "-", "a"}], "\[Beta]"]}]}], ")"}], "-", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         FractionBox[
          RowBox[{"x", "-", "a"}], "\[Beta]"]}], ")"}]}], ")"}], "\[Times]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Sin", "[", "x", "]"}], "+", 
       RowBox[{"Cos", "[", "x", "]"}]}], ")"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{"a", "-", "\[Beta]"}], ",", "a"}], "}"}]}], "]"}], "+", " ", 
  RowBox[{"NIntegrate", "[", 
   RowBox[{
    RowBox[{
     FractionBox["15", 
      RowBox[{"4", "\[Times]", 
       SuperscriptBox["\[Beta]", "2"]}]], "\[Times]", 
     SuperscriptBox[
      RowBox[{"(", 
       RowBox[{"1", "-", 
        FractionBox[
         RowBox[{"x", "-", "a"}], "\[Beta]"]}], ")"}], "2"], "\[Times]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "-", 
         FractionBox[
          RowBox[{"x", "-", "a"}], "\[Beta]"]}], ")"}], "-", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"3", 
          FractionBox[
           RowBox[{"x", "-", "a"}], "\[Beta]"]}]}], ")"}]}], ")"}], 
     "\[Times]", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Sin", "[", "x", "]"}], "+", 
       RowBox[{"Cos", "[", "x", "]"}]}], ")"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "a", ",", 
      RowBox[{"a", "+", "\[Beta]"}]}], "}"}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.9262309656580105`*^9, 3.9262311881733913`*^9}, 
   3.9262314397347565`*^9},
 CellLabel->"In[64]:=",ExpressionUUID->"1855ab0d-9e3d-c940-9531-df43b6a46fba"],

Cell[BoxData["0.01`"], "Output",
 CellChangeTimes->{3.9262312006463013`*^9, 3.9262314439561977`*^9},
 CellLabel->"Out[64]=",ExpressionUUID->"718a578e-8001-7e4e-a22d-5c26fed0bbc3"],

Cell[BoxData["\[Pi]"], "Output",
 CellChangeTimes->{3.9262312006463013`*^9, 3.9262314439611607`*^9},
 CellLabel->"Out[65]=",ExpressionUUID->"6ac63d5b-724d-2b48-94e6-57300d1f51ed"],

Cell[BoxData["0.9999952381051429`"], "Output",
 CellChangeTimes->{3.9262312006463013`*^9, 3.92623144401412*^9},
 CellLabel->"Out[66]=",ExpressionUUID->"80c1d1f6-2ddb-fa4d-8202-ce5b83e92e79"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.926231427768732*^9, 
  3.9262314373411446`*^9}},ExpressionUUID->"b3d0a973-2f08-6e43-8cfa-\
6b1b6e20024f"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.92623143519466*^9, 
  3.9262314358921204`*^9}},ExpressionUUID->"4970c6f1-b4bd-1c43-a6e1-\
745ef4b2c653"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.926231399699724*^9, 
  3.9262314222511196`*^9}},ExpressionUUID->"63e244c5-a50c-8a4f-9491-\
75ddd2cb4e31"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9262314199998474`*^9, 
  3.9262314200028934`*^9}},ExpressionUUID->"0590bca5-71fd-4b40-8ebd-\
d47541e96532"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.926231406231287*^9, 
  3.926231406239691*^9}},ExpressionUUID->"ad69ae31-5280-3848-b08d-\
9129d9467bfc"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9262311962371464`*^9, 
  3.926231197087393*^9}},ExpressionUUID->"e14cbcb0-af49-3a44-974e-\
59a4421a0dbc"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9262311953779335`*^9, 
  3.9262311953853703`*^9}},ExpressionUUID->"b92344a5-0033-0642-ad77-\
5737b6314a3e"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.9262311943654747`*^9, 
  3.9262311943724766`*^9}},ExpressionUUID->"56b57706-bb70-8a43-a13e-\
d6bd441c8d4f"]
},
WindowSize->{1152, 579.6},
WindowMargins->{{
  Automatic, -5.399999999999864}, {-5.399999999999977, Automatic}},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1.1 Inherited,
FrontEndVersion->"14.0 for Microsoft Windows (64-bit) (2023\:5e7412\:670812\
\:65e5)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"a6f535d6-d726-b54c-ae78-a9fd37816de2"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 668, 15, 47, "Input",ExpressionUUID->"a517237c-e40b-fd4c-b82e-88496e8478fd"],
Cell[1251, 39, 194, 2, 35, "Output",ExpressionUUID->"d5a75cf1-8898-c54c-b6c6-5678bc05b1e1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1482, 46, 298, 7, 31, "Input",ExpressionUUID->"2e0b4671-4c7a-774b-a1d1-683e5a81c411"],
Cell[1783, 55, 224, 5, 53, "Output",ExpressionUUID->"a2d811eb-0168-4a4a-bce0-3aab3f82c4d3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2044, 65, 7982, 168, 89, "DeployedNLInput",ExpressionUUID->"b2795fc7-fbb3-0c43-98b3-0f7fe6d92aba"],
Cell[10029, 235, 413, 10, 46, "DeployedWLInput",ExpressionUUID->"8b9e0b18-3ccb-624f-b652-2b28de4a1dc0"],
Cell[10445, 247, 613, 21, 69, "Output",ExpressionUUID->"754a00fd-d8d3-e349-844c-1b5071367396"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11095, 273, 169, 2, 44, "WolframAlphaLong",ExpressionUUID->"296aa554-1c31-9544-9bdf-0bb526c7d76a"],
Cell[11267, 277, 170561, 3429, 2399, "Print",ExpressionUUID->"ea4b658a-d932-5947-9ec6-885bf0ba4494"]
}, Open  ]],
Cell[CellGroupData[{
Cell[181865, 3711, 9215, 191, 89, "DeployedNLInput",ExpressionUUID->"6a8a63bd-89ce-ef43-a4e9-ede550ad94eb"],
Cell[191083, 3904, 498, 13, 46, "DeployedWLInput",ExpressionUUID->"3b51c839-c978-4347-a2ee-f31cbb0c07bd"]
}, Open  ]],
Cell[191596, 3920, 154, 3, 31, "Input",ExpressionUUID->"2b0a09b6-d6b9-2046-a366-d8484f6d5829"],
Cell[191753, 3925, 276, 4, 52, "Input",ExpressionUUID->"5ff8719c-62de-7c46-a88f-8adf10f3cc1a"],
Cell[192032, 3931, 226, 4, 52, "Input",ExpressionUUID->"c5f60fb6-ba25-ef41-b642-2249380e67a8"],
Cell[192261, 3937, 154, 3, 31, "Input",ExpressionUUID->"71e8f488-0465-aa46-b104-37e4e6504b19"],
Cell[192418, 3942, 156, 3, 31, "Input",ExpressionUUID->"f9031928-8894-df41-85e7-565204efc6d8"],
Cell[192577, 3947, 168, 2, 31, "Input",ExpressionUUID->"727b059b-c159-1c49-a88a-ffdf4e45089b"],
Cell[192748, 3951, 178, 3, 31, "Input",ExpressionUUID->"5bdfe611-59ee-9842-a0ef-cf1958e33f72"],
Cell[192929, 3956, 152, 3, 31, "Input",ExpressionUUID->"1649b736-fd33-0543-96be-c6e4963bc2c6"],
Cell[193084, 3961, 205, 4, 31, "Input",ExpressionUUID->"fe7757d2-7fe3-9b48-9f78-8611f65148f7"],
Cell[193292, 3967, 156, 3, 31, "Input",ExpressionUUID->"6513d098-8732-b946-96c0-a76365722a4e"],
Cell[CellGroupData[{
Cell[193473, 3974, 950, 27, 67, "Input",ExpressionUUID->"9ac016e6-2e4d-434e-bf0e-75623dfdd417"],
Cell[194426, 4003, 177, 2, 35, "Output",ExpressionUUID->"86cc9b17-8b06-e848-ab53-71463ab97896"]
}, Open  ]],
Cell[CellGroupData[{
Cell[194640, 4010, 1099, 33, 76, "Input",ExpressionUUID->"8e84e48c-111d-9440-b59f-6aaed445e964"],
Cell[195742, 4045, 180917, 3039, 275, "Output",ExpressionUUID->"2a42f0cf-68d3-f842-80f8-8cd91242e073"]
}, Open  ]],
Cell[CellGroupData[{
Cell[376696, 7089, 668, 18, 77, "Input",ExpressionUUID->"8bacc6ca-4262-2542-8f13-759faa376575"],
Cell[377367, 7109, 151, 2, 35, "Output",ExpressionUUID->"1fca0750-3bb2-154c-acc5-73491ce1585c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[377555, 7116, 409, 10, 76, "Input",ExpressionUUID->"51d6e393-fba2-5542-a152-18891014c0b6"],
Cell[377967, 7128, 188, 3, 35, "Output",ExpressionUUID->"04869dbf-08a8-6f4d-864e-a0071de06ed7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[378192, 7136, 407, 10, 76, "Input",ExpressionUUID->"eca0dd42-28cc-0542-8d63-97b14ea2acf6"],
Cell[378602, 7148, 186, 3, 35, "Output",ExpressionUUID->"5d9df44b-5293-244d-87d4-30ada9d94c29"]
}, Open  ]],
Cell[CellGroupData[{
Cell[378825, 7156, 487, 11, 76, "Input",ExpressionUUID->"d6b5bba3-f389-cc48-b3e5-484054abdb81"],
Cell[379315, 7169, 171, 2, 35, "Output",ExpressionUUID->"b428866a-3890-be48-986f-c6a1424ca2b7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[379523, 7176, 461, 11, 76, "Input",ExpressionUUID->"04862483-b6ad-2441-a22f-4c1ab0b50abf"],
Cell[379987, 7189, 169, 2, 35, "Output",ExpressionUUID->"126ef458-851e-8a42-a395-283cc28cda69"]
}, Open  ]],
Cell[CellGroupData[{
Cell[380193, 7196, 549, 13, 76, "Input",ExpressionUUID->"266351b0-d6b8-5745-b2ff-c715424e632d"],
Cell[380745, 7211, 193, 2, 35, "Output",ExpressionUUID->"9efaf302-e337-c64e-bba0-03d8d2bca1da"]
}, Open  ]],
Cell[CellGroupData[{
Cell[380975, 7218, 471, 12, 76, "Input",ExpressionUUID->"1b0098d1-6172-9b49-9499-4830823573e5"],
Cell[381449, 7232, 192, 2, 35, "Output",ExpressionUUID->"dbfcfc92-158a-714f-9bb9-9178e78c153b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[381678, 7239, 468, 12, 76, "Input",ExpressionUUID->"483e65cc-19e7-3843-9495-f9511002c55b"],
Cell[382149, 7253, 192, 2, 35, "Output",ExpressionUUID->"31ef12e1-0a38-6044-a700-c4806270bc57"]
}, Open  ]],
Cell[CellGroupData[{
Cell[382378, 7260, 497, 12, 76, "Input",ExpressionUUID->"120a4e18-b5ce-7445-8483-39e6953e0dd2"],
Cell[382878, 7274, 191, 2, 35, "Output",ExpressionUUID->"9dc59b3c-f2a1-5d4c-b1e9-815cd09f0967"]
}, Open  ]],
Cell[CellGroupData[{
Cell[383106, 7281, 952, 27, 67, "Input",ExpressionUUID->"e1b04d71-1003-444c-be42-1c14ea753cd7"],
Cell[384061, 7310, 149, 2, 35, "Output",ExpressionUUID->"7987f0e6-abf1-f84b-9d6b-178b1b80f751"]
}, Open  ]],
Cell[CellGroupData[{
Cell[384247, 7317, 2109, 63, 115, "Input",ExpressionUUID->"30c7be18-f7aa-d44a-8dce-b7fd6d1f8d9e"],
Cell[386359, 7382, 81094, 1407, 288, "Output",ExpressionUUID->"b2d5bb23-02bd-604f-a5cd-53142a5ca806"]
}, Open  ]],
Cell[CellGroupData[{
Cell[467490, 8794, 727, 18, 76, "Input",ExpressionUUID->"078365e1-09de-8a4f-8f53-277da4b98624"],
Cell[468220, 8814, 273, 4, 35, "Output",ExpressionUUID->"c173f827-a563-404f-8e12-8b5a884b1b9c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[468530, 8823, 573, 16, 76, "Input",ExpressionUUID->"a2ace8b5-0611-614b-a308-8bfe97d73570"],
Cell[469106, 8841, 167, 2, 35, "Output",ExpressionUUID->"e9847ff0-980f-8e48-8f47-e9bc7ee409ae"]
}, Open  ]],
Cell[CellGroupData[{
Cell[469310, 8848, 837, 24, 65, "Input",ExpressionUUID->"4e59ad0c-ef4b-b346-8dd7-2dfb5887179f"],
Cell[470150, 8874, 168, 2, 35, "Output",ExpressionUUID->"27037605-5b19-764d-b33f-65ede96bfbc7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[470355, 8881, 2178, 65, 174, "Input",ExpressionUUID->"1855ab0d-9e3d-c940-9531-df43b6a46fba"],
Cell[472536, 8948, 179, 2, 35, "Output",ExpressionUUID->"718a578e-8001-7e4e-a22d-5c26fed0bbc3"],
Cell[472718, 8952, 179, 2, 35, "Output",ExpressionUUID->"6ac63d5b-724d-2b48-94e6-57300d1f51ed"],
Cell[472900, 8956, 190, 2, 35, "Output",ExpressionUUID->"80c1d1f6-2ddb-fa4d-8202-ce5b83e92e79"]
}, Open  ]],
Cell[473105, 8961, 154, 3, 31, "Input",ExpressionUUID->"b3d0a973-2f08-6e43-8cfa-6b1b6e20024f"],
Cell[473262, 8966, 153, 3, 31, "Input",ExpressionUUID->"4970c6f1-b4bd-1c43-a6e1-745ef4b2c653"],
Cell[473418, 8971, 154, 3, 31, "Input",ExpressionUUID->"63e244c5-a50c-8a4f-9491-75ddd2cb4e31"],
Cell[473575, 8976, 156, 3, 31, "Input",ExpressionUUID->"0590bca5-71fd-4b40-8ebd-d47541e96532"],
Cell[473734, 8981, 152, 3, 31, "Input",ExpressionUUID->"ad69ae31-5280-3848-b08d-9129d9467bfc"],
Cell[473889, 8986, 154, 3, 31, "Input",ExpressionUUID->"e14cbcb0-af49-3a44-974e-59a4421a0dbc"],
Cell[474046, 8991, 156, 3, 31, "Input",ExpressionUUID->"b92344a5-0033-0642-ad77-5737b6314a3e"],
Cell[474205, 8996, 156, 3, 31, "Input",ExpressionUUID->"56b57706-bb70-8a43-a13e-d6bd441c8d4f"]
}
]
*)

(* End of internal cache information *)

